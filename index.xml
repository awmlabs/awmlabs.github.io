<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>awm-Tech</title>
    <link>https://blog.awm.jp/index.xml</link>
    <description>Recent content on awm-Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; awm.jp</copyright>
    <lastBuildDate>Fri, 18 Nov 2016 17:02:28 +0900</lastBuildDate>
    <atom:link href="https://blog.awm.jp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>任意のファイルから PNG を抜き出す</title>
      <link>https://blog.awm.jp/2016/11/18/png/</link>
      <pubDate>Fri, 18 Nov 2016 17:02:28 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/18/png/</guid>
      <description>

&lt;h1 id=&#34;ツールを作ったきっかけ&#34;&gt;ツールを作ったきっかけ&lt;/h1&gt;

&lt;p&gt;カラー絵文字用フォントには色んな方式がありまして、その中でも Apple のカラー絵文字と、 Google のNotoColorEmoji のフォントは、ファイルの中に絵文字のPNG画像データが埋め込まれています。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure-ttf.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;この PNG 画像を抽出するのが目的です。&lt;/p&gt;

&lt;h1 id=&#34;カラー絵文字&#34;&gt;カラー絵文字&lt;/h1&gt;

&lt;p&gt;カラー絵文字フォントには以下の方式があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a) SVG 画像を入れる&lt;/li&gt;
&lt;li&gt;b) フォントにPNG画像を入れる&lt;/li&gt;
&lt;li&gt;c) 色数分の文字データをもってレイヤー合成で表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はこのうち b) 方式のフォントファイルから絵文字の画像を抜きだします。&lt;/p&gt;

&lt;p&gt;参考)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple Color Emoji spec

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6sbix.html&#34;&gt;https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6sbix.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Google Noto Color Emoji spec

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rawgit.com/behdad/color-emoji/master/specification/v1.html&#34;&gt;https://rawgit.com/behdad/color-emoji/master/specification/v1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本来であれば上記仕様書に従って分解するべきですが、面倒なので PNG の先頭シグネチャを目印に抜き出す(フォントに限定しない)汎用的なツールを作りました。
絵文字以外の画像も取れるかもしれませんが、ご愛嬌という事で。。&lt;/p&gt;

&lt;h1 id=&#34;png-の構造&#34;&gt;PNG の構造&lt;/h1&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure-png.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;処理概要&#34;&gt;処理概要&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;1) フォントファイルの先頭から PNG のシグネチャを探す。&lt;/li&gt;
&lt;li&gt;2) 見つけたら、その後ろのチャンクを順番に見る。

&lt;ul&gt;
&lt;li&gt;len + name + payload + crc の構造&lt;/li&gt;
&lt;li&gt;len は UInt32(4byte) BigEndiana&lt;/li&gt;
&lt;li&gt;name は4文字(4byte)。IHDR チャンクで始まり IEND チャンクで終わる&lt;/li&gt;
&lt;li&gt;チャンクの最後 4byte に crc 値がある事に注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3) IEND のチャンクにたどり着いたら、そこまでを一つの PNGファイルとして出力する。&lt;/li&gt;
&lt;li&gt;4) 1 に戻る&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ツール-take1&#34;&gt;ツール take1&lt;/h1&gt;

&lt;p&gt;すみません、PHP で。。。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/misc/blob/96452d7ddbe797685728a5825df2cf3ca863c80c/php/pngextract.php&#34;&gt;https://github.com/yoya/misc/blob/96452d7ddbe797685728a5825df2cf3ca863c80c/php/pngextract.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PNG の先頭シグネチャは以下の8バイトです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$pngSignature = &amp;quot;\x89\x50\x4E\x47\x0D\x0A\x1A\x0A&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このシグネチャを探して、チャンクを IEND まで辿る処理は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$startOffset = strpos($data, $pngSignature, $offset);
$offset = $startOffset + strlen($pngSignature);
$iendFound = false;
while (($offset + 8) &amp;lt; $dataLen) {
    $len = readUI32($data, $offset);
    $sig = substr($data, $offset + 4 , 4);
    $offset += 4 + 4 + $len + 4; // len + name + &amp;lt;payload&amp;gt; + crc
    if ($sig === &amp;quot;IEND&amp;quot;) {
        $iendFound = true;
        break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;実行例&#34;&gt;実行例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(Google) NotoSans Color Emoji&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php pngextract.php  -f NotoColorEmoji.ttf -p notoemoji
notoemoji000000.png
notoemoji000001.png
notoemoji000002.png
＜略＞
notoemoji002384.png
notoemoji002385.png
notoemoji002386.png
OK
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../notoemoji-ss.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apple Color Emoji&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php pngextract.php -f /System/Library/Fonts/Apple\ Color\ Emoji.ttf -p appleemoji
appleemoji000000.png
appleemoji000001.png
appleemoji000002.png
＜略＞
appleemoji009538.png
appleemoji009539.png
appleemoji009540.png
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../appleemoji-ss.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Apple の方が PNG ファイルの数(5974 &amp;gt; 2387)が多いけれど、画像サイズが Google の方が大きい(136x128 &amp;gt; 20x20)という違いがありますね。&lt;/p&gt;

&lt;h1 id=&#34;ツール-take2-ストリーム方式&#34;&gt;ツール take2 (ストリーム方式)&lt;/h1&gt;

&lt;p&gt;上記のプログラムでは file_get_contents でファイルの全データをメモリに載せているので、ファイルが数GB になると動かない可能性があります。&lt;/p&gt;

&lt;p&gt;ファイルストリームで処理する版に改良しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/misc/blob/14686cfdb14e3859605710488a2ddd6a63a965de/php/pngextract.php&#34;&gt;https://github.com/yoya/misc/blob/14686cfdb14e3859605710488a2ddd6a63a965de/php/pngextract.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$fp = fopen($file, &amp;quot;rb&amp;quot;);
for ($i = 0 ; searchText($fp, $pngSignature); $i++) {
     $outputFilename = sprintf(&amp;quot;%s%06d.png&amp;quot;, $prefix, $i);
    echo &amp;quot;$outputFilename\n&amp;quot;;
    $fp_out = fopen($outputFilename, &amp;quot;wb&amp;quot;);
    fwrite($fp_out, $pngSignature);
    $iendFound = false;
    while (($len_name = fread($fp, 8)) !== false) {
        fwrite($fp_out, $len_name);
        $len = readUI32(substr($len_name, 0, 4));
        $name = substr($len_name, 4, 4);
        $payload_crc = fread($fp, $len + 4);
        if ($payload_crc === false) {
            break;
        }
        fwrite($fp_out, $payload_crc);
        if ($name === &amp;quot;IEND&amp;quot;) {
            $iendFound = true;
            break;
        }
    }
＜略＞
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要するに、入力したデータをなるべく即出力する事で、メモリを省エネ出来ます。&lt;/p&gt;

&lt;p&gt;なお、strpos が使えなくなるので、ベタな方法で代価してます。(標準関数で欲しい。。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function searchText($fp, $needle) {
    $len = strlen($needle);
    $buff = fread($fp, $len);
    if ($buff === false)  {
        return false;
    }
    while (($buff !== $needle)) {
        if (feof($fp)) {
            return false;
        }
        $c = fread($fp, 1);
        if ($c === false) {
            return false;
        }
        $buff = substr($buff, 1) . $c;
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字列検索はアルゴリズム的に頑張る余地があるのですが、今後の課題にしておきますね。&lt;/p&gt;

&lt;h1 id=&#34;最後に&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;以上。
フォントファイルに限らず、PNG データが生のまま埋め込まれているバイナリであれば、どんな形式であれ PNG データを吸い出せるので便利です。ご活用下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GAS で GoogleDrive のフォルダ一覧</title>
      <link>https://blog.awm.jp/2016/11/08/gas/</link>
      <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/08/gas/</guid>
      <description>

&lt;h1 id=&#34;google-apps-script-作成&#34;&gt;Google Apps Script 作成&lt;/h1&gt;

&lt;p&gt;まずは Google Drive 上で Apps Script のファイルを作成します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../menu-appsscript.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;フォルダの-id-を調べます&#34;&gt;フォルダの ID を調べます&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../drive-url.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ファイル詳細で調べられますが、面倒なので URL から ID をコピペします。&lt;/p&gt;

&lt;h1 id=&#34;ls-的なコード&#34;&gt;ls 的なコード&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Class DriveApps

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/drive-app&#34;&gt;https://developers.google.com/apps-script/reference/drive/drive-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このドキュメントを見て、適当に実装します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function myFunction() {
  var folderId = &amp;quot;0B------------------------k0&amp;quot;; // URLからコピペして埋める
  var folder = DriveApp.getFolderById(folder);
  var [files, folders] = ls(folderId);
  Logger.log(files); // ログ出力
}

// イテレータを使ってファイルとフォルダの配列を作る。
function ls(folder) {
  folder = getFolder(folder);
  var files = [], folders = [];
  fileIte = folder.getFiles();
  while (fileIte.hasNext()) {
    files.push(fileIte.next());
  }
  folderIte = folder.getFolders();
  while (folderIte.hasNext()) {
    folders.push(folderIte.next());
  }
  return [files, folders];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;myFunction を指定して再生ボタンを押すと、一度だけ承認を求められます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../approval.png&#34; /&gt; &lt;/center&gt;
&lt;center&gt; &lt;img src=&#34;../oauth2.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;実行したらログを確認します。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../menu-log.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../log-dialog.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;find-的なコード&#34;&gt;find 的なコード&lt;/h1&gt;

&lt;p&gt;searchFiles という便利なものがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;searchFiles(params)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/drive-app#searchFiles(String&#34;&gt;https://developers.google.com/apps-script/reference/drive/drive-app#searchFiles(String&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;function find(folder, params) {
  var files = [], folders = [];
  fileIte = folder.searchFiles(params);
  while (fileIte.hasNext()) {
    files.push(fileIte.next());
  }
  folderIte = folder.searchFolders(params);
  while (folderIte.hasNext()) {
    folders.push(folderIte.next());
  }
  return [files, folders];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(条件を空にしてるのとサブフォルダがないので ls と同じ動きをしてます)&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../log-dialog-2.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;条件は以下のようなものが使えます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search for Files

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v3/web/search-parameters&#34;&gt;https://developers.google.com/drive/v3/web/search-parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近追加されたり編集されたファイルの一覧を出すのに便利ですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ImageMagick の policy.xml でホワイトリスト？</title>
      <link>https://blog.awm.jp/2016/11/07/policy/</link>
      <pubDate>Mon, 07 Nov 2016 23:51:30 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/07/policy/</guid>
      <description>

&lt;h1 id=&#34;policy-xml&#34;&gt;policy.xml&lt;/h1&gt;

&lt;p&gt;ImageMagick は etc ディレクトリの policy.xml を見て、色んな制御ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert -list configure | grep etc
CONFIGURE_PATH /usr/local/Cellar/imagemagick/6.9.5-7/etc/ImageMagick-6/
$ ls /usr/local/Cellar/imagemagick/6.9.5-7/etc/ImageMagick-6/
coder.xml		mime.xml		type-dejavu.xml
colors.xml		policy.xml		type-ghostscript.xml
delegates.xml		quantization-table.xml	type-windows.xml
log.xml			thresholds.xml		type.xml
magic.xml		type-apple.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;policy.xml で何が出来るかについては、こちらの記事が詳しいので、どうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagickのピクセルキャッシュとリソース制限

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://techlife.cookpad.com/entry/2016/05/18/180703&#34;&gt;http://techlife.cookpad.com/entry/2016/05/18/180703&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;受理する画像のホワイトリストを設定したい&#34;&gt;受理する画像のホワイトリストを設定したい&lt;/h1&gt;

&lt;p&gt;以前、このような事を呟きました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/yoya/status/727867440412024832&#34;&gt;https://twitter.com/yoya/status/727867440412024832&lt;/a&gt;
&lt;center&gt; &lt;img src=&#34;../tweet01-h.png&#34; /&gt; &lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;policy.xml で domain=&amp;ldquo;coder&amp;rdquo; を指定して並べれば、ブラックリスト的に禁止する事は可能ですが、出来ればホワイトリスト方式で設定したいですよね。&lt;/p&gt;

&lt;p&gt;結論を先にいうと無理でしたが。調べた事を以下にメモします。&lt;/p&gt;

&lt;h2 id=&#34;policy-xml-を書き換えて実験&#34;&gt;policy.xml を書き換えて実験&lt;/h2&gt;

&lt;p&gt;以下のように実験しました。&lt;/p&gt;

&lt;h3 id=&#34;先勝ちルールでは&#34;&gt;先勝ちルールでは？&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;policy domain=&amp;quot;coder&amp;quot; rights=&amp;quot;read|write&amp;quot; pattern=&amp;quot;PNG&amp;quot; /&amp;gt;
  &amp;lt;policy domain=&amp;quot;coder&amp;quot; rights=&amp;quot;none&amp;quot; pattern=&amp;quot;*&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; $ convert t.png t2.png
convert: not authorized `t.png&#39; @ error/constitute.c/ReadImage/412.
convert: no images defined `t2.png&#39; @ error/convert.c/ConvertImageCommand/3257.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;後勝ちルールでは&#34;&gt;後勝ちルールでは？&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;policy domain=&amp;quot;coder&amp;quot; rights=&amp;quot;none&amp;quot; pattern=&amp;quot;*&amp;quot; /&amp;gt;
  &amp;lt;policy domain=&amp;quot;coder&amp;quot; rights=&amp;quot;read|write&amp;quot; pattern=&amp;quot;PNG&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ convert t.png t2.png
convert: not authorized `t.png&#39; @ error/constitute.c/ReadImage/412.
convert: no images defined `t2.png&#39; @ error/convert.c/ConvertImageCommand/3257.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どちらも駄目でした。
さて、コードを見てみましょう。&lt;/p&gt;

&lt;h2 id=&#34;magick-policy-xml&#34;&gt;magick/policy.xml&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;エラーの発生箇所はここで&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;domain=CoderPolicyDomain;
rights=ReadPolicyRights;
if (IsRightsAuthorized(domain,rights,read_info-&amp;gt;magick) == MagickFalse)
  {
    errno=EPERM;
    (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,
      &amp;quot;NotAuthorized&amp;quot;,&amp;quot;`%s&#39;&amp;quot;,read_info-&amp;gt;filename);
    read_info=DestroyImageInfo(read_info);
    return((Image *) NULL);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;IsRightsAuthorized の処理はこれです。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;p=(PolicyInfo *) GetNextValueInLinkedList(policy_cache);
while ((p != (PolicyInfo *) NULL) &amp;amp;&amp;amp; (authorized != MagickFalse))
{
  if ((p-&amp;gt;domain == domain) &amp;amp;&amp;amp;
      (GlobExpression(pattern,p-&amp;gt;pattern,MagickFalse) != MagickFalse))
    {
      if (((rights &amp;amp; ReadPolicyRights) != 0) &amp;amp;&amp;amp;
          ((p-&amp;gt;rights &amp;amp; ReadPolicyRights) == 0))
        authorized=MagickFalse;
      if (((rights &amp;amp; WritePolicyRights) != 0) &amp;amp;&amp;amp;
          ((p-&amp;gt;rights &amp;amp; WritePolicyRights) == 0))
        authorized=MagickFalse;
      if (((rights &amp;amp; ExecutePolicyRights) != 0) &amp;amp;&amp;amp;
          ((p-&amp;gt;rights &amp;amp; ExecutePolicyRights) == 0))
        authorized=MagickFalse;
    }
  p=(PolicyInfo *) GetNextValueInLinkedList(policy_cache);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先勝ちでも後がちでもなく False 勝ちルールのようです。。&lt;/p&gt;

&lt;h1 id=&#34;true-は何のため&#34;&gt;True は何のため？&lt;/h1&gt;

&lt;p&gt;False が一つでもマッチすると拒否するのだったら、True は何の為にあるの？と一瞬戸惑いましたが、write だけ、read だけといった区別で使っているようです。&lt;/p&gt;

&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;

&lt;p&gt;残念でした&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/yoya/status/795515839042580481&#34;&gt;https://twitter.com/yoya/status/795515839042580481&lt;/a&gt;
&lt;center&gt; &lt;img src=&#34;../tweet02-h.png&#34; /&gt; &lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;結局-どうすればいいの&#34;&gt;結局、どうすればいいの？&lt;/h2&gt;

&lt;h3 id=&#34;シグネチャを自分でチェック&#34;&gt;シグネチャを自分でチェック&lt;/h3&gt;

&lt;p&gt;画像ファイルは先頭の3,4バイトを見れば、だいたい区別出来るので。ImageMagick に画像ファイルを渡す前に自分でチェックする方法があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JPEG: &amp;ldquo;\xff\xd8\xff&amp;rdquo;&lt;/li&gt;
&lt;li&gt;PNG: &amp;ldquo;\x89PNG&amp;rdquo;&lt;/li&gt;
&lt;li&gt;GIF: &amp;ldquo;GIF&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ブラックリストで頑張る&#34;&gt;ブラックリストで頑張る&lt;/h3&gt;

&lt;p&gt;あとは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert -list coder

Path: [built-in]

Magick      Coder
-------------------------------------------------------------------------------
IMPLICIT    ***
BGRA        BGR
BGRO        BGR
BMP3        BMP
BMP2        BMP
＜略＞
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で出てくる符号化を全部ブラックリストとして列挙して、必要なものだけコメントアウトする方法があります。&lt;/p&gt;

&lt;p&gt;ちょっと辛いし、ImageMagick に新規フォーマットが追加された時の追随が面倒。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TIFF と Exif と JPEG</title>
      <link>https://blog.awm.jp/2016/11/06/tiff/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/06/tiff/</guid>
      <description>

&lt;h1 id=&#34;jpeg-と-exif-と-tiff-の関係&#34;&gt;JPEG と Exif と TIFF の関係&lt;/h1&gt;

&lt;p&gt;TIFF は独立した画像フォーマットの一種ですが、メタ構造をタグで扱う形式の使い勝手が良い為か、JPEG の Exif も TIFF フォーマットをそのまま使っています。&lt;/p&gt;

&lt;p&gt;だいたい以下のような関係です。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure01.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;昨日作った IO_TIFF ライブラリは、JPEG, Exif, TIFF のいずれのファイルを渡されても、TIFF の部分だけ参照してダンプします。&lt;/p&gt;

&lt;h1 id=&#34;実装&#34;&gt;実装&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/IO_TIFF&#34;&gt;https://github.com/yoya/IO_TIFF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IO/TIFF.php の parse function の先頭です。&lt;/p&gt;

&lt;h2 id=&#34;tiff-をとりこむ&#34;&gt;TIFF をとりこむ&lt;/h2&gt;

&lt;p&gt;TIFF ファイルが渡された場合はそのまま取り込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($head2 === &amp;quot;II&amp;quot; || $head2 === &amp;quot;MM&amp;quot;) { // TIFF format
    $bit-&amp;gt;input($tiffData);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exif-を取り込む&#34;&gt;Exif を取り込む&lt;/h2&gt;

&lt;p&gt;Exit ファイルが渡された場合は、先頭6バイトを読み飛ばします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;} else if ($head6 === &amp;quot;Exif\0\0&amp;quot;) { // Exif format
    $bit-&amp;gt;input(substr($tiffData, 6));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jepg-を取り込む&#34;&gt;JEPG を取り込む&lt;/h2&gt;

&lt;p&gt;これは少し厄介です。JPEG の Chunk を APP1 が出るまで読み飛ばし、APP1 の先頭を削って Exif 内の TIFF 形式の場所を抜き出します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;} else if ($head2 === &amp;quot;\xff\xd8&amp;quot;) { // JPEG format
    $jpegBit = new IO_Bit();
    $jpegBit-&amp;gt;input($tiffData);
    $jpegBit-&amp;gt;setOffset(2, 0); // skip SOI
    $found = false;
    while ($jpegBit-&amp;gt;getUI8() == 0xff) { // chunk marker
        $marker2 = $jpegBit-&amp;gt;getUI8();
        $len = $jpegBit-&amp;gt;getUI16BE();
        if ($marker2 === 0xe1) { // APP1
            if ($jpegBit-&amp;gt;getData(6) === &amp;quot;Exif\0\0&amp;quot;) {
                $found = true;
                break;
            }
        }
        $jpegBit-&amp;gt;incrementOffset($len - 2, 0);
    }
    list($offset, $dummy) = $jpegBit-&amp;gt;getOffset();
    if ($found === false) {
        throw new Exception(&amp;quot;Wrong JPEG format. offset: $offset&amp;quot;);
    }
    $bit-&amp;gt;input(substr($tiffData, $offset));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁ、でもバイナリのコンテナ分解に慣れると一瞬でかける処理です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TIFF フォーマットの分解</title>
      <link>https://blog.awm.jp/2016/11/05/tiff/</link>
      <pubDate>Sat, 05 Nov 2016 23:00:11 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/05/tiff/</guid>
      <description>

&lt;h1 id=&#34;tiff-フォーマットの分解&#34;&gt;TIFF フォーマットの分解&lt;/h1&gt;

&lt;p&gt;最近調べている DNG が TIFF の形式という事で、折角なので TIFF を分解してみました。(PHP で)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/IO_TIFF&#34;&gt;https://github.com/yoya/IO_TIFF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;tiff-フォーマット仕様&#34;&gt;TIFF フォーマット仕様&lt;/h1&gt;

&lt;p&gt;仕様はこちらですが、いきなり読むのは辛いはずです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf&#34;&gt;https://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらの Exif 解説の方がイメージが掴めるでしょう。 klab さん有難う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exif データにアクセスするコードを自作してみる

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dsas.blog.klab.org/archives/52123322.html&#34;&gt;http://dsas.blog.klab.org/archives/52123322.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exif は TIFF のフォーマットを利用していて、先頭 6byte &amp;ldquo;Exif\0\0&amp;rdquo; を除けば、TIFF として読めます。
但し、古いバージョンを使うので TIFF としては少しだけ物足りないです。(特に浮動小数点を扱わないとこ)&lt;/p&gt;

&lt;h1 id=&#34;大雑把なイメージ&#34;&gt;大雑把なイメージ&lt;/h1&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure01.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;注意点として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;count が指定する数分 offset が後ろに何個も並ぶ&lt;/li&gt;
&lt;li&gt;type が使うバイト数xcount が 4byte に収まる場合は、offset フィールドに実データを入れてしまう。&lt;/li&gt;
&lt;li&gt;4byte に入りきらない場合は、offset 値として IFD 以外のエリアに置かれたデータの場所を指す&lt;/li&gt;
&lt;li&gt;DNG は新しい TIFF の仕様を使っていて、Exif にない type (11:float, 12:double) を使う。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;php-で分解&#34;&gt;PHP で分解&lt;/h1&gt;

&lt;p&gt;という訳で、こちらが成果物です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/IO_TIFF&#34;&gt;https://github.com/yoya/IO_TIFF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例によって IO_Bit を使ってます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/IO_Bit&#34;&gt;https://github.com/yoya/IO_Bit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DNG で追加されたタグIDと名前の対応表がないので表示が中途半端ですが、一応、分解はできてます。(Raw IFD が見えてないですが。。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php sample/tiffdump.php  -nf test/APC_0025.dng
ByteOrder:II(LittleEndian)
TIFFVersion:0x002A
IFD:0th
    BaseOffset:8 BaseSize:710
    ExtendOffset:722 ExtendSize:133698
    TagTable:(count=59)
        0x00FE((Unknown)): Type:LONG Count:1 Data: [0]1
        0x0100(ImageWidth): Type:LONG Count:1 Data: [0]256
        0x0101(ImageLength): Type:LONG Count:1 Data: [0]192
        0x0102(BitsPerSample): Type:SHORT Count:3 Offset:722 Data: [0]8 [1]0 [2]8
        0x0103(Compression): Type:SHORT Count:1 Data: [0]1
        0x0106(PhotometricInterpretation): Type:SHORT Count:1 Data: [0]2
        0x010F(Make): Type:ASCII Count:6 Offset:728 Data:Apple
        0x0110(Model): Type:ASCII Count:14 Offset:734 Data:iPhone 7 Plus
        0x0111(StripOffsets): Type:LONG Count:1 Data: [0]138956
        0x0112(Orientation): Type:SHORT Count:1 Data: [0]1
        0x0115(SamplesPerPixel): Type:SHORT Count:1 Data: [0]3
        0x0116(RowsPerStrip): Type:LONG Count:1 Data: [0]192
        0x0117(StripByteCounts): Type:LONG Count:1 Data: [0]147456
        0x011C(PlanarConfiguration): Type:SHORT Count:1 Data: [0]1
        0x0131(Software): Type:ASCII Count:42 Offset:748 Data:Adobe Photoshop Lightroom 6.7 (Macintosh)
        0x0132(DateTime): Type:ASCII Count:20 Offset:790 Data:2016:11:04 19:40:39
        0x014A((Unknown)): Type:LONG Count:4 Offset:810 Data: [0]134420 [1]136510 [2]136902 [3]137484
＜略＞
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;todo&#34;&gt;TODO&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;DNG 新規タグは Raw IFD テーブルに多く入るみたいですが、その tag id が謎なので、もうちょっと調べます。。&lt;/li&gt;
&lt;li&gt;FLOAT と DOUBLE の読み出しがまだ怪しいので、そのうち直します。&lt;/li&gt;
&lt;li&gt;build 処理も書いたけど多分動作しません。フィルタ実装が最終目的なので、そのうち対応します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DNG 画像のフォーマット (コンテナ編)</title>
      <link>https://blog.awm.jp/2016/11/04/dng/</link>
      <pubDate>Fri, 04 Nov 2016 23:14:09 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/04/dng/</guid>
      <description>

&lt;h1 id=&#34;dng-仕様書&#34;&gt;DNG 仕様書&lt;/h1&gt;

&lt;p&gt;Adobe DNG ヘルプにリンクがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://helpx.adobe.com/jp/photoshop/digital-negative.html&#34;&gt;https://helpx.adobe.com/jp/photoshop/digital-negative.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wwwimages.adobe.com/content/dam/Adobe/en/products/photoshop/pdfs/dng_spec_1.4.0.0.pdf&#34;&gt;http://wwwimages.adobe.com/content/dam/Adobe/en/products/photoshop/pdfs/dng_spec_1.4.0.0.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;TIFF Compatible
DNG is an extension of the TIFF 6.0 format, and is compatible with the TIFF-EP standard. It
is possible (but not required) for a DNG file to simultaneously comply with both the Digital
Negative specification and the TIFF-EP standard.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TIFF のフォーマットを用いて、新たな DNG 用タグを追加する方式です。
例えば、ImageMagick に TIFF として読ませようとすると。以下のように知らないタグの警告が出ます。(DNG として読ませようとすると PNG に変換して identify するので駄目です)&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../identity-dngAsTiff.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;尚、ExifTool は DNG のタグに対応しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/DNG.html&#34;&gt;http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/DNG.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../exiftool01.png&#34; /&gt; &lt;/center&gt;
&lt;center&gt; &lt;img src=&#34;../exiftool02.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;尚、GPSInfoの座標は神奈川県の相模原公園です。&lt;/p&gt;

&lt;h1 id=&#34;編集の設定値&#34;&gt;編集の設定値&lt;/h1&gt;

&lt;p&gt;Lightroom や Photoshop で&amp;rdquo;現像&amp;rdquo;する際に、色温度やホワイトバランス、露光量等を指定できますが。保存時のダイヤログを見ると DNG 自体に設定値を保存するようです。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../saveMetadata.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Lightroom で編集して実験してみます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;a href=&#34;../photoshop-colortemp.png&#34;&gt; &lt;img src=&#34;../photoshop-colortemp-h.png&#34; /&gt; &lt;/a&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;さて ExifTool で DNG タグを確認。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../exiftool-colortemp.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;確かに値が書き換わってます。&lt;/p&gt;

&lt;h1 id=&#34;history-タグ&#34;&gt;History タグ&lt;/h1&gt;

&lt;p&gt;Lightroom で誤って JPEG 画像を指定して DNG 出力してしまった場合、このタグに記録が残ります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../historyTag.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;便利ですね！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DNG 画像とは</title>
      <link>https://blog.awm.jp/2016/11/03/dng/</link>
      <pubDate>Thu, 03 Nov 2016 21:06:03 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/03/dng/</guid>
      <description>

&lt;h1 id=&#34;dng-画像とは&#34;&gt;DNG 画像とは？&lt;/h1&gt;

&lt;p&gt;Adobe 社が規格した画像形式で、RAW 画像の一種です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Photoshop ヘルプ / Digital Negative （DNG）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://helpx.adobe.com/jp/photoshop/digital-negative.html&#34;&gt;https://helpx.adobe.com/jp/photoshop/digital-negative.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RAW 画像は、カメラメーカーが各々独自の規格を出していますが、それらに対しての統一フォーマット的な意味合いもあります。&lt;/p&gt;

&lt;h1 id=&#34;raw-画像とは&#34;&gt;RAW 画像とは？&lt;/h1&gt;

&lt;p&gt;JPEG の形式を使わず、デジタルカメラの CCD や CMOS センサで採れたデータを、なるべくそのままに記録するものです。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure01.png&#34; &gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;図の解説。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デモザイク：画像センサーは一般的なモニタのようなRGB配列ではない事が通常なので、センサーの物理的配置から格子状のビットマップ各座標のRGB値を算出します&lt;/li&gt;
&lt;li&gt;色変換：一般的なモニタの色域やガンマ値等の特性に合わせて RGB値を補正します。いわゆるカラーマネジメントです。また8bitで量子化し直します。&lt;/li&gt;
&lt;li&gt;圧縮：人間の目があまり気にしない情報を落とし、エントロピー圧縮をかけて、ファイルサイズを減らします。主に高周波成分を切り落とし、YCbCr でのクロマサブサンプリングを行う事もあります。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JPEG は圧縮レベルによって画像が劣化します、例え圧縮をしなくても、そもそも古い時代の規格の為、輝度のダイナミックレンジや色域、またサンプリング量子化の粒度等で妥協した状態で画像データを記録します。&lt;/p&gt;

&lt;h2 id=&#34;メリット&#34;&gt;メリット&lt;/h2&gt;

&lt;p&gt;例えば、(デジタル)現像と呼ばれる作業で以下の事ができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;輝度の高い(明るい)方から低い(暗い)ところまで情報を残しているので、撮影の後で好きな露出を指定して JPEG 画像を作れます。&lt;/li&gt;
&lt;li&gt;撮影の後で、ホワイトバランスを指定して JPEG に変換できます。&lt;/li&gt;
&lt;li&gt;自然な階調のまま色フィルタをかけられます。JPEG 画像にフィルタをかけると階調のアラが目出ちますよね。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デメリット&#34;&gt;デメリット&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JPEG 保存に比べて DNG はファイルサイズが大きい。&lt;/li&gt;
&lt;li&gt;DNG ファイルを投稿できないサイトが多い&lt;/li&gt;
&lt;li&gt;DNG ファイルの画像を表示できない環境が多い&lt;/li&gt;
&lt;li&gt;撮影がもっさりして連写がしにくいらしい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;蛇足&#34;&gt;蛇足&lt;/h2&gt;

&lt;p&gt;大昔、圧縮せずに RGB の値を並べただけの画像を RAW 形式と読んでいた事もあると聞くので、古いドキュメントを見るときは注意が必要かもしれません。&lt;/p&gt;

&lt;h1 id=&#34;raw-画像にどんなのがある&#34;&gt;RAW 画像にどんなのがある？&lt;/h1&gt;

&lt;p&gt;幾つか列挙します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adobe: DNG&lt;/li&gt;
&lt;li&gt;Sony: ARW&lt;/li&gt;
&lt;li&gt;Nikon: NEF&lt;/li&gt;
&lt;li&gt;Fujifilm: RAF&lt;/li&gt;
&lt;li&gt;Sigma: V3, X3F&lt;/li&gt;
&lt;li&gt;Canon: CR2&lt;/li&gt;
&lt;li&gt;Panasonic: RW2&lt;/li&gt;
&lt;li&gt;Hasselblad: 3FR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のサイトも参考にして下さい。沢山の種類があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RAWSAMPLES.CH

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_cameras_supporting_a_raw_format&#34;&gt;https://en.wikipedia.org/wiki/List_of_cameras_supporting_a_raw_format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;raw-画像の現像ツール&#34;&gt;RAW 画像の現像ツール&lt;/h1&gt;

&lt;p&gt;RAW 画像を JPEG 等に変換するツールを(デジタル)現像ツールと呼びます。
各社で独自の RAW 形式をもつので、各々の形式に応じた現像ツールが提供されています。
尚、DNG の場合は Adobe Lightroom で「現像」できます。&lt;/p&gt;

&lt;p&gt;参考) &lt;a href=&#34;http://blog.awm.jp/2016/11/02/dng/&#34;&gt;http://blog.awm.jp/2016/11/02/dng/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;その他現像ツール&#34;&gt;その他現像ツール&lt;/h2&gt;

&lt;p&gt;フリーソフトでは UFRaw と Dcraw が有名です。
例えば、UFRaw は以下のように使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ufraw-batch -create-id=yoya --out-type=png --out-depth=16 --output=out.png input.dng
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;フリー な RAW 現像 ソフト の まとめ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/freerawconverter/Home&#34;&gt;https://sites.google.com/site/freerawconverter/Home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;尚、Google Photo サービスでは RAW 画像を投稿できます。又、インライン画像を保存すると JPEG として取り出せます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実は、GoogleフォトだってRAWに対応しているぞ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hokoxjouhou.blog105.fc2.com/blog-entry-489.html&#34;&gt;http://hokoxjouhou.blog105.fc2.com/blog-entry-489.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考-url&#34;&gt;参考 URL&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;解説！「RAW」ってなに？

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://photo-mini.com/raw-files/&#34;&gt;http://photo-mini.com/raw-files/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RAW画像はどのように圧縮されているか

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cygx.mydns.jp/blog/?arti=431&#34;&gt;http://cygx.mydns.jp/blog/?arti=431&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DNG から ICC プロファイル付き JPEG 画像を作る</title>
      <link>https://blog.awm.jp/2016/11/02/dng/</link>
      <pubDate>Wed, 02 Nov 2016 21:09:00 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/02/dng/</guid>
      <description>

&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;h2 id=&#34;利用するもの&#34;&gt;利用するもの&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PC (MacBook Pro)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のどちらか&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adobe Lightroom CC&lt;/li&gt;
&lt;li&gt;Adobe Photoshop CC&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dng-画像の入手法&#34;&gt;DNG 画像の入手法&lt;/h2&gt;

&lt;p&gt;iPhone7 Plus から DNG 画像を取り出す方法はこちらにまとめました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone7 Plus で撮影した DNG 画像を PC に取り出す方法

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/11/01/dng/&#34;&gt;http://blog.awm.jp/2016/11/01/dng/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この DNG 画像から ICC プロファイル付きで JPEG 画像を生成する方法のメモ書きです。
一行でまとめると。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;プリンタの設定でプロファイルを選択してJPEGファイル出力する。
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;adobe-lightroom-を使う場合&#34;&gt;Adobe Lightroom を使う場合&lt;/h1&gt;

&lt;p&gt;Adobe Cloud で同期するとコレクションに画像が入るので、そこから選択する。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  &lt;a href=&#34;../lightroom01.png&#34;&gt; &lt;img src=&#34;../lightroom02-1.png&#34;&gt; &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;メニューのウィンドウからプリントを選択して、
右端のスクロールバーを一番下まで下げると、カラーマネジメントのパネルが出てくる。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  &lt;a href=&#34;../lightroom02.png&#34;&gt; &lt;img src=&#34;../lightroom02-h.png&#34;&gt; &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;あとは、カラーマネジメントのプロファイルを適当に選択して、右下の「ファイルへ出力」ボタンを押して保存すればOK&lt;/p&gt;

&lt;h1 id=&#34;adobe-photoshop-を使う場合&#34;&gt;Adobe Photoshop を使う場合&lt;/h1&gt;

&lt;p&gt;DNG 画像を開いて、左下の「画像を保存」ボタンを押します。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  &lt;a href=&#34;../photoshop01.png&#34;&gt; &lt;img src=&#34;../photoshop01-45p.png&#34;&gt; &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;以下の保存オプションで選択&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ファイル形式に JPEG&lt;/li&gt;
&lt;li&gt;カラースペースに適当なプロファイル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
  &lt;a href=&#34;../photoshop02.png&#34;&gt; &lt;img src=&#34;../photoshop02-30p.png&#34;&gt; &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;あとは右上の保存を押すだけ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iPhone7 Plus で撮影した DNG 画像を PC に取り出す方法</title>
      <link>https://blog.awm.jp/2016/11/01/dng/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/01/dng/</guid>
      <description>

&lt;h1 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;実機

&lt;ul&gt;
&lt;li&gt;iPhone7 Plus (iPhone7 は試してません。所持してないので)&lt;/li&gt;
&lt;li&gt;PC (MacBook Pro で確認しました)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アカウント

&lt;ul&gt;
&lt;li&gt;Adobe Cloud アカウント (ID 自体は無料だけど、PC で Lightroom を使うのに有料サブスクリプションが要る)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アプリ

&lt;ul&gt;
&lt;li&gt;Adobe Lightroom for iPhone (無料)&lt;/li&gt;
&lt;li&gt;Adobe (Photoshop) Lightroom CC (有料)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;全体の流れ&#34;&gt;全体の流れ&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../figure1.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;手順&#34;&gt;手順&lt;/h1&gt;

&lt;h2 id=&#34;iphone7-plus&#34;&gt;iPhone7 Plus&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adobe Lightroom for iPhone をインストールする (無料)&lt;/li&gt;
&lt;li&gt;Adobe CC アカウントでログインする。(画面左上からアクセス)&lt;/li&gt;
&lt;li&gt;Lightroom のカメラを使って撮影 (画面右下からアクセス)

&lt;ul&gt;
&lt;li&gt;DNG の(フラット)ボタンがあるので有効にする&lt;/li&gt;
&lt;li&gt;撮影する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;同期が終わるまで待つ

&lt;ul&gt;
&lt;li&gt;雲のアイコンをタッチすると進捗が分かる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pc-macbook-pro&#34;&gt;PC (MacBook Pro)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adobe Lightroom CC をインストールする (有料)&lt;/li&gt;
&lt;li&gt;Adobe CC アカウントでログインする。(覚えてないけど操作があったかも)&lt;/li&gt;
&lt;li&gt;Lightroom mobile との同期を待つ

&lt;ul&gt;
&lt;li&gt;左上の Lr ログをクリックすれば同期しているか確認出来る。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像の一覧が出るので、DNG が欲しい画像を選択する。&lt;/li&gt;
&lt;li&gt;右クリックで Lightroom プリセット =&amp;gt; DNG に書き出しを実行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上で、撮影した DNG ファイルが手元のディスクに保存されます。&lt;/p&gt;

&lt;h1 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Lightroom デスクトップとモバイルプラットフォームの同期

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://helpx.adobe.com/jp/lightroom/help/lightroom-mobile-desktop-features.html&#34;&gt;https://helpx.adobe.com/jp/lightroom/help/lightroom-mobile-desktop-features.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JPEG と ICC プロファイル</title>
      <link>https://blog.awm.jp/2016/09/10/jpegicc/</link>
      <pubDate>Sat, 10 Sep 2016 00:11:41 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/09/10/jpegicc/</guid>
      <description>

&lt;h1 id=&#34;jpeg-と-icc-プロファイル&#34;&gt;JPEG と ICC プロファイル&lt;/h1&gt;

&lt;p&gt;JPEG は APP2 チャンクに埋め込んだ ICC プロファイル次第で、同じ RGB値&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;や CMYK 値でも モニタ(又はプリンタ)に出力する色が変わります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;../jpeg-profile-icc.png&#34; /&gt; &lt;/br&gt;
引用: &lt;a href=&#34;https://speakerdeck.com/yoya/jpegmeta&#34;&gt;https://speakerdeck.com/yoya/jpegmeta&lt;/a&gt;
 &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
 sRGB, Adobe RGB 補正の例 &lt;/br&gt;
 &lt;img src=&#34;../figure-srgb-adobergb.png&#34; /&gt;
 &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;尚、モニタに表示する色は RGB が基本ですが、プリンタは CMYK (インクの色)です。JPEG の色はその両方に対応していて、ICC プロファイルも両方のタイプが存在します。&lt;/p&gt;

&lt;h1 id=&#34;rgb-色空間&#34;&gt;RGB 色空間&lt;/h1&gt;

&lt;p&gt;例えば赤を表す RGB:(255,0,0) 。
世の中に数あるディスプレイが各々全力で鮮やかな赤を表示すると全部色が違ってしまうので、そこそこ鮮やかな赤色に抑える事で実際に表示する色を統一する規格が色々と存在します。&lt;/p&gt;

&lt;p&gt;一般に知られる RGB 色空間の ICC プロファイルには以下のようなものがあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sRGB, Apple RGB, Adobe RGB, DCI-P3, ProPhoto RGB, scRGB, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これらは主に、色域、特性曲線(RGBだとガンマ補正)、が異なってきます。白色点(光源の色に引きずられて白として感じる色は変わる)は D65 が基本です。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  Gamut(色域) &lt;br/&gt;
  &lt;img src=&#34;../StandardProfilesGamutCoverage.jpg&#34; aligh=&#34;center&#34; /&gt; &lt;br/&gt;
  ( 引用元: &lt;a href=&#34;http://wiki.nuaj.net/index.php?title=Color_Profile&#34;&gt;http://wiki.nuaj.net/index.php?title=Color_Profile&lt;/a&gt; )
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;又、昔の CRT モニタは入力電圧に対して実際の明るさが比例せず、gamma 2.2 曲線に近い特性があったので、それに合わせたガンマ補正も入ります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;../Gamma06_300.png&#34; /&gt; &lt;br /&gt;
引用元: &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AC%E3%83%B3%E3%83%9E%E5%80%A4&#34;&gt; &lt;a href=&#34;https://ja.wikipedia.org/wiki/ガンマ値&#34;&gt;https://ja.wikipedia.org/wiki/ガンマ値&lt;/a&gt; &lt;/a&gt;
 &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;あえてその逆補正した値を持つ事で、そのまま値を渡すとちょうど線形に戻る。という理屈です。&lt;/p&gt;

&lt;h2 id=&#34;rgb-のデフォルト&#34;&gt;RGB のデフォルト&lt;/h2&gt;

&lt;p&gt;Web の世界では sRGB が標準です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Standard Default Color Space for the Internet - sRGB

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/Graphics/Color/sRGB.html&#34;&gt;https://www.w3.org/Graphics/Color/sRGB.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ICC プロファイルが入っていない JPEG 画像は sRGB として暗黙的に解釈します。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure-noicc.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;高演色技術の発達した今の時代に sRGB の色域は物足りない事もありますが、ある意味平和な世界です、CMYK と違って。。&lt;/p&gt;

&lt;h1 id=&#34;cmyk-色空間&#34;&gt;CMYK 色空間&lt;/h1&gt;

&lt;p&gt;プリンタに出力する色は CMYK で表現します。
Cyan, Magenta, Yellow, blacK &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; で各々インクの量です。&lt;/p&gt;

&lt;p&gt;CMYK 色空間の ICC プロファイルは検索すると以下のが見つかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Japan Color, US SWOP, FOGRA, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(環境によってインクの発色が変わってくるので印刷所ごととか機器ごとにプロファイルを持ってそうですが。。)&lt;/p&gt;

&lt;p&gt;RGB と CMYK は大雑把に以下の関係にあります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
 &lt;img src=&#34;../CMYRGBv3.png&#34; /&gt; &lt;br /&gt;
   (引用元: &lt;a href=&#34;http://www.iwashi.org/archives/4108&#34;&gt;http://www.iwashi.org/archives/4108&lt;/a&gt; )
 &lt;img src=&#34;../fig14-half.jpg&#34; /&gt; &lt;br /&gt;
   (引用元: &lt;a href=&#34;http://graphicartsunit.tumblr.com/post/48824825718/%E7%B4%99%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%83%BC%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AErgb%E3%82%AB%E3%83%A9%E3%83%BC%E8%B6%85%E5%85%A5%E9%96%80&#34;&gt;http://graphicartsunit.tumblr.com/post/post/48824825718/紙デザイナーのためのrgbカラー超入門&lt;/a&gt; )
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;なので、リニア RGB, リニア CMYK というものがあるとすれば、以下の計算式になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick: magick/colorspace-private.h&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cyan    = 1.0 - red;
magenta = 1.0 - green;
yellow  = 1.0 - blue;
(一番小さな値を black にしてその分補正)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかしながら、実際の CMYK はインクの量を表すので、その値に補正する必要があります。以下の図はグレースケールを作るのに必要な CMYK の値だそうです。
&lt;center&gt;
 Japan Color 2001 Coated &lt;br /&gt;
 &lt;img src=&#34;../10993-04-JapanColor-crop.jpg&#34; /&gt; &lt;br /&gt;
   (引用元: &lt;a href=&#34;https://www.jagat.or.jp/past_archives/content/view/3083.html&#34;&gt;https://www.jagat.or.jp/past_archives/content/view/3083.html&lt;/a&gt; )
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;cyan = 1.0 - red&amp;rdquo; 等で RGB を逆にしただけの CMYK と違って、灰色を作るのに Y, C, M が同量ではありません。また直線でもガンマ曲線でもない曲線になります。&lt;/p&gt;

&lt;h2 id=&#34;cmyk-のデフォルト&#34;&gt;CMYK のデフォルト(?)&lt;/h2&gt;

&lt;p&gt;RGB における sRGB と違って CMYK には世界的なデファクトがありません。インクの色のノリ具合まで加味されるので温度や湿度といった環境によっても異なりますし、そもそも無理でしょう。&lt;/p&gt;

&lt;p&gt;ですので、ICC プロファイルが入っていない CMYK JPEG をモニタやプリンタに出力する時に、どうするかは環境によって異なってきます。&lt;/p&gt;

&lt;p&gt;例えば、MacOS の標準ビューアや Safari は、ColorSync の仕組みで色を補正していて、以下の ICC プロファイル&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;を用いるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/System/Library/ColorSync/Profiles/Generic\ CMYK\ Profile.icc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CMYK JPEG は必ず ICC プロファイルを埋める必要があると言えます。とりあえず日本に限って言えば、Japan Color 2001 Coated を使えば大体 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; は大丈夫でしょう。&lt;/p&gt;

&lt;p&gt;Chrome や Firefox など、CMYK のカラープロファイルを解釈しないブラウザだと、インク特性を無視してリニアの CMYK =&amp;gt; RGB 処理を行うようで、話が少し面倒だったりします。&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;カラーマネージメントとプロファイル変換

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://w3.kcua.ac.jp/~fujiwara/infosci/colorman/color_manage.html&#34;&gt;http://w3.kcua.ac.jp/~fujiwara/infosci/colorman/color_manage.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まだCMYKで消耗してるの？〜大幅な色補正をCMYKで行ってはいけない理由〜

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iwashi.org/archives/4108&#34;&gt;http://www.iwashi.org/archives/4108&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;紙デザイナーのためのrgbカラー超入門

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://graphicartsunit.tumblr.com/post/48824825718/%E7%B4%99%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%83%BC%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AErgb%E3%82%AB%E3%83%A9%E3%83%BC%E8%B6%85%E5%85%A5%E9%96%80&#34;&gt;http://graphicartsunit.tumblr.com/post/post/48824825718/紙デザイナーのためのrgbカラー超入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;JPEG は RGB 値をYCbCrに変換して保存します
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;最近の FireFox のデフォルト設定だと、ICC プロファイルが入っていないと何も補正しないそうです。そのままディスプレイのプロファイルで解釈されます。辛い。。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;blacK の K という説より、Key の略という方が多勢のようです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;この Generic CMYK Profile は Japan Color 2001 corted , US Sheetred Coated , FOGRA39 のいずれとも一致しませんでした。無難なプロファイルに見えます。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;Japan Color 2001 Coated はマット紙用プロファイルで、オフ輪だと japan Web Coated の方が良いそうです。参考) &lt;a href=&#34;https://www.jagat.or.jp/past_archives/content/view/3083.html&#34;&gt;https://www.jagat.or.jp/past_archives/content/view/3083.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RGBA4444 の追加実験</title>
      <link>https://blog.awm.jp/2016/07/22/rgb444a4/</link>
      <pubDate>Fri, 22 Jul 2016 11:55:28 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/07/22/rgb444a4/</guid>
      <description>

&lt;h1 id=&#34;rgba4444-の追加実験&#34;&gt;RGBA4444 の追加実験&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;RGB444 変換で劣化しない画像を ImageMagick で作る

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.awm.jp/2016/07/21/rgb444/&#34;&gt;https://blog.awm.jp/2016/07/21/rgb444/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RGBA4444 変換で劣化しない画像を ImageMagick で作る

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.awm.jp/2016/07/22/rgba4444/&#34;&gt;https://blog.awm.jp/2016/07/22/rgba4444/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RGBA4444 のチャンネル分離してディザをかける方法だと色合いが変わってしまうので、A だけ分離する方法を試しました。&lt;/p&gt;

&lt;p&gt;結論としては、RGBA バラバラに処理した時と見た目が変わりません。唯の検証メモという扱いでどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;rgb444-a4-のディザ画像検証&#34;&gt;RGB444, A4 のディザ画像検証&lt;/h2&gt;

&lt;h3 id=&#34;パレット画像の準備&#34;&gt;パレット画像の準備&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RGB444 パレット作成
&lt;pre&gt;
$ convert -size 16x16 gradient:black-red black-red.png
$ convert -size 16x16 gradient:black-green1 -rotate 270 black-green.png
$ composite -compose plus black-red.png black-green.png black-red-green.png
$ convert -size 256x16 tile:black-red-green.png black-red-green-tiled.png
$ convert -size 16x16 gradient:black-blue -scale 100%x1600% -rotate 270 black-blue.png
$ composite black-red-green-tiled.png -compose plus black-blue.png black-red-green-blue.png
&lt;/pre&gt;
&lt;img src=&#34;../black-red-green-blue.png&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;実行コマンド&#34;&gt;実行コマンド&lt;/h3&gt;

&lt;pre&gt;
$ convert gradient_hue_polar-transparent.png +matte rgb.png
&lt;img src=&#34;../rgb.png&#34; /&gt;
$ convert gradient_hue_polar-transparent.png -channel A -separate alpha.png
&lt;img src=&#34;../alpha.png&#34; /&gt;

$ convert rgb.png \
    -dither Riemersma -remap black-red-green-blue.png \
    red-green-blue444.png
&lt;img src=&#34;../red-green-blue444.png&#34; /&gt;
$ convert alpha.png \
    -dither Riemersma -remap gray16palette.png \
    alpha444.png
&lt;img src=&#34;../alpha444.png&#34; /&gt;
$ convert red-green-blue444.png -separate -channel RGB 444.png
&lt;img src=&#34;../444-0.png&#34; /&gt;
&lt;img src=&#34;../444-1.png&#34; /&gt;
&lt;img src=&#34;../444-2.png&#34; /&gt;
$ convert 444-[012].png alpha444.png -channel RGBA -combine red-green-blue-alpha4444.png
&lt;img src=&#34;../red-green-blue-alpha4444.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;特に改善されず。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RGBA4444 変換で劣化しない画像を ImageMagick で作る</title>
      <link>https://blog.awm.jp/2016/07/22/rgba4444/</link>
      <pubDate>Fri, 22 Jul 2016 09:10:28 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/07/22/rgba4444/</guid>
      <description>

&lt;h1 id=&#34;rgba4444-変換で劣化しない画像を-imagemagick-で作る&#34;&gt;RGBA4444 変換で劣化しない画像を ImageMagick で作る&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;RGB444 変換で劣化しない画像を ImageMagick で作る

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/07/21/rgb444/&#34;&gt;http://blog.awm.jp/2016/07/21/rgb444/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前回の記事では RGBA4444 のディザに失敗しました。ImageMagick は透明度を含むんだ時のディザ処理が苦手のようです。&lt;/p&gt;

&lt;p&gt;以下のサイトで紹介されている、色のチャネル(RGBA)毎に個別にディザをかける方法だとうまくいきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[unity][cg_tools] RGBA4444に変換できるツール

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blawat2015.no-ip.com/~mieki256/diary/201402154.html&#34;&gt;http://blawat2015.no-ip.com/~mieki256/diary/201402154.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;変換方法-ブログを参考に-rgba4444&#34;&gt;変換方法 (ブログを参考に) RGBA4444&lt;/h2&gt;

&lt;h3 id=&#34;テスト画像&#34;&gt;テスト画像&lt;/h3&gt;

&lt;pre&gt;
$ convert -size 300x900 gradient:&#39;#FFF-#0FF&#39; -rotate 90 \
    -matte -channel a -fx &#34;u*j/h&#34; \
    -alpha set -virtual-pixel Transparent +distort Polar 149 +repage \
    -rotate 90 -set colorspace HSB -colorspace RGB \
    gradient_hue_polar-transparent.png
&lt;img src=&#34;../gradient_hue_polar-transparent.png&#34; /&gt;
&lt;/pre&gt;

&lt;h3 id=&#34;パレット画像の準備&#34;&gt;パレット画像の準備&lt;/h3&gt;

&lt;pre&gt;
$ convert -size 16x16 gradient:black-white gray16palette.png
&lt;img src=&#34;../gray16palette.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;参照した記事では 0xfff を 0xf0f0f0 と 0xffffff のどちらで表わそうか迷ってますが、最大値の 0xfff は 0xffffff でしか表現出来ないので、後者を採用してます。&lt;/p&gt;

&lt;p&gt;尚、PNG は仕様で後者である事が示されています &amp;gt; &lt;a href=&#34;https://www.w3.org/TR/PNG/#12Sample-depth-scaling&#34;&gt;https://www.w3.org/TR/PNG/#12Sample-depth-scaling&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;実行コマンド&#34;&gt;実行コマンド&lt;/h3&gt;

&lt;pre&gt;
$ convert gradient_hue_polar-transparent.png -channel RGBA -separate \
    \( -dither FloydSteinberg -remap gray16palette.png \) \
    -channel RGBA -combine rgba4444.png
&lt;img src=&#34;../rgba4444.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;尚、ディザ変換をせずに Unity 等に RGBA4444 指定で渡した場合は、以下のようになるはずです。&lt;/p&gt;

&lt;pre&gt;
$ convert gradient_hue_polar-transparent.png -depth 4 depth4.png
&lt;img src=&#34;../depth4.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;これよりは予め自分でディザをかけた方が良いはずです。&lt;/p&gt;

&lt;h2 id=&#34;テスト２-rgb444&#34;&gt;テスト２ (RGB444)&lt;/h2&gt;

&lt;p&gt;RGB 画像でも同じ方法で変換できます。
&lt;pre&gt;
$ convert -size 300x900 gradient:&amp;lsquo;#FFF-#0FF&amp;rsquo; -rotate 90 &lt;br /&gt;
    -alpha set -virtual-pixel Transparent +distort Polar 149 +repage &lt;br /&gt;
    -rotate 90 -set colorspace HSB -colorspace RGB &lt;br /&gt;
    gradient_hue_polar.png
&lt;img src=&#34;../gradient_hue_polar.png&#34; /&gt;
$ convert gradient_hue_polar.png -channel RGBA -separate &lt;br /&gt;
    ( -dither FloydSteinberg -remap gray16palette.png ) &lt;br /&gt;
    -channel RGBA -combine rgb444.png
&lt;img src=&#34;../rgb444.png&#34; /&gt;
&lt;/pre&gt;
透明度がない画像は -channel RGB でも同じ結果を得られます。&lt;/p&gt;

&lt;p&gt;尚、今回の方法は原色が強く出すぎる傾向があるので、前回説明した方法( &lt;a href=&#34;http://blog.awm.jp/2016/07/21/rgb444/&#34;&gt;http://blog.awm.jp/2016/07/21/rgb444/&lt;/a&gt; )の方が良い結果が得られそうです。&lt;/p&gt;

&lt;h2 id=&#34;追試&#34;&gt;追試&lt;/h2&gt;

&lt;p&gt;RGB と A で分離して、RGB は前回の方法、A は今回の方法の組み合わせで実験しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RGBA4444 の追加実験

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.awm.jp/2016/07/22/rgb444a4/&#34;&gt;https://blog.awm.jp/2016/07/22/rgb444a4/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RGBA をバラバラにする今回の方法と結果が変わらないので、唯の参考です。&lt;/p&gt;

&lt;h2 id=&#34;参考-url&#34;&gt;参考 URL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Unityやるには必須！RGBA画像減色の基礎をまじめに書いてみた

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://design.kayac.com/topics/2014/02/unity-RGBA4444.php&#34;&gt;http://design.kayac.com/topics/2014/02/unity-RGBA4444.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unityで、もっとキレイな16bitカラーテクスチャを使おう！

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webtech.co.jp/blog/game-develop/unity/2562/&#34;&gt;http://www.webtech.co.jp/blog/game-develop/unity/2562/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dither using Pre-Defined Color Maps

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/Usage/quantize/#remap&#34;&gt;http://www.imagemagick.org/Usage/quantize/#remap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Gradients in other Colorspaces

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/Usage/canvas/#gradient_colorspace&#34;&gt;http://www.imagemagick.org/Usage/canvas/#gradient_colorspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PNG Specification 12.5 Sample depth scaling

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/PNG/#12Sample-depth-scaling&#34;&gt;https://www.w3.org/TR/PNG/#12Sample-depth-scaling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RGB444 変換で劣化しない画像を ImageMagick で作る</title>
      <link>https://blog.awm.jp/2016/07/21/rgb444/</link>
      <pubDate>Thu, 21 Jul 2016 21:28:11 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/07/21/rgb444/</guid>
      <description>

&lt;h1 id=&#34;rgb444-変換で劣化しない画像を-imagemagick-で作る&#34;&gt;RGB444 変換で劣化しない画像を ImageMagick で作る&lt;/h1&gt;

&lt;p&gt;詳しい話は以下のサイトに任せるとして、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unityやるには必須！RGBA画像減色の基礎をまじめに書いてみた

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://design.kayac.com/topics/2014/02/unity-RGBA4444.php&#34;&gt;http://design.kayac.com/topics/2014/02/unity-RGBA4444.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;PNGquantやImageMagickを使う
これらは画像変換の専用ソフトです。

注意して欲しいのはこれらのソフトにはPNG用の減色設定もあるので、
間違えてしまうとさっきのまでの話のように劣化してしまいます。

設定にご注意を。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このうち、ImageMagick での具体的なやり方です。&lt;/p&gt;

&lt;h2 id=&#34;追記-2017-07-22&#34;&gt;(追記) 2017/07/22&lt;/h2&gt;

&lt;p&gt;RGBA4444 は以下の方で説明します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RGBA4444 変換で劣化しない画像を ImageMagick で作る

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/07/22/rgba4444/&#34;&gt;http://blog.awm.jp/2016/07/22/rgba4444/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;imagemagick-の減色処理&#34;&gt;ImageMagick の減色処理&lt;/h2&gt;

&lt;p&gt;ImageMagick の減色の方法は何種類か存在します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a.) 色数を指定して減色&lt;/li&gt;
&lt;li&gt;(b.) ビット深度を変更して減色&lt;/li&gt;
&lt;li&gt;(c.) 残す色を指定して減色&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通常は、ImageMagick の減色といえば (a.) の方式です。
アルゴリズムの詳細は以下のブログをご参考下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick 改造入門 (その弐) 減色処理前編

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://labs.gree.jp/blog/2012/09/4824/&#34;&gt;http://labs.gree.jp/blog/2012/09/4824/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unity に RGBA4444 指定で PNG 画像を渡した場合は (b.) 相当の処理が動くようです。
&lt;pre&gt;
$ convert -size 300x900 gradient:&amp;lsquo;#FFF-#0FF&amp;rsquo; -rotate 90 &lt;br /&gt;
    -alpha set -virtual-pixel Transparent +distort Polar 149 +repage &lt;br /&gt;
    -rotate 90 -set colorspace HSB -colorspace RGB &lt;br /&gt;
    gradient_hue_polar.png
&lt;img src=&#34;../gradient_hue_polar.png&#34; /&gt;
$ convert gradient_hue_polar.png -depth 4 depth4.png
&lt;img src=&#34;../depth4.png&#34; /&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;これだと画質劣化が目立つので、(b.) の処理が動いても色が変わらないよう、あらかじめ (c.) の方法で減色をする。というのが今回の手法です。&lt;/p&gt;

&lt;h2 id=&#34;変換方法-成功例-rgb444&#34;&gt;変換方法 (成功例) RGB444&lt;/h2&gt;

&lt;h3 id=&#34;テスト画像&#34;&gt;テスト画像&lt;/h3&gt;

&lt;p&gt;先ほど作成した画像 gradient_hue_polar.png を利用します。
&lt;img src=&#34;../gradient_hue_polar.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;変換の準備&#34;&gt;変換の準備&lt;/h3&gt;

&lt;p&gt;ディザで残したい色を持つパレット画像を作成します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RGB444 パレット作成
&lt;pre&gt;
$ convert -size 16x16 gradient:black-red black-red.png
&lt;img src=&#34;../black-red.png&#34; /&gt;
$ convert -size 16x16 gradient:black-green1 -rotate 270 black-green.png
&lt;img src=&#34;../black-green.png&#34; /&gt;
$ composite -compose plus black-red.png black-green.png black-red-green.png
&lt;img src=&#34;../black-red-green.png&#34; /&gt;
$ convert -size 256x16 tile:black-red-green.png black-red-green-tiled.png
&lt;img src=&#34;../black-red-green-tiled.png&#34; /&gt;
$ convert -size 16x16 gradient:black-blue -scale 100%x1600% -rotate 270 black-blue.png
&lt;img src=&#34;../black-blue.png&#34; /&gt;
$ composite black-red-green-tiled.png -compose plus black-blue.png black-red-green-blue.png
&lt;img src=&#34;../black-red-green-blue.png&#34; /&gt;
&lt;/pre&gt;
&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;実行コマンド&#34;&gt;実行コマンド&lt;/h3&gt;

&lt;p&gt;-remap で画像ファイルを渡すと、その画像に含まれる色に限定してディザ処理をします。&lt;/p&gt;

&lt;pre&gt;
$ convert gradient_hue_polar.png \
    -dither Riemersma -remap black-red-green-blue.png \
    rgb444.png
&lt;img src=&#34;../rgb444.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;RGB444 だと色数が減るのでどのみち画質の劣化は避けられません。先ほどの変換をかけずに渡した場合よりマシという話です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../depth4.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;透明度を含む実験-失敗例-rgba4444&#34;&gt;透明度を含む実験 (失敗例) RGBA4444&lt;/h2&gt;

&lt;p&gt;失敗例です。透明度を含む場合は減色が綺麗に出来ませんでした。&lt;/p&gt;

&lt;h3 id=&#34;テスト画像-1&#34;&gt;テスト画像&lt;/h3&gt;

&lt;pre&gt;
$ convert -size 300x900 gradient:&#39;#FFF-#0FF&#39; -rotate 90 \
    -matte -channel a -fx &#34;u*j/h&#34; \
    -alpha set -virtual-pixel Transparent +distort Polar 149 +repage \
    -rotate 90 -set colorspace HSB -colorspace RGB \
    gradient_hue_polar-transparent.png
&lt;img src=&#34;../gradient_hue_polar-transparent.png&#34; /&gt;
&lt;/pre&gt;

&lt;h3 id=&#34;変換の準備-1&#34;&gt;変換の準備&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RGBA4444 パレット作成
&lt;pre&gt;
$ convert -size 256x256 tile:black-red-green-blue.png &lt;br /&gt;
-matte -channel a -fx &amp;ldquo;u*floor(j/16)/h*17.1&amp;rdquo; &lt;br /&gt;
black-red-green-blue-transparent.png
&lt;img src=&#34;../black-red-green-blue-transparent.png&#34; /&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;実行コマンド-1&#34;&gt;実行コマンド&lt;/h3&gt;

&lt;pre&gt;
$ convert gradient_hue_polar-transparent.png \
    -dither Riemersma -remap black-red-green-blue-transparent.png \
    rgba4444.png
&lt;img src=&#34;../rgba4444.png&#34; /&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;課題&#34;&gt;課題&lt;/h2&gt;

&lt;p&gt;Unity でゲームを作る時のキャラ画像は輪郭の周りを透明にしたいでしょうから、RGBA4444 に対応しないと残念ながら実用的では無さそうです。
ImageMagick は透明度つき減色が苦手ですが、ここまで酷いのは何か理由がありそうなので、もう少し調べてみます。&lt;/p&gt;

&lt;h2 id=&#34;参考-url&#34;&gt;参考 URL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webtech.co.jp/blog/game-develop/unity/2562/&#34;&gt;http://www.webtech.co.jp/blog/game-develop/unity/2562/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/Usage/canvas/#gradient_colorspace&#34;&gt;http://www.imagemagick.org/Usage/canvas/#gradient_colorspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;注釈&#34;&gt;注釈&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;compose と tile を組み合わせて、&amp;rdquo;composite -size 256x16 -compose plus  black-blue.png tile:black-red-green.png output.png&amp;rdquo; を実行したらゴミが入りました。&lt;img src=&#34;../compose_and_tile.png&#34; /&gt; 多分バグです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JPEG のクロマサブサンプリングと YUVabc</title>
      <link>https://blog.awm.jp/2016/02/10/yuv/</link>
      <pubDate>Wed, 10 Feb 2016 21:53:44 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/02/10/yuv/</guid>
      <description>

&lt;h1 id=&#34;jpeg-のクロマサブサンプリングと-yuvabc&#34;&gt;JPEG のクロマサブサンプリングと YUVabc&lt;/h1&gt;

&lt;p&gt;YCbCr については以下のページで紹介しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JPEG の YCbCr について

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.awm.jp/2016/02/06/ycbcr/&#34;&gt;https://blog.awm.jp/2016/02/06/ycbcr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YCbCr のメリットとして説明したクロマサブサンプリングの種類についてまとめます。&lt;/p&gt;

&lt;p&gt;JPEG が本エントリの主眼なので YUV の U を Cb、V を Cr に当てはめて解説します。YUV と YCbCr は計算式が違いますが、サブサンプリングの記法としては同じものが使われます。&lt;/p&gt;

&lt;h1 id=&#34;はじめに早見表&#34;&gt;はじめに早見表&lt;/h1&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuvyab.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;※ YUV410 だけ変則的です&lt;/p&gt;

&lt;h2 id=&#34;imagemagick-での作り方&#34;&gt;ImageMagick での作り方&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ convert orig.jpg -sampling-factor &amp;quot;1x1,1x1,1x1&amp;quot; yuv444.jpg
$ convert orig.jpg -sampling-factor &amp;quot;2x1,1x1,1x1&amp;quot; yuv422.jpg
$ convert orig.jpg -sampling-factor &amp;quot;4x1,1x1,1x1&amp;quot; yuv411.jpg
$ convert orig.jpg -sampling-factor &amp;quot;1x2,1x1,1x1&amp;quot; yuv440.jpg
$ convert orig.jpg -sampling-factor &amp;quot;2x2,1x1,1x1&amp;quot; yuv420.jpg
$ convert orig.jpg -sampling-factor &amp;quot;4x4,1x1,1x1&amp;quot; yuv410.jpg # yuv9
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;yuvabc-の種類&#34;&gt;YUVabc の種類&lt;/h1&gt;

&lt;p&gt;よく見る表現として、YUV444 、YUV422 の２つがあります。&lt;/p&gt;

&lt;h2 id=&#34;yuv444-の-y-cb-cr-の並び&#34;&gt;YUV444 の Y,Cb,Cr の並び&lt;/h2&gt;

&lt;p&gt;YUVabc と見立てると a, b, c の番号は以下のように対応します。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv444.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;yuv422-の-y-cb-cr-の並び&#34;&gt;YUV422 の Y,Cb,Cr の並び&lt;/h2&gt;

&lt;p&gt;YUV422 の場合は Y に対して Cb, Cr を半分に間引きます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv422-onaji.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;間引く分の偶数番目の Cb, Cr はデータから省略できます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv422.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;色々な-yuvabc&#34;&gt;色々な YUVabc&lt;/h1&gt;

&lt;p&gt;実際に表記を見たことのある YUVabc を列挙します。(他に実例あればご指摘下さい)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV444 (再掲) : 間引かない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv444.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV422 (再掲) : 横方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 間引く。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv422.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV440 : 縦方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 間引く。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv440.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV420 : 横方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 、縦方向も &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 間引く。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv420.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV411 : 横方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; になるよう間引く。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv411.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV410 : 横方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; 、縦方向は &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 間引く。(？)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv410.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;と言いたい所ですが、実際には 4x4 として使われるようです。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv410-4x4.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;YUVabc は横4pixel縦2pixel で考えて以下のようなパラメータ

&lt;ul&gt;
&lt;li&gt;a は Y の横方向サンプル数で4固定&lt;/li&gt;
&lt;li&gt;b は横方向の間引き。Cb,Cr の横方向サンプル数で 4, 2, 1 のいずれか&lt;/li&gt;
&lt;li&gt;c は縦方向の間引き。次の行の Cb,Cr の横方向サンプル数で b と同じか 0 のどちらか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;YUV444 は全ピクセル Y,Cb,Cr をセットで持つ。画質を落としたくない場合はこれ&lt;/li&gt;
&lt;li&gt;YUV422 は Cb,Cr を横方向で &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; で間引く。JPEG や動画でよく使われる&lt;/li&gt;
&lt;li&gt;YUV410 は abc の法則から例外&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Chroma_subsampling&#34;&gt;https://en.wikipedia.org/wiki/Chroma_subsampling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome subsampling notation

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.poynton.com/PDFs/Chroma_subsampling_notation.pdf&#34;&gt;http://www.poynton.com/PDFs/Chroma_subsampling_notation.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;YUVのサンプリング種類

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.yahoo.co.jp/linear_pcm0153/24210613.html&#34;&gt;http://blogs.yahoo.co.jp/linear_pcm0153/24210613.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Digital Color Coding

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.telairity.com/assets/downloads/Digital%20Color%20Coding.pdf&#34;&gt;http://www.telairity.com/assets/downloads/Digital%20Color%20Coding.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JPEG の YCbCr について</title>
      <link>https://blog.awm.jp/2016/02/06/ycbcr/</link>
      <pubDate>Sat, 06 Feb 2016 15:58:53 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/02/06/ycbcr/</guid>
      <description>

&lt;h1 id=&#34;jpeg-の-ycbcr-について&#34;&gt;JPEG の YCbCr について&lt;/h1&gt;

&lt;p&gt;JPEG で保存する色は RGB でなく YCbCr なので、その話。&lt;/p&gt;

&lt;h1 id=&#34;rgb-ycbcr&#34;&gt;RGB &amp;lt;=&amp;gt; YCbCr&lt;/h1&gt;

&lt;p&gt;RGB は Red(赤)、Green(緑)、Blue(青)の加色混合で色を表現する方式ですが、JPEG は YCbCr で色を保存します。Y (輝度)、Cb(青の色差)、Cr(赤の色差)です。&lt;/p&gt;

&lt;p&gt;Y は色空間の CIE-XYZ で輝度に対応する Y 軸。Cb は Chroma(色度) の Blue, Cr は Red です。&lt;/p&gt;

&lt;p&gt;大雑把にはこんなイメージ。
&lt;center&gt; &lt;img src=&#34;../ycbcrvolume.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スライダーで色を調整するデモを作りました。お試し下さい。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/color/ycbcrslider.html&#34;&gt;http://blog.awm.jp/color/ycbcrslider.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;変換式&#34;&gt;変換式&lt;/h2&gt;

&lt;h3 id=&#34;rgb-ycbcr-1&#34;&gt;RGB =&amp;gt; YCbCr&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;輝度信号&lt;/td&gt;
&lt;td&gt;0.299  * R + 0.587  * G + 0.114  * B&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cb&lt;/td&gt;
&lt;td&gt;青の色差 &lt;br&gt; (B&amp;rsquo;-Y)&lt;/td&gt;
&lt;td&gt;-0.1687 * R - 0.3313 * G + 0.5    * B + 128&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cr&lt;/td&gt;
&lt;td&gt;赤の色差 &lt;br&gt; (R&amp;rsquo;-Y)&lt;/td&gt;
&lt;td&gt;0.5    * R - 0.4187 * G - 0.0813 * B + 128&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;ycbcr-rgb&#34;&gt;YCbCr =&amp;gt; RGB&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;赤 &lt;br&gt; (Y       + Cr&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;Y                        + 1.402   * (Cr - 128)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;緑 &lt;br&gt; (Y - Cb&amp;rsquo; - Cr&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;Y - 0.34414 * (Cb - 128) - 0.71414 * (Cr - 128)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;青 &lt;br&gt; (Y + Cb&amp;rsquo;      )&lt;/td&gt;
&lt;td&gt;Y + 1.772   * (Cb - 128)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;rgb-との比較&#34;&gt;RGB との比較&lt;/h2&gt;

&lt;h3 id=&#34;rgb-チャネル分解&#34;&gt;RGB チャネル分解&lt;/h3&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../logo.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert logo.png -colorspace RGB -separate +append tmp.png
$ convert logo.png +level-colors Red \
	\( +clone +level-colors Green1 \) \
	\( +clone +level-colors Blue \) +append \
	tmp.png -compose Multiply -composite  logo_rgb.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注) Green1 を Green にすると緑の明るさが半分になるので注意
&lt;center&gt; &lt;img src=&#34;../logo_rgb.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;ycbcr-チャネル分解&#34;&gt;YCbCr チャネル分解&lt;/h3&gt;

&lt;p&gt;こちらは Golang の image パッケージで変換。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/yoya/4fae336a34a8a5bf5d9c&#34;&gt;https://gist.github.com/yoya/4fae336a34a8a5bf5d9c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ go build png_separate_ycbcr.go
$ ./png_separate_ycbcr logo.png logo_ycbcr.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../logo_ycbcr.png&#34; /&gt; &lt;/center&gt;
(YCbCr の残りパラメータを128固定にして擬似的に負の値を表現)&lt;/p&gt;

&lt;h2 id=&#34;メリット&#34;&gt;メリット&lt;/h2&gt;

&lt;p&gt;輝度信号と色差信号を分けるメリットですが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;白黒テレビの信号に後付けで色味を追加できる&lt;/li&gt;
&lt;li&gt;人の目は輝度(色の明るさ)に敏感、色味には鈍感&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JPEG や多くの動画形式では Y はそのままで Cb, Cr のサンプルを間引く、クロマサブサンプリング方式でデータ量を節約します。尚、多くの動画形式は YCbCr でなく YUV で少し計算が異なります、概念的には似たものです。&lt;/p&gt;

&lt;h3 id=&#34;クロマサブサンプリング&#34;&gt;クロマサブサンプリング&lt;/h3&gt;

&lt;h3 id=&#34;yuvabc&#34;&gt;YUVabc&lt;/h3&gt;

&lt;p&gt;間引きかたによって YUV444、YUV422 のように表現します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;YUV444
&lt;center&gt; &lt;img src=&#34;../yuv444.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YUV422
&lt;center&gt; &lt;img src=&#34;../yuv422.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;より詳しくは以下のエントリをご参考ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JPEG のクロマサブサンプリングと YUVabc について

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/02/10/yuv/&#34;&gt;http://blog.awm.jp/2016/02/10/yuv/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デメリット&#34;&gt;デメリット&lt;/h2&gt;

&lt;p&gt;RGB と YCbCr は色空間が斜めの関係にあり、YCbCr は RGB を全部カバーする為、同じ 0-255 でも RGB より YCbCr の方が大きなスケールを表現します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;大きな立体が YCbCr の空間で、中の小さい立体が RGB の収まる範囲です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../rgb2ycbcr_half.png&#34; /&gt; &lt;/center&gt; (&lt;a href=&#34;../RGB2YCbCr.gcx&#34;&gt; Grapher ファイル&lt;/a&gt; | &lt;a href=&#34;../makeVert.phps&#34;&gt; プロット生成スクリプト  &lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(奥行きが分かりにくいのですが頂点の丸が大きい方が手前です。後で改善します)&lt;/p&gt;

&lt;p&gt;大小２つの立方体の間にある隙間が RGB&amp;lt;=&amp;gt;YCbCr で死ぬ無駄な空間で、YCbCr のビット数を RGB と同じにすると粒度が荒くなり表現できる色数が減ります。色数が1/4ほどまで減るとも言われます。&lt;/p&gt;

&lt;p&gt;詳しくは以下のページを参照下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ConvertToRGB

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://csbarn.blogspot.jp/2012/01/converttorgb.html&#34;&gt;http://csbarn.blogspot.jp/2012/01/converttorgb.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;メリットとして色成分だけ間引く事で見た目をあまり変えずにデータを少なく出来る。&lt;/li&gt;
&lt;li&gt;デメリットとして 8bit depth のはずが実際には約 7bit depth 分しかない。(ちなみに人間の目は 10bit まで識別可能)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考ページ&#34;&gt;参考ページ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;JPEG File Interchange Format

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/Graphics/JPEG/jfif3.pdf&#34;&gt;https://www.w3.org/Graphics/JPEG/jfif3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RGB⇔YCbCr変換

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://koujinz.cocolog-nifty.com/blog/2009/03/rgbycbcr-a4a5.html&#34;&gt;http://koujinz.cocolog-nifty.com/blog/2009/03/rgbycbcr-a4a5.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;XYZ表色系

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dic-color.com/knowledge/xyz.html&#34;&gt;http://www.dic-color.com/knowledge/xyz.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ImageMagickでHSLとHSV色空間を理解する

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://smash.nobuto-murata.org/2009/12/imagemagickhslhsv.html&#34;&gt;http://smash.nobuto-murata.org/2009/12/imagemagickhslhsv.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>