<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jpeg on awm-Tech</title>
    <link>https://blog.awm.jp/tags/jpeg/index.xml</link>
    <description>Recent content in Jpeg on awm-Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; awm.jp</copyright>
    <atom:link href="https://blog.awm.jp/tags/jpeg/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Guetzli - Perceptual JPEG encoder (english)</title>
      <link>https://blog.awm.jp/2017/03/21/guetzli/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.awm.jp/2017/03/21/guetzli/</guid>
      <description>

&lt;h1 id=&#34;official-information&#34;&gt;Official information&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/guetzli&#34;&gt;https://github.com/google/guetzli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Announcing Guetzli: A New Open Source JPEG Encoder

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html&#34;&gt;https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Guetzli: Perceptually Guided JPEG Encoder

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1703.04421v1&#34;&gt;https://arxiv.org/abs/1703.04421v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Users prefer Guetzli JPEG over same-sized libjpeg

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1703.04416v1&#34;&gt;https://arxiv.org/abs/1703.04416v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Guetzli is a chicken race technology that degrades JPEG image data until it is unlikely that people will perceive perceptually.&lt;/li&gt;
&lt;li&gt;Butteraugli is used for the evaluation instead of human eyes. Although it often sees MSE, PNSR, SSIM in the paper of image processing, these are pretty good estimates, Butteraugli has human visual characteristics (for example, luminance and color tone are different indicators, color tone is the color difference axis of opposite color theory).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;../opponent-color.jpg&#34; /&gt; &lt;br /&gt;
&amp;copy; &lt;a href=&#34;http://ieeexplore.ieee.org/ieee_pilot/articles/06/ttg2009061291/article.html&#34;&gt;http://ieeexplore.ieee.org/ieee_pilot/articles/06/ttg2009061291/article.html&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is common to change the JPEG quality to find trade-offs between image size and image quality, but it seems like a fully automatic version of it. In addition, it fine tuning DQT (quantization parameter for each frequency component).&lt;/li&gt;
&lt;li&gt;It is a method of generating JPEG repeatedly and repeatedly so as to hit a good result, so it takes very long time anyway. I can not supersede libjpeg or mozjpeg. We can reduce image size effective for important images with a lot of access. Usage like zopflipng looks good.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;spec-limitetions&#34;&gt;Spec limitetions&lt;/h1&gt;

&lt;p&gt;It is a limitation noticed by reading the source. (I want you to write it in README.)&lt;/p&gt;

&lt;h2 id=&#34;quality-84&#34;&gt;quality &amp;gt;= 84&lt;/h2&gt;

&lt;p&gt;You can only specify quality of 84 or higher. If it is less than that, it seems to be visible and deteriorate. (By the way, the default is 95)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;guetzli/processor.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessJpegData(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg_in,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;comparator,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GuetzliOutput&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessStats&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stats)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;(omit...)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(params.butteraugli_target&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2.0f&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Guetzli should be called with quality &amp;gt;= 84, otherwise the&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;output will have noticeable artifacts. If you want to&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proceed anyway, please edit the source code.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;false;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cmyk-not-supported&#34;&gt;CMYK not supported&lt;/h2&gt;

&lt;p&gt;Only YCbCr JPEG is supported. CMYK and (Adobe) CYYK are not supported yet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ref) &lt;a href=&#34;https://blog.awm.jp/2016/02/06/ycbcr/&#34;&gt;https://blog.awm.jp/2016/02/06/ycbcr/&lt;/a&gt; about YCbCr (japanese text)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;guetzli/processor.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessJpegData(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg_in,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;comparator,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GuetzliOutput&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessStats&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stats)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;(omit...)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(jpg_in.components.size()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;HasYCbCrColorSpace(jpg_in))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Only YUV color space input jpeg is supported&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;false;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;yuv-444-420-only&#34;&gt;YUV 444,420 only&lt;/h2&gt;

&lt;p&gt;Only YUV 444, 420 correspond. 422, 411, 440 are not supported.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ref) &lt;a href=&#34;https://blog.awm.jp/2016/02/10/yuv/&#34;&gt;https://blog.awm.jp/2016/02/10/yuv/&lt;/a&gt; YUV notations (japanese text)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;guetzli/processor.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessJpegData(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg_in,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;comparator,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GuetzliOutput&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessStats&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stats)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;(omit...)&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(jpg_in.Is444())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_is_420&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;false;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(jpg_in.Is420())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_is_420&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unsupported sampling factors:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well. The JPEG of YUV 422 is supposed to be full of world, but is it all right? It seems to be much more than 420 something.
It seems to be 422 if it is an ordinary image quality setting with a digital camera.
(I am not interested only because I am interested only in high picture quality)&lt;/p&gt;

&lt;h2 id=&#34;rumor-icc-profile&#34;&gt;Rumor (ICC profile)&lt;/h2&gt;

&lt;p&gt;There is a rumor that it does not inherit the ICC profile, but as long as I tried it I will take over properly.
Even if you look at the source code there is a process of copying APPn in its entirety.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;guetzli/jpeg_data_reader.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// Saves the APP marker segment as a string to *jpg.&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ProcessAPP&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pos,&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;VERIFY_LEN(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ReadUint16(data,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pos);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;VERIFY_INPUT(marker_len,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;65535&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MARKER_LEN);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;VERIFY_LEN(marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// Save the marker type together with the app data.&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;app_str(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;data[&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;app_data.push_back(app_str);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;(omit...)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ReadJpeg(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JpegReadMode&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mode,&lt;/span&gt;
              &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;(omit...)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe6&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe7&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe8&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xea&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xeb&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xed&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xee&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xef&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(mode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEG_READ_TABLES)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessAPP(data,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pos,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;guetzli/jpeg_data_writer.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;EncodeMetadata&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strip_metadata,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGOutput&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(strip_metadata)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg.app_data.size();&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGWrite(out,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(data));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGWrite(out,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg.app_data[i]);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can anyone have a JPEG file that does not inherit Exif or ICC profiles? (I&amp;rsquo;d like to make a bufix commit and get into my contributor!)&lt;/p&gt;

&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;If you use macOS, you can enter brew install guetzli, but it is a note of how to use the git repository.&lt;/p&gt;

&lt;p&gt;Just get the package of libpng (libpng - dev) and gflags (libgflags - dev) and make it. It worked on macOS Sierra and Linux Ubuntu 16.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% git clone git@github.com:google/guetzli.git
% cd guetzli
% make
==== Building guetzli (release) ====
Creating bin/Release
Creating obj/Release
(omit...)
butteraugli.cc
Linking guetzli
ld: warning: option -s is obsolete and being ignored
% ls -l bin/Release/guetzli
-rwxr-xr-x  1 yoya  staff  280856  3 17 17:34 bin/Release/guetzli
% 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;experiment&#34;&gt;Experiment&lt;/h1&gt;

&lt;p&gt;I measured Guesszli with 1406 2D-illustration images of various sizes and measured it. Several sheets seem to be caught in the restriction matter, and 1360 sheets could actually be processed.&lt;/p&gt;

&lt;h2 id=&#34;execution&#34;&gt;Execution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;% ls illust | wc
   1406    1406   26445
% mkdir tmp
% cd illust
% (for i in *.jpg ; do o=&amp;quot;../tmp/$i&amp;quot; ; identify $i ; time guetzli $i $o ; identify $o ; done &amp;gt;&amp;amp; ../log.txt )
% ls -l ../tmp | wc
   1360   12233   86837
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Log data (a part)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;3b689cd9.jpg JPEG 500x375 500x375+0+0 8-bit sRGB 59.4KB 0.000u 0:00.000

real	0m7.194s
user	0m6.976s
sys	0m0.212s
../tmp/3b689cd9.jpg JPEG 500x375 500x375+0+0 8-bit sRGB 56KB 0.000u 0:00.000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;summarize-script&#34;&gt;Summarize script&lt;/h2&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filesizeUnit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($filesize,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// to KB&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;KB&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;MB&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;GB&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ERROR: $filesize, $unit\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(file($argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(preg_match(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^([^\/]+.jpg) JPEG (\d+)x(\d+) \S+ \S+ \S+ ([0-9\.]+)(.B)/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($all,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$file,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$nPixel&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$width&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$height;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sqrt($nPixel);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filesizeUnit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($filesize,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(preg_match(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^user\s+(\d+)m([\d\.]+)s/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($all,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$minutes,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$seconds)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$minutes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$seconds;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0.01&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;// echo &amp;quot;ERROR: $size $t\n&amp;quot;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;//  echo &amp;quot;$size,$t\n&amp;quot;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(preg_match(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^\.\.\/tmp\/([^\/]+.jpg) JPEG (\d+)x(\d+) \S+ \S+ \S+ ([0-9\.]+)(.B)/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($all,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$file,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize2,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filesizeUnit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($filesize2,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;$filesize,$filesize2\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
          &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize2)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
               &lt;span style=&#34;color: #66d9ef&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;graph-of-summary-result&#34;&gt;Graph of summary result&lt;/h2&gt;

&lt;h3 id=&#34;processing-time&#34;&gt;Processing time&lt;/h3&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../time-graph-small.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Horizontal is sqrt (width * height). Equivalent to the length of one side assuming a square shape&lt;/li&gt;
&lt;li&gt;Number of seconds in portrait in user time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is likely that it will be a little less than 100 seconds and 200 seconds at a side 2000 px.&lt;/p&gt;

&lt;p&gt;By the way, I am experimenting with a high-performance game PC.&lt;/p&gt;

&lt;h3 id=&#34;file-size-reduction&#34;&gt;File size reduction&lt;/h3&gt;

&lt;p&gt;The horizontal axis is the original size, and the vertical axis is the size after compression. Both are in KB units.&lt;/p&gt;

&lt;p&gt;It is a reduction rate at an unusual level higher than expected. It may even be less than half.&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../filesize-graph-small.png&#34; /&gt; &lt;/center&gt;
(Places where pink lines do not change in size.Yellow is a place where size is halved)&lt;/p&gt;

&lt;p&gt;Even if I visually checked the image with a large reduction rate, I did not know the difference at first glance. great. .&lt;/p&gt;

&lt;h1 id=&#34;impression&#34;&gt;Impression&lt;/h1&gt;

&lt;p&gt;In the illustration image, when considering the line (frequency high) and the gradation (frequency low) are the lives, the mid range of the frequency seems to be rough and good, maybe it is easy to cut off other than visual characteristics.&lt;/p&gt;

&lt;p&gt;Processing with Guetzli will degrade the data, so it may be visible, for example, when stretching the image or filtering the image. When setting a threshold in the image quality evaluation, it is inevitable that the viewing environment model such as the DPI of the monitor, the viewing distance, and the colorimetric standard to be adopted is on the premise, and it is inevitable that roughness can be seen when the situation is substantially deviated from that .&lt;/p&gt;

&lt;p&gt;The comparison with MozJPEG seems to make no sense even if it is summarized because the ring is different in the first place.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guetzli - Perceptual JPEG encoder</title>
      <link>https://blog.awm.jp/2017/03/17/guetzli/</link>
      <pubDate>Fri, 17 Mar 2017 17:34:14 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2017/03/17/guetzli/</guid>
      <description>

&lt;h1 id=&#34;公式情報&#34;&gt;公式情報&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/guetzli&#34;&gt;https://github.com/google/guetzli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Announcing Guetzli: A New Open Source JPEG Encoder

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html&#34;&gt;https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Guetzli: Perceptually Guided JPEG Encoder

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1703.04421v1&#34;&gt;https://arxiv.org/abs/1703.04421v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Users prefer Guetzli JPEG over same-sized libjpeg

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1703.04416v1&#34;&gt;https://arxiv.org/abs/1703.04416v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Guetzli は知覚的(Perceptual)に人間が見ても分からないだろうギリギリまで JPEG 画像を劣化させるチキンレース技術です。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;人間が見ても。という評価には Butteraugli を用います。 画像処理の論文では MSE, PNSR, SSIM をよく見かけますが結構これらは雑な評価で、Butteraugli は人間の視覚特性(例えば輝度と色味は別指標、色味も反対色説の色差軸)を元に計算します。
&lt;center&gt;
&lt;img src=&#34;../opponent-color.jpg&#34; /&gt; &lt;br /&gt;
&amp;copy; &lt;a href=&#34;http://ieeexplore.ieee.org/ieee_pilot/articles/06/ttg2009061291/article.html&#34;&gt;http://ieeexplore.ieee.org/ieee_pilot/articles/06/ttg2009061291/article.html&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JPEG quality を色々変えて画像サイズと画質のトレードオフを探る事はよくありますが、それの全自動版みたいな感じです。更に DQT (周波数成分毎の量子化パラメータ) を細かくいじります。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;良い結果に当たるよう何度も繰り返し JPEG 生成する方式なので、とにかく時間がかかります。libjpeg や mozjpeg の代わりという訳にはいきません。アクセスが特別多い重要な画像に対してサイズを少しでも減らしたい。zopflipng のような使い方が良さそうです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;制限事項&#34;&gt;制限事項&lt;/h1&gt;

&lt;p&gt;ソースを読んで気づいた制限事項です。(README に記述して欲しいなぁ。)&lt;/p&gt;

&lt;h2 id=&#34;quality-84&#34;&gt;quality &amp;gt;= 84&lt;/h2&gt;

&lt;p&gt;quality は 84 以上しか指定できません。それ未満だと目に見えて劣化するそうです。 (ちなみにデフォルトは 95)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;guetzli/processor.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessJpegData(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg_in,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;comparator,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GuetzliOutput&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessStats&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stats)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(params.butteraugli_target&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2.0f&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Guetzli should be called with quality &amp;gt;= 84, otherwise the&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;output will have noticeable artifacts. If you want to&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proceed anyway, please edit the source code.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;false;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cmyk-未対応&#34;&gt;CMYK 未対応&lt;/h2&gt;

&lt;p&gt;YCbCr JPEG のみ対応です。CMYK や (Adobe)CYYK は未対応。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参考) &lt;a href=&#34;https://blog.awm.jp/2016/02/06/ycbcr/&#34;&gt;https://blog.awm.jp/2016/02/06/ycbcr/&lt;/a&gt; YCbCr について&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;guetzli/processor.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessJpegData(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg_in,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;comparator,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GuetzliOutput&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessStats&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stats)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(jpg_in.components.size()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;HasYCbCrColorSpace(jpg_in))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Only YUV color space input jpeg is supported&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;false;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;yuv-444-420-only&#34;&gt;YUV 444,420 only&lt;/h2&gt;

&lt;p&gt;YUV444, 420 のみ対応。422,411,440 は未対応。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参考) &lt;a href=&#34;https://blog.awm.jp/2016/02/10/yuv/&#34;&gt;https://blog.awm.jp/2016/02/10/yuv/&lt;/a&gt; YUV の種類&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;guetzli/processor.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessJpegData(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg_in,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;comparator,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GuetzliOutput&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessStats&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stats)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(jpg_in.Is444())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_is_420&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;false;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(jpg_in.Is420())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_is_420&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unsupported sampling factors:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うーん。YUV422 の JPEG は世に溢れてるはずだけど、大丈夫なのでしょうか。420 なんかよりずっと多そうだけど。デジカメで普通の画質設定だと 422 になりそうですし。(自分は高画質しか興味ないので、よく分からない)&lt;/p&gt;

&lt;h2 id=&#34;噂話-icc-プロファイル&#34;&gt;噂話 (ICC プロファイル)&lt;/h2&gt;

&lt;p&gt;あと、ICC プロファイルを引き継がないという噂がありますが、自分が試した限りではちゃんと引き継ぎます。ソースコードを見ても APPn を 丸々コピーする処理があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;guetzli/jpeg_data_reader.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// Saves the APP marker segment as a string to *jpg.&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ProcessAPP&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pos,&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;VERIFY_LEN(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ReadUint16(data,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pos);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;VERIFY_INPUT(marker_len,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;65535&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MARKER_LEN);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;VERIFY_LEN(marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// Save the marker type together with the app data.&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;app_str(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;data[&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;app_data.push_back(app_str);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ReadJpeg(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JpegReadMode&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mode,&lt;/span&gt;
              &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
 &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe6&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe7&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe8&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xea&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xeb&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xed&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xee&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xef&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(mode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEG_READ_TABLES)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessAPP(data,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pos,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;guetzli/jpeg_data_writer.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;EncodeMetadata&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strip_metadata,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGOutput&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(strip_metadata)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg.app_data.size();&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGWrite(out,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(data));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGWrite(out,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg.app_data[i]);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どなたか Exif や ICC プロファイルを引き継がない JPEG ファイルをお持ちでしたら頂けないでしょうか。(修正コミットしてコントリビュータに紛れ込みたい！)&lt;/p&gt;

&lt;h1 id=&#34;インストール&#34;&gt;インストール&lt;/h1&gt;

&lt;p&gt;macOS だと brew install guetzli で入りますが、一応 git レポジトリを使う方法のメモです。&lt;/p&gt;

&lt;p&gt;libpng(libpng-dev) と gflags (libgflags-dev) のパッケージを入れて make するだけです。macOS Sierra と Linux Ubuntu16 で動作しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% git clone git@github.com:google/guetzli.git
% cd guetzli
% make
==== Building guetzli (release) ====
Creating bin/Release
Creating obj/Release
＜略＞
butteraugli.cc
Linking guetzli
ld: warning: option -s is obsolete and being ignored
% ls -l bin/Release/guetzli
-rwxr-xr-x  1 yoya  staff  280856  3 17 17:34 bin/Release/guetzli
% 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;実験&#34;&gt;実験&lt;/h1&gt;

&lt;p&gt;様々なサイズの2Dイラスト画像1406枚で Guetzli を動かして計測しました。
何枚かは制限事項に引っかかるようで、実際に処理できたのは 1360枚です。&lt;/p&gt;

&lt;h2 id=&#34;実行&#34;&gt;実行&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;% ls illust | wc
   1406    1406   26445
% mkdir tmp
% cd illust
% (for i in *.jpg ; do o=&amp;quot;../tmp/$i&amp;quot; ; identify $i ; time guetzli $i $o ; identify $o ; done &amp;gt;&amp;amp; ../log.txt )
% ls -l ../tmp | wc
   1360   12233   86837
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ログデータ(の一部)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;3b689cd9.jpg JPEG 500x375 500x375+0+0 8-bit sRGB 59.4KB 0.000u 0:00.000

real	0m7.194s
user	0m6.976s
sys	0m0.212s
../tmp/3b689cd9.jpg JPEG 500x375 500x375+0+0 8-bit sRGB 56KB 0.000u 0:00.000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;集計スクリプト&#34;&gt;集計スクリプト&lt;/h2&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filesizeUnit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($filesize,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// to KB&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;KB&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;MB&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;GB&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ERROR: $filesize, $unit\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(file($argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(preg_match(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^([^\/]+.jpg) JPEG (\d+)x(\d+) \S+ \S+ \S+ ([0-9\.]+)(.B)/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($all,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$file,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$nPixel&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$width&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$height;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sqrt($nPixel);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filesizeUnit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($filesize,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(preg_match(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^user\s+(\d+)m([\d\.]+)s/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($all,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$minutes,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$seconds)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$minutes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$seconds;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0.01&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;// echo &amp;quot;ERROR: $size $t\n&amp;quot;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;//  echo &amp;quot;$size,$t\n&amp;quot;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(preg_match(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^\.\.\/tmp\/([^\/]+.jpg) JPEG (\d+)x(\d+) \S+ \S+ \S+ ([0-9\.]+)(.B)/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($all,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$file,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize2,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$matches;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filesizeUnit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($filesize2,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;$filesize,$filesize2\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
          &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize2)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
               &lt;span style=&#34;color: #66d9ef&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;集計結果のグラフ&#34;&gt;集計結果のグラフ&lt;/h2&gt;

&lt;h3 id=&#34;処理時間&#34;&gt;処理時間&lt;/h3&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../time-graph-small.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;横がsqrt(width*height) 。正方形と仮定した場合の一辺の長さ相当&lt;/li&gt;
&lt;li&gt;縦が user 時間の秒数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一辺2000px で100秒弱〜200秒が目安になりそうです。&lt;/p&gt;

&lt;p&gt;ちなみにそこそこ高性能なゲームPCで実験してます。&lt;/p&gt;

&lt;h3 id=&#34;ファイルサイズ削減&#34;&gt;ファイルサイズ削減&lt;/h3&gt;

&lt;p&gt;横軸が元サイズ、縦軸が圧縮後のサイズです。どちらも KB 単位。&lt;/p&gt;

&lt;p&gt;期待以上の異常なレベルでの削減率です。半分以下になることさえあります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../filesize-graph-small.png&#34; /&gt; &lt;/center&gt;
(ピンクの線がサイズが変わらない場所。黄色はサイズが半分になる場所です)&lt;/p&gt;

&lt;p&gt;削減率の多い画像を目視で確認しても、ぱっと見で違いは分かりませんでした。凄い。。&lt;/p&gt;

&lt;h1 id=&#34;所感&#34;&gt;所感&lt;/h1&gt;

&lt;p&gt;イラスト画像は線(周波数高)とグラデーション(周波数低)が命だと考えると周波数の中域は荒くて良さそうで、視覚特性以外でも削り易いかもしれません。&lt;/p&gt;

&lt;p&gt;Guetzli で処理するとデータの劣化はするので、例えば画像を引き伸ばした時や画像にフィルタをかけた時に、違いが目に見える可能性があります。画質評価で閾値を立てる場合、そこにはモニタのDPI、視距離、採用する測色標準といった視聴環境モデルが前提にあるはずで、実質的にそことずれる状況になると荒が見えるのは必然です。&lt;/p&gt;

&lt;p&gt;MozJPEG との比較は、そもそも土俵が違うのでまとめても意味なさそうかな。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TIFF と Exif と JPEG</title>
      <link>https://blog.awm.jp/2016/11/06/tiff/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/06/tiff/</guid>
      <description>

&lt;h1 id=&#34;jpeg-と-exif-と-tiff-の関係&#34;&gt;JPEG と Exif と TIFF の関係&lt;/h1&gt;

&lt;p&gt;TIFF は独立した画像フォーマットの一種ですが、メタ構造をタグで扱う形式の使い勝手が良い為か、JPEG の Exif も TIFF フォーマットをそのまま使っています。&lt;/p&gt;

&lt;p&gt;だいたい以下のような関係です。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure01.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;昨日作った IO_TIFF ライブラリは、JPEG, Exif, TIFF のいずれのファイルを渡されても、TIFF の部分だけ参照してダンプします。&lt;/p&gt;

&lt;h1 id=&#34;実装&#34;&gt;実装&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/IO_TIFF&#34;&gt;https://github.com/yoya/IO_TIFF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IO/TIFF.php の parse function の先頭です。&lt;/p&gt;

&lt;h2 id=&#34;tiff-をとりこむ&#34;&gt;TIFF をとりこむ&lt;/h2&gt;

&lt;p&gt;TIFF ファイルが渡された場合はそのまま取り込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($head2 === &amp;quot;II&amp;quot; || $head2 === &amp;quot;MM&amp;quot;) { // TIFF format
    $bit-&amp;gt;input($tiffData);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exif-を取り込む&#34;&gt;Exif を取り込む&lt;/h2&gt;

&lt;p&gt;Exit ファイルが渡された場合は、先頭6バイトを読み飛ばします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;} else if ($head6 === &amp;quot;Exif\0\0&amp;quot;) { // Exif format
    $bit-&amp;gt;input(substr($tiffData, 6));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jepg-を取り込む&#34;&gt;JEPG を取り込む&lt;/h2&gt;

&lt;p&gt;これは少し厄介です。JPEG の Chunk を APP1 が出るまで読み飛ばし、APP1 の先頭を削って Exif 内の TIFF 形式の場所を抜き出します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;} else if ($head2 === &amp;quot;\xff\xd8&amp;quot;) { // JPEG format
    $jpegBit = new IO_Bit();
    $jpegBit-&amp;gt;input($tiffData);
    $jpegBit-&amp;gt;setOffset(2, 0); // skip SOI
    $found = false;
    while ($jpegBit-&amp;gt;getUI8() == 0xff) { // chunk marker
        $marker2 = $jpegBit-&amp;gt;getUI8();
        $len = $jpegBit-&amp;gt;getUI16BE();
        if ($marker2 === 0xe1) { // APP1
            if ($jpegBit-&amp;gt;getData(6) === &amp;quot;Exif\0\0&amp;quot;) {
                $found = true;
                break;
            }
        }
        $jpegBit-&amp;gt;incrementOffset($len - 2, 0);
    }
    list($offset, $dummy) = $jpegBit-&amp;gt;getOffset();
    if ($found === false) {
        throw new Exception(&amp;quot;Wrong JPEG format. offset: $offset&amp;quot;);
    }
    $bit-&amp;gt;input(substr($tiffData, $offset));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁ、でもバイナリのコンテナ分解に慣れると一瞬でかける処理です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DNG から ICC プロファイル付き JPEG 画像を作る</title>
      <link>https://blog.awm.jp/2016/11/02/dng/</link>
      <pubDate>Wed, 02 Nov 2016 21:09:00 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/02/dng/</guid>
      <description>

&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;h2 id=&#34;利用するもの&#34;&gt;利用するもの&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PC (MacBook Pro)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のどちらか&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adobe Lightroom CC&lt;/li&gt;
&lt;li&gt;Adobe Photoshop CC&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dng-画像の入手法&#34;&gt;DNG 画像の入手法&lt;/h2&gt;

&lt;p&gt;iPhone7 Plus から DNG 画像を取り出す方法はこちらにまとめました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone7 Plus で撮影した DNG 画像を PC に取り出す方法

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/11/01/dng/&#34;&gt;http://blog.awm.jp/2016/11/01/dng/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この DNG 画像から ICC プロファイル付きで JPEG 画像を生成する方法のメモ書きです。
一行でまとめると。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;プリンタの設定でプロファイルを選択してJPEGファイル出力する。
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;adobe-lightroom-を使う場合&#34;&gt;Adobe Lightroom を使う場合&lt;/h1&gt;

&lt;p&gt;Adobe Cloud で同期するとコレクションに画像が入るので、そこから選択する。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  &lt;a href=&#34;../lightroom01.png&#34;&gt; &lt;img src=&#34;../lightroom02-1.png&#34;&gt; &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;メニューのウィンドウからプリントを選択して、
右端のスクロールバーを一番下まで下げると、カラーマネジメントのパネルが出てくる。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  &lt;a href=&#34;../lightroom02.png&#34;&gt; &lt;img src=&#34;../lightroom02-h.png&#34;&gt; &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;あとは、カラーマネジメントのプロファイルを適当に選択して、右下の「ファイルへ出力」ボタンを押して保存すればOK&lt;/p&gt;

&lt;h1 id=&#34;adobe-photoshop-を使う場合&#34;&gt;Adobe Photoshop を使う場合&lt;/h1&gt;

&lt;p&gt;DNG 画像を開いて、左下の「画像を保存」ボタンを押します。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  &lt;a href=&#34;../photoshop01.png&#34;&gt; &lt;img src=&#34;../photoshop01-45p.png&#34;&gt; &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;以下の保存オプションで選択&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ファイル形式に JPEG&lt;/li&gt;
&lt;li&gt;カラースペースに適当なプロファイル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;
  &lt;a href=&#34;../photoshop02.png&#34;&gt; &lt;img src=&#34;../photoshop02-30p.png&#34;&gt; &lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;あとは右上の保存を押すだけ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iPhone7 Plus で撮影した DNG 画像を PC に取り出す方法</title>
      <link>https://blog.awm.jp/2016/11/01/dng/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/01/dng/</guid>
      <description>

&lt;h1 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;実機

&lt;ul&gt;
&lt;li&gt;iPhone7 Plus (iPhone7 は試してません。所持してないので)&lt;/li&gt;
&lt;li&gt;PC (MacBook Pro で確認しました)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アカウント

&lt;ul&gt;
&lt;li&gt;Adobe Cloud アカウント (ID 自体は無料だけど、PC で Lightroom を使うのに有料サブスクリプションが要る)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アプリ

&lt;ul&gt;
&lt;li&gt;Adobe Lightroom for iPhone (無料)&lt;/li&gt;
&lt;li&gt;Adobe (Photoshop) Lightroom CC (有料)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;全体の流れ&#34;&gt;全体の流れ&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../figure1.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;手順&#34;&gt;手順&lt;/h1&gt;

&lt;h2 id=&#34;iphone7-plus&#34;&gt;iPhone7 Plus&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adobe Lightroom for iPhone をインストールする (無料)&lt;/li&gt;
&lt;li&gt;Adobe CC アカウントでログインする。(画面左上からアクセス)&lt;/li&gt;
&lt;li&gt;Lightroom のカメラを使って撮影 (画面右下からアクセス)

&lt;ul&gt;
&lt;li&gt;DNG の(フラット)ボタンがあるので有効にする&lt;/li&gt;
&lt;li&gt;撮影する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;同期が終わるまで待つ

&lt;ul&gt;
&lt;li&gt;雲のアイコンをタッチすると進捗が分かる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pc-macbook-pro&#34;&gt;PC (MacBook Pro)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adobe Lightroom CC をインストールする (有料)&lt;/li&gt;
&lt;li&gt;Adobe CC アカウントでログインする。(覚えてないけど操作があったかも)&lt;/li&gt;
&lt;li&gt;Lightroom mobile との同期を待つ

&lt;ul&gt;
&lt;li&gt;左上の Lr ログをクリックすれば同期しているか確認出来る。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像の一覧が出るので、DNG が欲しい画像を選択する。&lt;/li&gt;
&lt;li&gt;右クリックで Lightroom プリセット =&amp;gt; DNG に書き出しを実行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上で、撮影した DNG ファイルが手元のディスクに保存されます。&lt;/p&gt;

&lt;h1 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Lightroom デスクトップとモバイルプラットフォームの同期

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://helpx.adobe.com/jp/lightroom/help/lightroom-mobile-desktop-features.html&#34;&gt;https://helpx.adobe.com/jp/lightroom/help/lightroom-mobile-desktop-features.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JPEG と ICC プロファイル</title>
      <link>https://blog.awm.jp/2016/09/10/jpegicc/</link>
      <pubDate>Sat, 10 Sep 2016 00:11:41 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/09/10/jpegicc/</guid>
      <description>

&lt;h1 id=&#34;jpeg-と-icc-プロファイル&#34;&gt;JPEG と ICC プロファイル&lt;/h1&gt;

&lt;p&gt;JPEG は APP2 チャンクに埋め込んだ ICC プロファイル次第で、同じ RGB値&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;や CMYK 値でも モニタ(又はプリンタ)に出力する色が変わります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;../jpeg-profile-icc.png&#34; /&gt; &lt;/br&gt;
引用: &lt;a href=&#34;https://speakerdeck.com/yoya/jpegmeta&#34;&gt;https://speakerdeck.com/yoya/jpegmeta&lt;/a&gt;
 &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
 sRGB, Adobe RGB 補正の例 &lt;/br&gt;
 &lt;img src=&#34;../figure-srgb-adobergb.png&#34; /&gt;
 &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;尚、モニタに表示する色は RGB が基本ですが、プリンタは CMYK (インクの色)です。JPEG の色はその両方に対応していて、ICC プロファイルも両方のタイプが存在します。&lt;/p&gt;

&lt;h1 id=&#34;rgb-色空間&#34;&gt;RGB 色空間&lt;/h1&gt;

&lt;p&gt;例えば赤を表す RGB:(255,0,0) 。
世の中に数あるディスプレイが各々全力で鮮やかな赤を表示すると全部色が違ってしまうので、そこそこ鮮やかな赤色に抑える事で実際に表示する色を統一する規格が色々と存在します。&lt;/p&gt;

&lt;p&gt;一般に知られる RGB 色空間の ICC プロファイルには以下のようなものがあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sRGB, Apple RGB, Adobe RGB, DCI-P3, ProPhoto RGB, scRGB, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これらは主に、色域、特性曲線(RGBだとガンマ補正)、が異なってきます。白色点(光源の色に引きずられて白として感じる色は変わる)は D65 が基本です。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  Gamut(色域) &lt;br/&gt;
  &lt;img src=&#34;../StandardProfilesGamutCoverage.jpg&#34; aligh=&#34;center&#34; /&gt; &lt;br/&gt;
  ( 引用元: &lt;a href=&#34;http://wiki.nuaj.net/index.php?title=Color_Profile&#34;&gt;http://wiki.nuaj.net/index.php?title=Color_Profile&lt;/a&gt; )
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;又、昔の CRT モニタは入力電圧に対して実際の明るさが比例せず、gamma 2.2 曲線に近い特性があったので、それに合わせたガンマ補正も入ります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;../Gamma06_300.png&#34; /&gt; &lt;br /&gt;
引用元: &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AC%E3%83%B3%E3%83%9E%E5%80%A4&#34;&gt; &lt;a href=&#34;https://ja.wikipedia.org/wiki/ガンマ値&#34;&gt;https://ja.wikipedia.org/wiki/ガンマ値&lt;/a&gt; &lt;/a&gt;
 &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;あえてその逆補正した値を持つ事で、そのまま値を渡すとちょうど線形に戻る。という理屈です。&lt;/p&gt;

&lt;h2 id=&#34;rgb-のデフォルト&#34;&gt;RGB のデフォルト&lt;/h2&gt;

&lt;p&gt;Web の世界では sRGB が標準です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Standard Default Color Space for the Internet - sRGB

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/Graphics/Color/sRGB.html&#34;&gt;https://www.w3.org/Graphics/Color/sRGB.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ICC プロファイルが入っていない JPEG 画像は sRGB として暗黙的に解釈します。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure-noicc.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;高演色技術の発達した今の時代に sRGB の色域は物足りない事もありますが、ある意味平和な世界です、CMYK と違って。。&lt;/p&gt;

&lt;h1 id=&#34;cmyk-色空間&#34;&gt;CMYK 色空間&lt;/h1&gt;

&lt;p&gt;プリンタに出力する色は CMYK で表現します。
Cyan, Magenta, Yellow, blacK &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; で各々インクの量です。&lt;/p&gt;

&lt;p&gt;CMYK 色空間の ICC プロファイルは検索すると以下のが見つかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Japan Color, US SWOP, FOGRA, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(環境によってインクの発色が変わってくるので印刷所ごととか機器ごとにプロファイルを持ってそうですが。。)&lt;/p&gt;

&lt;p&gt;RGB と CMYK は大雑把に以下の関係にあります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
 &lt;img src=&#34;../CMYRGBv3.png&#34; /&gt; &lt;br /&gt;
   (引用元: &lt;a href=&#34;http://www.iwashi.org/archives/4108&#34;&gt;http://www.iwashi.org/archives/4108&lt;/a&gt; )
 &lt;img src=&#34;../fig14-half.jpg&#34; /&gt; &lt;br /&gt;
   (引用元: &lt;a href=&#34;http://graphicartsunit.tumblr.com/post/48824825718/%E7%B4%99%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%83%BC%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AErgb%E3%82%AB%E3%83%A9%E3%83%BC%E8%B6%85%E5%85%A5%E9%96%80&#34;&gt;http://graphicartsunit.tumblr.com/post/post/48824825718/紙デザイナーのためのrgbカラー超入門&lt;/a&gt; )
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;なので、リニア RGB, リニア CMYK というものがあるとすれば、以下の計算式になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick: magick/colorspace-private.h&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cyan    = 1.0 - red;
magenta = 1.0 - green;
yellow  = 1.0 - blue;
(一番小さな値を black にしてその分補正)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかしながら、実際の CMYK はインクの量を表すので、その値に補正する必要があります。以下の図はグレースケールを作るのに必要な CMYK の値だそうです。
&lt;center&gt;
 Japan Color 2001 Coated &lt;br /&gt;
 &lt;img src=&#34;../10993-04-JapanColor-crop.jpg&#34; /&gt; &lt;br /&gt;
   (引用元: &lt;a href=&#34;https://www.jagat.or.jp/past_archives/content/view/3083.html&#34;&gt;https://www.jagat.or.jp/past_archives/content/view/3083.html&lt;/a&gt; )
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;cyan = 1.0 - red&amp;rdquo; 等で RGB を逆にしただけの CMYK と違って、灰色を作るのに Y, C, M が同量ではありません。また直線でもガンマ曲線でもない曲線になります。&lt;/p&gt;

&lt;h2 id=&#34;cmyk-のデフォルト&#34;&gt;CMYK のデフォルト(?)&lt;/h2&gt;

&lt;p&gt;RGB における sRGB と違って CMYK には世界的なデファクトがありません。インクの色のノリ具合まで加味されるので温度や湿度といった環境によっても異なりますし、そもそも無理でしょう。&lt;/p&gt;

&lt;p&gt;ですので、ICC プロファイルが入っていない CMYK JPEG をモニタやプリンタに出力する時に、どうするかは環境によって異なってきます。&lt;/p&gt;

&lt;p&gt;例えば、MacOS の標準ビューアや Safari は、ColorSync の仕組みで色を補正していて、以下の ICC プロファイル&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;を用いるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/System/Library/ColorSync/Profiles/Generic\ CMYK\ Profile.icc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CMYK JPEG は必ず ICC プロファイルを埋める必要があると言えます。とりあえず日本に限って言えば、Japan Color 2001 Coated を使えば大体 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; は大丈夫でしょう。&lt;/p&gt;

&lt;p&gt;Chrome や Firefox など、CMYK のカラープロファイルを解釈しないブラウザだと、インク特性を無視してリニアの CMYK =&amp;gt; RGB 処理を行うようで、話が少し面倒だったりします。&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;カラーマネージメントとプロファイル変換

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://w3.kcua.ac.jp/~fujiwara/infosci/colorman/color_manage.html&#34;&gt;http://w3.kcua.ac.jp/~fujiwara/infosci/colorman/color_manage.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まだCMYKで消耗してるの？〜大幅な色補正をCMYKで行ってはいけない理由〜

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iwashi.org/archives/4108&#34;&gt;http://www.iwashi.org/archives/4108&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;紙デザイナーのためのrgbカラー超入門

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://graphicartsunit.tumblr.com/post/48824825718/%E7%B4%99%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%83%BC%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AErgb%E3%82%AB%E3%83%A9%E3%83%BC%E8%B6%85%E5%85%A5%E9%96%80&#34;&gt;http://graphicartsunit.tumblr.com/post/post/48824825718/紙デザイナーのためのrgbカラー超入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;JPEG は RGB 値をYCbCrに変換して保存します
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;最近の FireFox のデフォルト設定だと、ICC プロファイルが入っていないと何も補正しないそうです。そのままディスプレイのプロファイルで解釈されます。辛い。。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;blacK の K という説より、Key の略という方が多勢のようです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;この Generic CMYK Profile は Japan Color 2001 corted , US Sheetred Coated , FOGRA39 のいずれとも一致しませんでした。無難なプロファイルに見えます。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;Japan Color 2001 Coated はマット紙用プロファイルで、オフ輪だと japan Web Coated の方が良いそうです。参考) &lt;a href=&#34;https://www.jagat.or.jp/past_archives/content/view/3083.html&#34;&gt;https://www.jagat.or.jp/past_archives/content/view/3083.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JPEG のクロマサブサンプリングと YUVabc</title>
      <link>https://blog.awm.jp/2016/02/10/yuv/</link>
      <pubDate>Wed, 10 Feb 2016 21:53:44 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/02/10/yuv/</guid>
      <description>

&lt;h1 id=&#34;jpeg-のクロマサブサンプリングと-yuvabc&#34;&gt;JPEG のクロマサブサンプリングと YUVabc&lt;/h1&gt;

&lt;p&gt;YCbCr については以下のページで紹介しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JPEG の YCbCr について

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.awm.jp/2016/02/06/ycbcr/&#34;&gt;https://blog.awm.jp/2016/02/06/ycbcr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YCbCr のメリットとして説明したクロマサブサンプリングの種類についてまとめます。&lt;/p&gt;

&lt;p&gt;JPEG が本エントリの主眼なので YUV の U を Cb、V を Cr に当てはめて解説します。YUV と YCbCr は計算式が違いますが、サブサンプリングの記法としては同じものが使われます。&lt;/p&gt;

&lt;h1 id=&#34;はじめに早見表&#34;&gt;はじめに早見表&lt;/h1&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuvyab.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;※ YUV410 だけ変則的です&lt;/p&gt;

&lt;h2 id=&#34;imagemagick-での作り方&#34;&gt;ImageMagick での作り方&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ convert orig.jpg -sampling-factor &amp;quot;1x1,1x1,1x1&amp;quot; yuv444.jpg
$ convert orig.jpg -sampling-factor &amp;quot;2x1,1x1,1x1&amp;quot; yuv422.jpg
$ convert orig.jpg -sampling-factor &amp;quot;4x1,1x1,1x1&amp;quot; yuv411.jpg
$ convert orig.jpg -sampling-factor &amp;quot;1x2,1x1,1x1&amp;quot; yuv440.jpg
$ convert orig.jpg -sampling-factor &amp;quot;2x2,1x1,1x1&amp;quot; yuv420.jpg
$ convert orig.jpg -sampling-factor &amp;quot;4x4,1x1,1x1&amp;quot; yuv410.jpg # yuv9
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;yuvabc-の種類&#34;&gt;YUVabc の種類&lt;/h1&gt;

&lt;p&gt;よく見る表現として、YUV444 、YUV422 の２つがあります。&lt;/p&gt;

&lt;h2 id=&#34;yuv444-の-y-cb-cr-の並び&#34;&gt;YUV444 の Y,Cb,Cr の並び&lt;/h2&gt;

&lt;p&gt;YUVabc と見立てると a, b, c の番号は以下のように対応します。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv444.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;yuv422-の-y-cb-cr-の並び&#34;&gt;YUV422 の Y,Cb,Cr の並び&lt;/h2&gt;

&lt;p&gt;YUV422 の場合は Y に対して Cb, Cr を半分に間引きます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv422-onaji.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;間引く分の偶数番目の Cb, Cr はデータから省略できます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv422.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;色々な-yuvabc&#34;&gt;色々な YUVabc&lt;/h1&gt;

&lt;p&gt;実際に表記を見たことのある YUVabc を列挙します。(他に実例あればご指摘下さい)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV444 (再掲) : 間引かない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv444.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV422 (再掲) : 横方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 間引く。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv422.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV440 : 縦方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 間引く。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv440.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV420 : 横方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 、縦方向も &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 間引く。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv420.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV411 : 横方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; になるよう間引く。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv411.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YUV410 : 横方向に &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; 、縦方向は &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 間引く。(？)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv410.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;と言いたい所ですが、実際には 4x4 として使われるようです。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuv410-4x4.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;YUVabc は横4pixel縦2pixel で考えて以下のようなパラメータ

&lt;ul&gt;
&lt;li&gt;a は Y の横方向サンプル数で4固定&lt;/li&gt;
&lt;li&gt;b は横方向の間引き。Cb,Cr の横方向サンプル数で 4, 2, 1 のいずれか&lt;/li&gt;
&lt;li&gt;c は縦方向の間引き。次の行の Cb,Cr の横方向サンプル数で b と同じか 0 のどちらか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;YUV444 は全ピクセル Y,Cb,Cr をセットで持つ。画質を落としたくない場合はこれ&lt;/li&gt;
&lt;li&gt;YUV422 は Cb,Cr を横方向で &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; で間引く。JPEG や動画でよく使われる&lt;/li&gt;
&lt;li&gt;YUV410 は abc の法則から例外&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Chroma_subsampling&#34;&gt;https://en.wikipedia.org/wiki/Chroma_subsampling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome subsampling notation

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.poynton.com/PDFs/Chroma_subsampling_notation.pdf&#34;&gt;http://www.poynton.com/PDFs/Chroma_subsampling_notation.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;YUVのサンプリング種類

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.yahoo.co.jp/linear_pcm0153/24210613.html&#34;&gt;http://blogs.yahoo.co.jp/linear_pcm0153/24210613.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Digital Color Coding

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.telairity.com/assets/downloads/Digital%20Color%20Coding.pdf&#34;&gt;http://www.telairity.com/assets/downloads/Digital%20Color%20Coding.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JPEG の YCbCr について</title>
      <link>https://blog.awm.jp/2016/02/06/ycbcr/</link>
      <pubDate>Sat, 06 Feb 2016 15:58:53 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/02/06/ycbcr/</guid>
      <description>

&lt;h1 id=&#34;jpeg-の-ycbcr-について&#34;&gt;JPEG の YCbCr について&lt;/h1&gt;

&lt;p&gt;JPEG で保存する色は RGB でなく YCbCr なので、その話。&lt;/p&gt;

&lt;h1 id=&#34;rgb-ycbcr&#34;&gt;RGB &amp;lt;=&amp;gt; YCbCr&lt;/h1&gt;

&lt;p&gt;RGB は Red(赤)、Green(緑)、Blue(青)の加色混合で色を表現する方式ですが、JPEG は YCbCr で色を保存します。Y (輝度)、Cb(青の色差)、Cr(赤の色差)です。&lt;/p&gt;

&lt;p&gt;Y は色空間の CIE-XYZ で輝度に対応する Y 軸。Cb は Chroma(色度) の Blue, Cr は Red です。&lt;/p&gt;

&lt;p&gt;大雑把にはこんなイメージ。
&lt;center&gt; &lt;img src=&#34;../ycbcrvolume.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スライダーで色を調整するデモを作りました。お試し下さい。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/color/ycbcrslider.html&#34;&gt;http://blog.awm.jp/color/ycbcrslider.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;変換式&#34;&gt;変換式&lt;/h2&gt;

&lt;h3 id=&#34;rgb-ycbcr-1&#34;&gt;RGB =&amp;gt; YCbCr&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;輝度信号&lt;/td&gt;
&lt;td&gt;0.299  * R + 0.587  * G + 0.114  * B&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cb&lt;/td&gt;
&lt;td&gt;青の色差 &lt;br&gt; (B&amp;rsquo;-Y)&lt;/td&gt;
&lt;td&gt;-0.1687 * R - 0.3313 * G + 0.5    * B + 128&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cr&lt;/td&gt;
&lt;td&gt;赤の色差 &lt;br&gt; (R&amp;rsquo;-Y)&lt;/td&gt;
&lt;td&gt;0.5    * R - 0.4187 * G - 0.0813 * B + 128&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;ycbcr-rgb&#34;&gt;YCbCr =&amp;gt; RGB&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;赤 &lt;br&gt; (Y       + Cr&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;Y                        + 1.402   * (Cr - 128)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;緑 &lt;br&gt; (Y - Cb&amp;rsquo; - Cr&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;Y - 0.34414 * (Cb - 128) - 0.71414 * (Cr - 128)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;青 &lt;br&gt; (Y + Cb&amp;rsquo;      )&lt;/td&gt;
&lt;td&gt;Y + 1.772   * (Cb - 128)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;rgb-との比較&#34;&gt;RGB との比較&lt;/h2&gt;

&lt;h3 id=&#34;rgb-チャネル分解&#34;&gt;RGB チャネル分解&lt;/h3&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../logo.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert logo.png -colorspace RGB -separate +append tmp.png
$ convert logo.png +level-colors Red \
	\( +clone +level-colors Green1 \) \
	\( +clone +level-colors Blue \) +append \
	tmp.png -compose Multiply -composite  logo_rgb.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注) Green1 を Green にすると緑の明るさが半分になるので注意
&lt;center&gt; &lt;img src=&#34;../logo_rgb.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;ycbcr-チャネル分解&#34;&gt;YCbCr チャネル分解&lt;/h3&gt;

&lt;p&gt;こちらは Golang の image パッケージで変換。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/yoya/4fae336a34a8a5bf5d9c&#34;&gt;https://gist.github.com/yoya/4fae336a34a8a5bf5d9c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ go build png_separate_ycbcr.go
$ ./png_separate_ycbcr logo.png logo_ycbcr.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../logo_ycbcr.png&#34; /&gt; &lt;/center&gt;
(YCbCr の残りパラメータを128固定にして擬似的に負の値を表現)&lt;/p&gt;

&lt;h2 id=&#34;メリット&#34;&gt;メリット&lt;/h2&gt;

&lt;p&gt;輝度信号と色差信号を分けるメリットですが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;白黒テレビの信号に後付けで色味を追加できる&lt;/li&gt;
&lt;li&gt;人の目は輝度(色の明るさ)に敏感、色味には鈍感&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JPEG や多くの動画形式では Y はそのままで Cb, Cr のサンプルを間引く、クロマサブサンプリング方式でデータ量を節約します。尚、多くの動画形式は YCbCr でなく YUV で少し計算が異なります、概念的には似たものです。&lt;/p&gt;

&lt;h3 id=&#34;クロマサブサンプリング&#34;&gt;クロマサブサンプリング&lt;/h3&gt;

&lt;h3 id=&#34;yuvabc&#34;&gt;YUVabc&lt;/h3&gt;

&lt;p&gt;間引きかたによって YUV444、YUV422 のように表現します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;YUV444
&lt;center&gt; &lt;img src=&#34;../yuv444.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YUV422
&lt;center&gt; &lt;img src=&#34;../yuv422.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;より詳しくは以下のエントリをご参考ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JPEG のクロマサブサンプリングと YUVabc について

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/02/10/yuv/&#34;&gt;http://blog.awm.jp/2016/02/10/yuv/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デメリット&#34;&gt;デメリット&lt;/h2&gt;

&lt;p&gt;RGB と YCbCr は色空間が斜めの関係にあり、YCbCr は RGB を全部カバーする為、同じ 0-255 でも RGB より YCbCr の方が大きなスケールを表現します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;大きな立体が YCbCr の空間で、中の小さい立体が RGB の収まる範囲です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../rgb2ycbcr_half.png&#34; /&gt; &lt;/center&gt; (&lt;a href=&#34;../RGB2YCbCr.gcx&#34;&gt; Grapher ファイル&lt;/a&gt; | &lt;a href=&#34;../makeVert.phps&#34;&gt; プロット生成スクリプト  &lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(奥行きが分かりにくいのですが頂点の丸が大きい方が手前です。後で改善します)&lt;/p&gt;

&lt;p&gt;大小２つの立方体の間にある隙間が RGB&amp;lt;=&amp;gt;YCbCr で死ぬ無駄な空間で、YCbCr のビット数を RGB と同じにすると粒度が荒くなり表現できる色数が減ります。色数が1/4ほどまで減るとも言われます。&lt;/p&gt;

&lt;p&gt;詳しくは以下のページを参照下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ConvertToRGB

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://csbarn.blogspot.jp/2012/01/converttorgb.html&#34;&gt;http://csbarn.blogspot.jp/2012/01/converttorgb.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;メリットとして色成分だけ間引く事で見た目をあまり変えずにデータを少なく出来る。&lt;/li&gt;
&lt;li&gt;デメリットとして 8bit depth のはずが実際には約 7bit depth 分しかない。(ちなみに人間の目は 10bit まで識別可能)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考ページ&#34;&gt;参考ページ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;JPEG File Interchange Format

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/Graphics/JPEG/jfif3.pdf&#34;&gt;https://www.w3.org/Graphics/JPEG/jfif3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RGB⇔YCbCr変換

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://koujinz.cocolog-nifty.com/blog/2009/03/rgbycbcr-a4a5.html&#34;&gt;http://koujinz.cocolog-nifty.com/blog/2009/03/rgbycbcr-a4a5.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;XYZ表色系

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dic-color.com/knowledge/xyz.html&#34;&gt;http://www.dic-color.com/knowledge/xyz.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ImageMagickでHSLとHSV色空間を理解する

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://smash.nobuto-murata.org/2009/12/imagemagickhslhsv.html&#34;&gt;http://smash.nobuto-murata.org/2009/12/imagemagickhslhsv.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ImageMagick で JPEG の形式を変換</title>
      <link>https://blog.awm.jp/2016/01/26/jpeg/</link>
      <pubDate>Tue, 26 Jan 2016 14:55:39 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/26/jpeg/</guid>
      <description>

&lt;h1 id=&#34;imagemagick-で-jpeg-の形式を変換&#34;&gt;ImageMagick で JPEG の形式を変換&lt;/h1&gt;

&lt;p&gt;JPEG は同じように見える画像でも、バイナリ的に色んな形式やメタデータで表現できます。ImageMagick でそれらの形式に変換する方法を並べてみます。&lt;/p&gt;

&lt;h1 id=&#34;プログレッシブjpeg&#34;&gt;プログレッシブJPEG&lt;/h1&gt;

&lt;p&gt;読みはじめに粗い画像を表示して、読み進めるにつれて画質に更新する表示が出来ます。ネットワーク回線が細い環境に嬉しい形式です。
周波数成分が粗い方から段階的に分けて JPEG チャンクに配置する事で実現します。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../progressive.png&#34;&gt; &lt;/center&gt;
画像元) &lt;a href=&#34;http://dic.nicovideo.jp/a/%E3%83%95%E3%82%A1%E3%83%B3%E3%82%BF%E3%82%B8%E3%83%BC%E3%82%BE%E3%83%BC%E3%83%B3&#34;&gt;ニコニコ大百科(仮) ファンタジーゾーン&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プログレッシブJPEGの作り方&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ convert orig.jpg -interlace JPEG progressive.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;クロマサブサンプリング&#34;&gt;クロマサブサンプリング&lt;/h1&gt;

&lt;p&gt;基本的に &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; JPEG は色を YCbCr の３つの値で保持していて、色味を表す Cb と Cr だけ間引く事で見た目をあまり変えずにデータ量を削減する事ができます。人の目が色味の変化に鈍感な性質を利用する方式です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JPEG の YCbCr について

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.awm.jp/2016/02/06/ycbcr/&#34;&gt;https://blog.awm.jp/2016/02/06/ycbcr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JPEG のクロマサブサンプリングと YUVabc

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/02/10/yuv/&#34;&gt;http://blog.awm.jp/2016/02/10/yuv/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yuvabc.png&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クロマサブサンプリングの作り方&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ convert orig.jpg -sampling-factor &amp;quot;1x1,1x1,1x1&amp;quot; yuv444.jpg
$ convert orig.jpg -sampling-factor &amp;quot;2x1,1x1,1x1&amp;quot; yuv422.jpg
$ convert orig.jpg -sampling-factor &amp;quot;4x1,1x1,1x1&amp;quot; yuv411.jpg
$ convert orig.jpg -sampling-factor &amp;quot;1x2,1x1,1x1&amp;quot; yuv440.jpg
$ convert orig.jpg -sampling-factor &amp;quot;2x2,1x1,1x1&amp;quot; yuv420.jpg
$ convert orig.jpg -sampling-factor &amp;quot;4x4,1x1,1x1&amp;quot; yuv410.jpg # yuv9
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exif-exittool-で変換&#34;&gt;Exif (Exittool で変換)&lt;/h1&gt;

&lt;h2 id=&#34;orientation&#34;&gt;Orientation&lt;/h2&gt;

&lt;p&gt;Exif の Orientation タグを指定する事で表示の時の画像の向きを制御できます。(たまに無視するビューアもあります)&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../exif_orientation.png&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Exif Orientation の向きについては以下の記事をどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient/&#34;&gt;https://blog.awm.jp/2016/01/07/orient/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../orient-38per.png&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;既に Exif Orientation が含まれる画像ファイルであれば ImageMagick で更新出来ますが、入っていない場合に新規に追加する事は無理そうです。このケースでは Exiftool を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ exiftool orig.jpg -Orientation=0 -n -o orient0.jpg
$ exiftool orig.jpg -Orientation=1 -n -o orient1.jpg
$ exiftool orig.jpg -Orientation=2 -n -o orient2.jpg
$ exiftool orig.jpg -Orientation=3 -n -o orient3.jpg
$ exiftool orig.jpg -Orientation=4 -n -o orient4.jpg
$ exiftool orig.jpg -Orientation=5 -n -o orient5.jpg
$ exiftool orig.jpg -Orientation=6 -n -o orient6.jpg
$ exiftool orig.jpg -Orientation=7 -n -o orient7.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※ -o をつけ忘れると orig.jpg を上書きしてしまうので注意&lt;/p&gt;

&lt;h1 id=&#34;profile&#34;&gt;Profile&lt;/h1&gt;

&lt;h2 id=&#34;icc-profile&#34;&gt;ICC Profile&lt;/h2&gt;

&lt;p&gt;ICC プロファイルの詳細は以下のスライドが分かり易いので、参照下さい。(英語)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ICC color management for print production

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.color.org/craigrevie.pdf&#34;&gt;http://www.color.org/craigrevie.pdf&lt;/a&gt; &amp;copy; FujiFilm 2002&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ポイントとしては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;撮影や表示のデバイスによって R,G,B の値と実際の色との対応が微妙に違うのを補正する

&lt;ul&gt;
&lt;li&gt;特に新し目のデバイスでは性能があがって表現できる色域が広がっているので、それと既存のデバイスとの辻褄合わせが要る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全デバイス同士で直接変換すると組み合わせ爆発して辛いので、共通の色空間経由で変換する

&lt;ul&gt;
&lt;li&gt;その中心の空間を PCS (Profile Connection Space) と呼ぶ。CIE の Lab 又は XYZ を使う。
&lt;center&gt; &lt;img src=&#34;../craigrevie_13_25per.png&#34;&gt;  &lt;img src=&#34;../craigrevie_14_25per.png&#34;&gt; &lt;br /&gt; (上記スライドからの引用)&lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ImageMagick では -profile オプションで ICC プロファイルを適用できます。変換元の JPEG に ICC プロファイルが入っているか否かによって動作が異なります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;変換元 JPEG に ICC プロファイルが無い場合

&lt;ul&gt;
&lt;li&gt;ICC プロファイルのメタデータを追加するだけ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;変換元 JPEG に ICC プロファイルが入っている場合&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ICC プロファイルのメタデータを書き換えると同時に、ICCプロファイル対応ビューアでの表示の色が変わらないよう実データのピクセルの色を補正する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;変換元 JPEG に ICC プロファイルが無い場合&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ convert noicc.jpg -profile sRGB.icc srgb.icc # 見た目変わらない
$ convert noicc.jpg -profile  GBR.icc  gbr.icc # 見た目変わる
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../icc-profile1.png&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;変換元 JPEG に ICC プロファイルが入っている場合&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ convert srgb.jpg -profile sRGB.icc srgb.icc # 見た目変わらない
$ convert srgb.jpg -profile  GBR.icc  gbr.icc # 見た目変わらない
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../icc-profile2.png&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;グレイjpeg&#34;&gt;グレイJPEG&lt;/h1&gt;

&lt;p&gt;JPEG 形式のタイプとして Grayscale が存在しますので、一応作り方を紹介。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa.jpg&#34; align=&#34;middle&#34;&gt; =&amp;gt; &lt;img src=&#34;../Opaopa-gray.jpg&#34; align=&#34;middle&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert orig.jpg -type grayscale gray.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;最後に&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;他にもこんな形式を知っているという方がいましたら、ご指摘頂けると幸いです。&lt;/p&gt;

&lt;h1 id=&#34;参考-url&#34;&gt;参考 URL&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Exiftool

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sno.phy.queensu.ca/~phil/exiftool/&#34;&gt;http://www.sno.phy.queensu.ca/~phil/exiftool/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JPG ファイルフォーマット

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.setsuki.com/hsp/ext/jpg.htm&#34;&gt;http://www.setsuki.com/hsp/ext/jpg.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Grayscale や CMYK の値で持つ事もできます。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>透明度を含む画像を JPEG に変換する時の背景色</title>
      <link>https://blog.awm.jp/2016/01/25/flatten/</link>
      <pubDate>Mon, 25 Jan 2016 02:01:09 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/25/flatten/</guid>
      <description>

&lt;h1 id=&#34;透明度を含む画像を-jpeg-に変換する時の背景色&#34;&gt;透明度を含む画像を JPEG に変換する時の背景色&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cybozu.io/entry/2016/01/06/080000&#34;&gt;http://blog.cybozu.io/entry/2016/01/06/080000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;透過画像をそのまま JPEG に変換すると背景色が黒になるので、
白にしたい場合は同じサイズにリサイズしましょう。
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;実際のところ&#34;&gt;実際のところ&lt;/h1&gt;

&lt;p&gt;そのまま JPEG に変換すると背景色は白になります。&lt;/p&gt;

&lt;pre&gt;
$ convert in.png out.jpg &lt;img src=&#34;../logowhite_37p.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;-resize でサイズが変わった時に黒くなります。&lt;/p&gt;

&lt;pre&gt;
$ identify in.png
awmcorp_logo.png PNG 300x300 300x300+0+0 16-bit sRGB 21.1KB 0.000u 0:00.000
$ convert in.png -resize 300x300 out.jpg &lt;img src=&#34;../logowhite_37p.jpg&#34; /&gt;
$ convert in.png -resize 200x200 out.jpg &lt;img src=&#34;../logoblack_hh.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;詳しくは追っていませんが、リサイズでピクセルの補完アルゴリズムが働く際に黒(0,0,0)を元に加色混合でピクセルを計算していくのだろうと想像してます。(要調査)&lt;/p&gt;

&lt;h1 id=&#34;extent-で背景を白にできる&#34;&gt;-extent で背景を白にできる&lt;/h1&gt;

&lt;pre&gt;
$ convert in.png -resize 200x200 out.jpg &lt;img src=&#34;../logoblack_hh.jpg&#34; /&gt;
$ convert in.png -resize 200x200 -extent 200x200 out.jpg &lt;img src=&#34;../logowhite_hh.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;-extent は描画領域であるスクリーンを拡大する命令です。拡大された白いキャンバスと画像のレイヤーが別なので重ね合わせた結果、背景が白くなります。&lt;/p&gt;

&lt;pre&gt;
$ convert in.png -resize 200x200 –extent 400x400 out.jpg &lt;img src=&#34;../logowhiteExtent_hh.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;h1 id=&#34;flatten-レイヤーを重ねる命令-が正しい&#34;&gt;-flatten (レイヤーを重ねる命令)が正しい&lt;/h1&gt;

&lt;p&gt;-extent でも同じ結果になるので重箱の隅をついてるようですが、レイヤーを重ねれば良いので -flatten を使うのが意味的に正しいと思います。&lt;/p&gt;

&lt;pre&gt;
$ convert in.png -resize 200x200 –flatten out.jpg &lt;img src=&#34;../logowhite_hh.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;-background も有効です。&lt;/p&gt;

&lt;pre&gt;
$ convert in.png -resize 200x200 &lt;u&gt;-background red&lt;/u&gt; –flatten out.jpg &lt;img src=&#34;../logored_hh.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;尚、引数の順番で挙動が変わるので注意して下さい。
&lt;pre&gt;
$ convert in.png -resize 200x200  –flatten &lt;u&gt;-background red&lt;/u&gt; out.jpg &lt;img src=&#34;../logowhite_hh.jpg&#34; /&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;背景を赤くぬる前にレイヤー統合してしまったからだと思われます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>もうサムネイルで泣かないための ImageMagick ノウハウ集に一言</title>
      <link>https://blog.awm.jp/2016/01/25/imagemagick/</link>
      <pubDate>Mon, 25 Jan 2016 00:32:35 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/25/imagemagick/</guid>
      <description>

&lt;h1 id=&#34;もうサムネイルで泣かないための-imagemagick-ノウハウ集に一言&#34;&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集に一言&lt;/h1&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe allowfullscreen=&#34;true&#34; allowtransparency=&#34;true&#34; frameborder=&#34;0&#34; height=&#34;497&#34; mozallowfullscreen=&#34;true&#34; src=&#34;//speakerdeck.com/player/248da47aa52d48ae8d57e8656f117997&#34; style=&#34;border:0; padding:0; margin:0; background:transparent;&#34; webkitallowfullscreen=&#34;true&#34; width=&#34;578&#34;&gt;&lt;/iframe&gt;
&lt;a href=&#34;https://speakerdeck.com/yoya/imagemagick-knowhow&#34;&gt;https://speakerdeck.com/yoya/imagemagick-knowhow&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;発表スライドだと URL のリンクが辿りにくいのとブログ形式で読みたいとの声があり、ほぼ同じ内容のエントリを作りました。&lt;/p&gt;

&lt;h1 id=&#34;一部界隈で話題&#34;&gt;一部界隈で話題&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cybozu.io/entry/2016/01/06/080000&#34;&gt;http://blog.cybozu.io/entry/2016/01/06/080000&lt;/a&gt;
&lt;center&gt; &lt;img src=&#34;../cybozuinsideout.png&#34; /&gt; &lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;色んなノウハウが詰まっていて素晴らしい記事です。便乗して幾つか勝手に補足してみます。&lt;/p&gt;

&lt;h1 id=&#34;良いノウハウ&#34;&gt;良いノウハウ&lt;/h1&gt;

&lt;h2 id=&#34;リリース大量消費に注意&#34;&gt;リリース大量消費に注意&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;limit 大事 (特にユーザ投稿画像を扱う場合)
&lt;pre&gt;
$ convert -limit &lt;u&gt;memory 256MB&lt;/u&gt; -limit &lt;u&gt;disk 0&lt;/u&gt; src.jpg dst.png
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;画像や処理によって予期しない量のメモリを使われる事があるので、-limit memory で制限をかけるのと、仮にディスクが使われた日には極端に遅くなるので -limit disk も必要です。&lt;/p&gt;

&lt;h2 id=&#34;cmyk-画像を考慮しよう&#34;&gt;CMYK 画像を考慮しよう&lt;/h2&gt;

&lt;p&gt;画像データの色の表現は主に RGB と CMYK が使われます。この内 CMYK の画像をそのままリサイズすると色味が壊れます。これはリサイズの補間アルゴリズムがリニアRGBを前提としているからだと思われます。&lt;/p&gt;

&lt;p&gt;ちなみに、この&amp;rdquo;リニア&amp;rdquo;RGB というのが曲者で、画像は sRGB で入っている事が多くガンマ補正がかかっているので、実は微妙に明るさが期待したものより暗くなる事があります。
補間の問題なのでドットが疎らに入っている画像で特に暗くなる傾向があります。
&lt;!-- 色数少なめでディザをかけた画像で実験すると顕著に差が出ます。 --&gt;&lt;/p&gt;

&lt;p&gt;厳密に処理したい場合は RGB にしてから処理すると良いでしょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resizing with Colorspace Correction

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/Usage/resize/#resize_colorspace&#34;&gt;http://www.imagemagick.org/Usage/resize/#resize_colorspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ convert earth_lights_4800.tif \
          -colorspace RGB -resize 500 --colorspace sRGB \
          earth_lights_colorspace.png
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;imagemagick-のオプションの順序に注意&#34;&gt;ImageMagick のオプションの順序に注意&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick は引数を先頭から順に命令実行する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のように、for ループで引数を先頭から順番に見て、オプションに対応する関数を個別に実行します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wand/mogrify.c (convert も引数チェック後にこの関数を呼ぶ)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;WandExport&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MagickBooleanType&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MogrifyImage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(ImageInfo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_info,&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,Image&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image,ExceptionInfo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;exception)&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;ssize_t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[i];&lt;/span&gt;
    &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(LocaleCompare(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;repage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
              &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ParseAbsoluteGeometry(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;0x0+0+0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;page);&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
              &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ResetImagePage(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image,argv[i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;InheritException(exception,&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;exception);&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;逆にいうと順序次第で組み合わせ的に色んな操作が可能になるという事です。&lt;/p&gt;

&lt;h1 id=&#34;補足したい項目&#34;&gt;補足したい項目&lt;/h1&gt;

&lt;p&gt;対応するブログのエントリを並べます。&lt;/p&gt;

&lt;h2 id=&#34;画像比較は人間の眼で行うべし&#34;&gt;画像比較は人間の眼で行うべし&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick で画像を比較する

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/25/diff/&#34;&gt;http://blog.awm.jp/2016/01/25/diff/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ある程度、計算で差分の多い画像や領域を自動抽出できます。&lt;/p&gt;

&lt;h2 id=&#34;orientation-を考慮しよう&#34;&gt;Orientation を考慮しよう&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;-auto-orient でオフセットがズレる件

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/06/orient/&#34;&gt;http://blog.awm.jp/2016/01/06/orient/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JPEG を経由しなくても +repage で対処出来る。かもしれません。&lt;/p&gt;

&lt;h2 id=&#34;透過画像を考慮しよう&#34;&gt;透過画像を考慮しよう&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;透明度を含む画像を JPEG に変換する時の背景色

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/25/flatten/&#34;&gt;http://blog.awm.jp/2016/01/25/flatten/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結果は恐らく変わらないので重箱の隅付きですが、-extent は副作用的に対処出来るだけで、-flatten がズバリの処理です。&lt;/p&gt;

&lt;h2 id=&#34;グレイスケール画像を考慮しよう&#34;&gt;グレイスケール画像を考慮しよう&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;グレー形式JPEGをPNGに変換すると暗くなる件

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/06/gray/&#34;&gt;http://blog.awm.jp/2016/01/06/gray/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6.8.0-0 〜 6.8.0-7 にあった色空間変換のバグです。回避策として PNG24, PNG32 に変換するのも良いですが、減色が理由ではないので PNG8 でも良いかもしれません。
&lt;!-- (もしかして Colorspace を明示的に指定するとうまくいくかも？) --&gt;&lt;/p&gt;

&lt;h2 id=&#34;define-jpeg-size-に注意&#34;&gt;-define jpeg:size に注意&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JPEG の size hinting について

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/08/jpeghint/&#34;&gt;http://blog.awm.jp/2016/01/08/jpeghint/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大きい方向にリサイズする時はメモリを余計に消費しますが、小さい方にリサイズする場合は大変有効ですので、是非使いましょう。元の &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 以下にリサイズする場合は jpeg:size をつける。という条件をつけるのが良さそうです。&lt;/p&gt;

&lt;h1 id=&#34;さいごに&#34;&gt;さいごに&lt;/h1&gt;

&lt;p&gt;以上です。誤りや物足りない所があればご指摘ください。&lt;/p&gt;

&lt;p&gt;もし、お役に立つ事があれば幸いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JPEG の size hinting について</title>
      <link>https://blog.awm.jp/2016/01/08/jpeghint/</link>
      <pubDate>Fri, 08 Jan 2016 23:40:32 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/08/jpeghint/</guid>
      <description>

&lt;p&gt;何度もしつこいですが、以下の記事の -define jpeg:size への勝手な補足。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cybozu.io/entry/2016/01/06/080000&#34;&gt;http://blog.cybozu.io/entry/2016/01/06/080000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;いつでもつければ良いというものではないので注意しましょう。
弊社では、このオプションはサービスの安定運用のためには無用と判断し、
現在このオプションは利用していません。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意する点ではありますが、この結論では「JPEG size hinting は危険なので使わない方が良い」と誤解する人が出そうなので勝手に補足します。&lt;/p&gt;

&lt;h1 id=&#34;define-jpeg-size-とは&#34;&gt;-define jpeg:size とは？&lt;/h1&gt;

&lt;h2 id=&#34;jpeg-のデータの持ち方&#34;&gt;JPEG のデータの持ち方&lt;/h2&gt;

&lt;p&gt;JPEG は画像の周波数成分のデータを保持していて、JPEG の Decode では波を合成する事でビットマップ画像に戻します。尚、8x8 単位で画像をグリッド分割してこの処理をします。&lt;/p&gt;

&lt;p&gt;(参考イメージ)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/dct8x8-600.png&#34; /&gt; &lt;/center&gt;
引用) &lt;a href=&#34;https://www.cl.cam.ac.uk/teaching/1011/R08/jpeg/acs10-jpeg.pdf&#34;&gt;https://www.cl.cam.ac.uk/teaching/1011/R08/jpeg/acs10-jpeg.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;scaling-指定で-decode&#34;&gt;scaling 指定で Decode&lt;/h2&gt;

&lt;p&gt;元のサイズの画像データに変換する場合と比べて、手間を増やさず &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;, &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;, &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt; サイズの画像データに変換できます。高周波成分を見なくて済む上に変換後のサイズが小さい事から、むしろより少ない手間でさえあります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/dct8x8-4-1-600.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;(ImageMagick から利用する libjpeg で 2,4,8 のように 2^n に限っているのは、波の合成(iDCT)の高速化で FFT を使う都合か。もしくは波のループの端が合わないか。)&lt;/p&gt;

&lt;h2 id=&#34;やっている事&#34;&gt;やっている事&lt;/h2&gt;

&lt;p&gt;リサイズ後の大きさに近くなるよう scale factor を指定して JPEG を Decode し。そこからリサイズする事で、メモリやCPUを節約します。&lt;/p&gt;

&lt;h1 id=&#34;jpeg-size-hinting-の動作イメージ&#34;&gt;JPEG size hinting の動作イメージ&lt;/h1&gt;

&lt;p&gt;詳しくはこちらを参照して下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本当は速いImageMagick: サムネイル画像生成を10倍速くする方法

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mirakui.com/entry/20110123/1295795409&#34;&gt;http://blog.mirakui.com/entry/20110123/1295795409&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;小さくリサイズする場合&#34;&gt;小さくリサイズする場合&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通にリサイズ (-define jpeg:size 無し)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize1.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;小さいサイズでデコードしてリサイズ (-define jpeg:size 有り)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize2.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;処理は減るしメモリも少ないし、パフォーマンス的には良い事づくめ。&lt;/p&gt;

&lt;h2 id=&#34;大きくリサイズする場合-予想&#34;&gt;大きくリサイズする場合 (予想)&lt;/h2&gt;

&lt;p&gt;問題にしているケースです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通にリサイズ (-define jpeg:size 無し)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize3.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大きなサイズでデコードしてリサイズ (-define jpeg:size 有り)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize4.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という動作が予想できます。1.5倍のメモリを使うという話も 2, 4, 8 倍で丁度良いサイズになる事はあまりないので、そこそこ話が合います。&lt;/p&gt;

&lt;h3 id=&#34;実際の動き&#34;&gt;実際の動き&lt;/h3&gt;

&lt;p&gt;jpeg_info の output_width, output_height を表示させて確認したところ、拡大する時には最大でも2倍指定で Decode するようです。どんなに元画像とのサイズの差をつけても 4, 8 倍にはなりませんでした。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize5.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fprintf で表示させる&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;      &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AAA: jpeg_info:image_width,height:%d,%d output_width,height:%d,%d scale_num:%d scale_denom:%d&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.image_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.image_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.output_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.output_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_num,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_denom);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_calc_output_dimensions(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ZZZ: jpeg_info:image_width,height:%d,%d output_width,height:%d,%d scale_num:%d scale_denom:%d&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.image_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.image_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.output_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.output_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_num,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_denom);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;縮小では &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt; まで scaling decode が効く&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ convert -define jpeg:size=8x8 -resize 8x8 8000x8000.jpg 8x8.jpg
AAA: jpeg_info:image_width,height:8000,8000 output_width,height:8000,8000 scale_num:1 scale_denom:1000
ZZZ: jpeg_info:image_width,height:8000,8000 output_width,height:1000,1000 scale_num:1 scale_denom:1000
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;拡大では 2倍までしか効かない&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ convert -define jpeg:size=8000x8000 -resize 8000x8000 8x8.jpg 8000x8000.jpg
AAA: jpeg_info:image_width,height:8,8 output_width,height:8,8 scale_num:1 scale_denom:0
ZZZ: jpeg_info:image_width,height:8,8 output_width,height:16,16 scale_num:1 scale_denom:0
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;

&lt;p&gt;拡大時もそんなに極端にメモリは食わないはずですが、例のブログでは 1.5 倍使うという報告もありますし、2倍か3倍以上小さくリサイズする時だけ -define jpeg:size をつけるよう気をつければ良いと思います。ただしリサイズアルゴリズムとは処理が異なるので、画質的に大丈夫か確認した方が良いでしょう。&lt;/p&gt;

&lt;h1 id=&#34;scaling-の該当コード&#34;&gt;scaling の該当コード&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gt.awm.jp/ImageMagick-6.9.3-0/S/1372.html#L1105&#34;&gt;http://gt.awm.jp/ImageMagick-6.9.3-0/S/1372.html#L1105&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ReadJPEGImage (coders/jpeg.c)
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_num&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1U&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_denom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_factor;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_calc_output_dimensions(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(scale_num/scale_denom) 倍で変換するので、縮小しか対応していないように見えますが。libjpeg の中でよしなに処理してくれるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gt.awm.jp/jpeg-8/S/85.html#L52&#34;&gt;http://gt.awm.jp/jpeg-8/S/85.html#L52&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;jpeg_core_output_dimensions
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;/* Compute actual output image dimensions and DCT scaling choices. */&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_num&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_denom)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;/* Provide 1/block_size scaling */&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_width&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(JDIMENSION)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jdiv_round_up((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_height&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(JDIMENSION)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jdiv_round_up((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;min_DCT_h_scaled_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;min_DCT_v_scaled_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_num&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_denom&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;/* Provide 2/block_size scaling */&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_width&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(JDIMENSION)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jdiv_round_up((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_width&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2L&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_height&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(JDIMENSION)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jdiv_round_up((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_height&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2L&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;min_DCT_h_scaled_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;min_DCT_v_scaled_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_num&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_denom&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この 2/block_size scaling の条件にマッチしたのかなと予想してます。&lt;/p&gt;

&lt;h1 id=&#34;参考-url&#34;&gt;参考 URL&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Libjpeg&#34;&gt;https://en.wikipedia.org/wiki/Libjpeg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JPEG tutorial

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cl.cam.ac.uk/teaching/1011/R08/jpeg/acs10-jpeg.pdf&#34;&gt;https://www.cl.cam.ac.uk/teaching/1011/R08/jpeg/acs10-jpeg.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;本当は速いImageMagick: サムネイル画像生成を10倍速くする方法

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mirakui.com/entry/20110123/1295795409&#34;&gt;http://blog.mirakui.com/entry/20110123/1295795409&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JPEGヒント(scale denom)とは

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kkoudev.github.io/blog/2014/06/15/imlib2/&#34;&gt;http://kkoudev.github.io/blog/2014/06/15/imlib2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JPEG ライブラリを試す

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mibai.tec.u-ryukyu.ac.jp/~oshiro/Doc/misc/Jpeg-lib/&#34;&gt;http://mibai.tec.u-ryukyu.ac.jp/~oshiro/Doc/misc/Jpeg-lib/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New djpeg -scale N/8 with all N=1&amp;hellip;16 feature

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jpegclub.org/djpeg/&#34;&gt;http://jpegclub.org/djpeg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JPEG Exif Orientation の操作</title>
      <link>https://blog.awm.jp/2016/01/07/orient/</link>
      <pubDate>Thu, 07 Jan 2016 00:34:42 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/07/orient/</guid>
      <description>

&lt;h1 id=&#34;jpeg-exif-orientation-の操作&#34;&gt;JPEG Exif Orientation の操作&lt;/h1&gt;

&lt;h2 id=&#34;orientation-とは&#34;&gt;Orientation とは&lt;/h2&gt;

&lt;p&gt;JPEG には画像データそのものと別に Exif 形式で日付、撮影条件、場所といった情報をタグ形式で入れる事が出来ます。
その中に、画像を表示する時に行う回転を表す Orientation タグがあります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;../jpeg-exif-orient.png&#34; /&gt; &lt;/br&gt;
引用: &lt;a href=&#34;https://speakerdeck.com/yoya/jpegmeta&#34;&gt;https://speakerdeck.com/yoya/jpegmeta&lt;/a&gt;
 &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;例えばカメラを横倒しにして撮影した場合は、カメラに映る画像データも横倒しに映ります。
撮影した時のカメラの向きを元に Orientation タグを付与する事で、表示する時に画像の向きを直す事ができます。
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/digicame.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;ImageMagick の identify コマンドで Orientation の値を参照出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ identify -verbose orient-6.jpg | grep Orient
  Orientation: RightTop
    exif:Orientation: 6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;orientation-の数値の対応&#34;&gt;Orientation の数値の対応&lt;/h2&gt;

&lt;p&gt;以下の画像は Orientation に各値を設定すると、全て 1 の向きに補正されて表示される画像です。(古いビューアだと補正しない事もあります)&lt;/p&gt;

&lt;h3 id=&#34;早見表1&#34;&gt;早見表1&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-2-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-2-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-3-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-3-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-4-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-4-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-5-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-5-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;6: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-6-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-6-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;7: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-7-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-7-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;8: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-8-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-8-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(補正で行う回転する向きでない事に注意。これらはその真逆です)&lt;/p&gt;

&lt;p&gt;尚、画像の反転が定義されているのは、鏡のように映るインカメラ用だと思われます。[要出典]&lt;/p&gt;

&lt;p&gt;こうして素直に 1 から順に並べてみると、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; * 1 を基準として、
 * 1の左右反転 =&amp;gt; 2 、1の上下反転 =&amp;gt; 4、 1の左右と上下反転 =&amp;gt; 3、
 * 1,2,3,4 各々を斜め軸で反転 =&amp;gt; 5,6,7,8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていて、右回転、左回転の定義が不要なのが面白いです。尚、1を引くとビット毎に、どの軸で鏡像回転するかのフラグになります)&lt;/p&gt;

&lt;p&gt;これらは処理系の都合であって、実際には以下のように利用されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; * 1 を基準として、90度回転 =&amp;gt; 8, 180度回転 = 3, 270度回転 =&amp;gt; 6
 * 1 の鏡反転 =&amp;gt; 2、8 の鏡反転 =&amp;gt; 5, 3の鏡反転=&amp;gt; 4、6 の鏡反転 =&amp;gt; 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;早見表2&#34;&gt;早見表2&lt;/h3&gt;

&lt;p&gt;変換の方向がわかりやすい図もつけます。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Orient&lt;/th&gt;
&lt;th&gt;画像の実データ&lt;/th&gt;
&lt;th&gt;Exif-Orient を解釈して表示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-2-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-2-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-3-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-3-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-4-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-4-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-5-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-5-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-6-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-6-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-7-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-7-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-8-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-8-strip.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1-strip.jpg&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;編集ツール&#34;&gt;編集ツール&lt;/h2&gt;

&lt;p&gt;Exif タグはツールを使って自由に入れ替えができるので、Orientation 検証画像を自分で作る事が出来ます。&lt;/p&gt;

&lt;p&gt;ExifTool が便利なのでこちらを使う事にします。&lt;/p&gt;

&lt;h1 id=&#34;exiftool&#34;&gt;ExifTool&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sno.phy.queensu.ca/~phil/exiftool/&#34;&gt;http://www.sno.phy.queensu.ca/~phil/exiftool/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;MacOS は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install exiftool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Debian Linux は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# apt-get install exiftool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインストールできます。&lt;/p&gt;

&lt;p&gt;Perl なので他のプラットフォームでも入れるのは難しくないでしょう。&lt;/p&gt;

&lt;h2 id=&#34;exiftool-の使い方&#34;&gt;ExifTool の使い方&lt;/h2&gt;

&lt;p&gt;Orientation は以下のコマンドで書き換えられます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ exiftool -Orientation=6 -n test.jpg
test.jpg
    1 image files updated
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめて-1-8を設定する&#34;&gt;まとめて 1〜8を設定する&lt;/h2&gt;

&lt;p&gt;ついでに表示の時に元の画像の向きを維持するようにします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/misc/blob/master/bash/severalorientation.sh&#34;&gt;https://github.com/yoya/misc/blob/master/bash/severalorientation.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#! /bin/bash&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; -u

&lt;span style=&#34;color: #f8f8f2&#34;&gt;ORIGINAL_SUFFIX&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;_original&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# exiftool の-delete-original が動かないので&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;SUFFIX&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.jpg&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$1&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;PREFIX&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;basename &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$SUFFIX&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;seq &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;FILE_ORIENT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$PREFIX&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$i$SUFFIX&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt;
  cp &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt;
  exiftool -Orientation&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$i&lt;/span&gt; -n &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt;
  rm &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT$ORIGINAL_SUFFIX&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$i&lt;/span&gt; in
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; mogrify             -flop &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;;&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; mogrify       -flip -flop &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;;&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; mogrify             -flop &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;;&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; mogrify -rotate  &lt;span style=&#34;color: #ae81ff&#34;&gt;90&lt;/span&gt; -flop &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;;&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; mogrify -rotate -90       &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;;&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; mogrify -rotate -90 -flop &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;;&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; mogrify -rotate  &lt;span style=&#34;color: #ae81ff&#34;&gt;90&lt;/span&gt;       &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILE_ORIENT&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;esac&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;実行&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ severalorientation.sh orient.jpg
$ identify -verbose orient-?.jpg | grep Orient
  Orientation: TopLeft
    exif:Orientation: 1
  Orientation: TopRight
    exif:Orientation: 2
  Orientation: BottomRight
    exif:Orientation: 3
  Orientation: BottomLeft
    exif:Orientation: 4
  Orientation: LeftTop
    exif:Orientation: 5
  Orientation: RightTop
    exif:Orientation: 6
  Orientation: RightBottom
    exif:Orientation: 7
  Orientation: LeftBottom
    exif:Orientation: 8
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;結果&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-1.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-1.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-2.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-2.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-3.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-3.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-4.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-4.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-5.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-5.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;6: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-6.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-6.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;7: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-7.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-7.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;8: &lt;a href=&#34;https://blog.awm.jp/2016/01/07/orient-8.jpg&#34;&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/07/orient-8.jpg&#34; /&gt; &lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;テーブルの中では傾いてますが、画像をクリックすると向きが補正された画像が出ます。(テーブルに表示するのもクリックして表示されるのも同じ JPEG 画像です)&lt;/p&gt;

&lt;p&gt;ちなみに、前半の方の表に貼り付けた画像は、更に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in *-?.jpg ; do
  o=`basename $i .jpg` ;
  convert -strip $i $o-strip.jpg;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として Exif タグを削除したものです。&lt;/p&gt;

&lt;h1 id=&#34;参考-url&#34;&gt;参考 URL&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Exif 2.3 規格書

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cipa.jp/std/documents/j/DC-008-2012_J.pdf&#34;&gt;http://www.cipa.jp/std/documents/j/DC-008-2012_J.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ExifのOrientationを見て画像を回転させる

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hackmylife.net/archives/7400448.html&#34;&gt;http://hackmylife.net/archives/7400448.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>