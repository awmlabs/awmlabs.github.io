<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Imagemagick on awm-Tech</title>
    <link>https://blog.awm.jp/tags/imagemagick/</link>
    <description>Recent content in Imagemagick on awm-Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; awm.jp</copyright>
    <lastBuildDate>Mon, 25 Jan 2016 02:01:09 +0900</lastBuildDate>
    <atom:link href="https://blog.awm.jp/tags/imagemagick/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>透明度を含む画像を JPEG に変換する時の背景色</title>
      <link>https://blog.awm.jp/2016/01/25/flatten/</link>
      <pubDate>Mon, 25 Jan 2016 02:01:09 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/25/flatten/</guid>
      <description>

&lt;h1 id=&#34;透明度を含む画像を-jpeg-に変換する時の背景色:84783e3316737bab6c31917cbcac1c95&#34;&gt;透明度を含む画像を JPEG に変換する時の背景色&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cybozu.io/entry/2016/01/06/080000&#34;&gt;http://blog.cybozu.io/entry/2016/01/06/080000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;透過画像をそのまま JPEG に変換すると背景色が黒になるので、
白にしたい場合は同じサイズにリサイズしましょう。
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;実際のところ:84783e3316737bab6c31917cbcac1c95&#34;&gt;実際のところ&lt;/h1&gt;

&lt;p&gt;そのまま JPEG に変換すると背景色は白になります。&lt;/p&gt;

&lt;pre&gt;
$ convert in.png out.jpg &lt;img src=&#34;../logowhite_37p.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;-resize でサイズが変わった時に黒くなります。&lt;/p&gt;

&lt;pre&gt;
$ identify in.png
awmcorp_logo.png PNG 300x300 300x300+0+0 16-bit sRGB 21.1KB 0.000u 0:00.000
$ convert in.png -resize 300x300 out.jpg &lt;img src=&#34;../logowhite_37p.jpg&#34; /&gt;
$ convert in.png -resize 200x200 out.jpg &lt;img src=&#34;../logoblack_hh.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;詳しくは追っていませんが、リサイズでピクセルの補完アルゴリズムが働く際に黒(0,0,0)を元に加色混合でピクセルを計算していくのだろうと想像してます。(要調査)&lt;/p&gt;

&lt;h1 id=&#34;extent-で背景を白にできる:84783e3316737bab6c31917cbcac1c95&#34;&gt;-extent で背景を白にできる&lt;/h1&gt;

&lt;pre&gt;
$ convert in.png -resize 200x200 out.jpg &lt;img src=&#34;../logoblack_hh.jpg&#34; /&gt;
$ convert in.png -resize 200x200 -extent 200x200 out.jpg &lt;img src=&#34;../logowhite_hh.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;-extent は描画領域であるスクリーンを拡大する命令です。拡大された白いキャンバスと画像のレイヤーが別なので重ね合わせた結果、背景が白くなります。&lt;/p&gt;

&lt;pre&gt;
$ convert in.png -resize 200x200 –extent 400x400 out.jpg &lt;img src=&#34;../logowhiteExtent_hh.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;h1 id=&#34;flatten-レイヤーを重ねる命令-が正しい:84783e3316737bab6c31917cbcac1c95&#34;&gt;-flatten (レイヤーを重ねる命令)が正しい&lt;/h1&gt;

&lt;p&gt;-extent でも同じ結果になるので重箱の隅をついてるようですが、レイヤーを重ねれば良いので -flatten を使うのが意味的に正しいと思います。&lt;/p&gt;

&lt;pre&gt;
$ convert in.png -resize 200x200 –flatten out.jpg &lt;img src=&#34;../logowhite_hh.jpg&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;-background も有効です。&lt;/p&gt;

&lt;pre&gt;
$ convert in.png -resize 200x200 -background red –flatten out.jpg &lt;img src=&#34;../logored_hh.jpg&#34; /&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ImageMagick で画像を比較する</title>
      <link>https://blog.awm.jp/2016/01/25/diff/</link>
      <pubDate>Mon, 25 Jan 2016 01:51:23 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/25/diff/</guid>
      <description>

&lt;h1 id=&#34;imagemagick-で画像を比較する:943e202c7525f67778c9e3665dbf8092&#34;&gt;ImageMagick で画像を比較する&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cybozu.io/entry/2016/01/06/080000&#34;&gt;http://blog.cybozu.io/entry/2016/01/06/080000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;サムネイル周りに何か修正を入れたら修正前後の画像を比較しましょう。
機械によるバイト列の比較では画像の良し悪しがわかりません。
頼れるのは人間の眼だけです。肉眼で確認しましょう。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;絵の間違い探しでの見落としを想像するに、画像認識の個人差はとても大きいです。
最終的な判断は人間の眼とはいえ、その前段階のサポートがあると良いでしょう。&lt;/p&gt;

&lt;p&gt;計算でなるべく違いのありそうな画像やその違いのある場所を炙り出します。
以下のサイトの説明が分かりやすいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2枚の画像のdiff(差分)を超簡単に調べる方法

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mirakui.com/entry/20110326/1301111196&#34;&gt;http://blog.mirakui.com/entry/20110326/1301111196&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;画像の差分:943e202c7525f67778c9e3665dbf8092&#34;&gt;画像の差分&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;difference&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-compose difference と -auto-level を使うと、違いがあるかもしれない箇所を浮き彫りにできます。&lt;/p&gt;

&lt;pre&gt;
$ convert image.jpg image.gif
$ composite &lt;u&gt;-compose difference&lt;/u&gt; image.jpg image.gif  diff.png
$ mogrify -auto-level  diff.png  #差分画像を明るくする
&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../image7p20.jpg&#34; /&gt; &lt;img src=&#34;../image8p20.gif&#34; /&gt; &lt;img src=&#34;../image9p20.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;全体的に画質の劣化が激しいですが、特に風鈴のハイライトの色味が変わっているのが分かります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;identify mean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;difference と idenfity mean を組み合わせると画像の違いの度合いを算出できます。&lt;/p&gt;

&lt;pre&gt;
$ for i in *-logo.gif ; do
composite -compose difference 6.9.3-0-logo.gif $i t.png ;
identify -format &#34;%[mean]&#34; t.png  ; echo &#34; : $i&#34; ; done
&lt;/pre&gt;
のように実行すると、
&lt;pre&gt;
569.07 : 6.6.9-6-logo.gif
569.07 : 6.6.9-7-logo.gif
&lt;b&gt;9533.31&lt;/b&gt; : 6.6.9-8-logo.gif   &lt;=  差分の大きなバージョン発見
569.07 : 6.6.9-9-logo.gif
569.07 : 6.7.0-0-logo.gif
&lt;/pre&gt;

&lt;p&gt;以上の方法は PSNR 方式に近いのですが、人の目で見る違いと掛け離れるケースが多くあり、SSIM 方式の方が主流です。&lt;/p&gt;

&lt;h1 id=&#34;ssim:943e202c7525f67778c9e3665dbf8092&#34;&gt;SSIM&lt;/h1&gt;

&lt;p&gt;画質の劣化の指標でよく使われる値で、その簡易版が ffmpeg で計算できます。類似度なので 1.0 が最大値で、違いがある分減って 0 に近づきます。&lt;/p&gt;

&lt;p&gt;2.6 系にはない機能です。2.8 系の ffmpeg でお試し下さい。&lt;/p&gt;

&lt;pre&gt;
$ ffmpeg -i image7.jpg -i image8.gif -filter_complex ssim -an -f null -
＜略＞
[Parsed_ssim_0 @ 0x7fe623c00340] SSIM Y:0.886660 U:0.849172 V:0.840235 All:0.858689 (8.498241)
&lt;/pre&gt;

&lt;p&gt;１つ目に渡した入力画像が JPEG なので YUV 別の SSIM 値と合わせた SSIM 値が表示されています。これが GIF や PNG だと RGB別になります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>もうサムネイルで泣かないための ImageMagick ノウハウ集に一言</title>
      <link>https://blog.awm.jp/2016/01/25/imagemagick/</link>
      <pubDate>Mon, 25 Jan 2016 00:32:35 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/25/imagemagick/</guid>
      <description>

&lt;h1 id=&#34;もうサムネイルで泣かないための-imagemagick-ノウハウ集に一言:a5dbf9f090c2c436a165e06d8b799a15&#34;&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集に一言&lt;/h1&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe allowfullscreen=&#34;true&#34; allowtransparency=&#34;true&#34; frameborder=&#34;0&#34; height=&#34;497&#34; mozallowfullscreen=&#34;true&#34; src=&#34;//speakerdeck.com/player/248da47aa52d48ae8d57e8656f117997&#34; style=&#34;border:0; padding:0; margin:0; background:transparent;&#34; webkitallowfullscreen=&#34;true&#34; width=&#34;578&#34;&gt;&lt;/iframe&gt;
&lt;a href=&#34;https://speakerdeck.com/yoya/imagemagick-knowhow&#34;&gt;https://speakerdeck.com/yoya/imagemagick-knowhow&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;発表スライドだと URL のリンクが辿りにくいのとブログ形式で読みたいとの声があり、ほぼ同じ内容のエントリを作りました。&lt;/p&gt;

&lt;h1 id=&#34;一部界隈で話題:a5dbf9f090c2c436a165e06d8b799a15&#34;&gt;一部界隈で話題&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cybozu.io/entry/2016/01/06/080000&#34;&gt;http://blog.cybozu.io/entry/2016/01/06/080000&lt;/a&gt;
&lt;center&gt; &lt;img src=&#34;../cybozuinsideout.png&#34; /&gt; &lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;色んなノウハウが詰まっていて素晴らしい記事です。便乗して幾つか勝手に補足してみます。&lt;/p&gt;

&lt;h1 id=&#34;良いノウハウ:a5dbf9f090c2c436a165e06d8b799a15&#34;&gt;良いノウハウ&lt;/h1&gt;

&lt;h2 id=&#34;リリース大量消費に注意:a5dbf9f090c2c436a165e06d8b799a15&#34;&gt;リリース大量消費に注意&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;limit 大事 (特にユーザ投稿画像を扱う場合)
&lt;pre&gt;
$ convert -limit &lt;u&gt;memory 256MB&lt;/u&gt; -limit &lt;u&gt;disk 0&lt;/u&gt; src.jpg dst.png
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;画像や処理によって予期しない量のメモリを使われる事があるので、-limit memory で制限をかけるのと、仮にディスクが使われた日には極端に遅くなるので -limit disk も必要です。&lt;/p&gt;

&lt;h2 id=&#34;imagemagick-のオプションの順序に注意:a5dbf9f090c2c436a165e06d8b799a15&#34;&gt;ImageMagick のオプションの順序に注意&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick は引数を先頭から順に命令実行する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のように、for ループで引数を先頭から順番に見て、オプションに対応する関数を個別に実行します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wand/mogrify.c (convert も引数チェック後にこの関数を呼ぶ)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;WandExport&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MagickBooleanType&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MogrifyImage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(ImageInfo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_info,&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,Image&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image,ExceptionInfo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;exception)&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;ssize_t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[i];&lt;/span&gt;
    &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(LocaleCompare(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;repage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,option&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
              &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ParseAbsoluteGeometry(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;0x0+0+0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;page);&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
              &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ResetImagePage(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image,argv[i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;InheritException(exception,&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;exception);&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;逆にいうと順序次第で組み合わせ的に色んな操作が可能になるという事です。&lt;/p&gt;

&lt;h1 id=&#34;補足したい項目:a5dbf9f090c2c436a165e06d8b799a15&#34;&gt;補足したい項目&lt;/h1&gt;

&lt;p&gt;対応するブログのエントリを並べます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;画像比較は人間の眼で行うべし

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/25/diff/&#34;&gt;http://blog.awm.jp/2016/01/25/diff/&lt;/a&gt; ImageMagick で画像を比較する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Orientation を考慮しよう

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/06/orient/&#34;&gt;http://blog.awm.jp/2016/01/06/orient/&lt;/a&gt; -auto-orient でオフセットがズレる件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;透過画像を考慮しよう

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/25/flatten/&#34;&gt;http://blog.awm.jp/2016/01/25/flatten/&lt;/a&gt; 透明度を含む画像を JPEG に変換する時の背景色&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;グレイスケール画像を考慮しよう

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/06/gray/&#34;&gt;http://blog.awm.jp/2016/01/06/gray/&lt;/a&gt; グレー形式JPEGをPNGに変換すると暗くなる件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-define jpeg:size に注意

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/01/08/jpeghint/&#34;&gt;http://blog.awm.jp/2016/01/08/jpeghint/&lt;/a&gt; JPEG の size hinting について&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上です。もし、お役に立つ事があれば幸いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JPEG の size hinting について</title>
      <link>https://blog.awm.jp/2016/01/08/jpeghint/</link>
      <pubDate>Fri, 08 Jan 2016 23:40:32 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/08/jpeghint/</guid>
      <description>

&lt;p&gt;何度もしつこいですが、以下の記事の -define jpeg:size への勝手な補足。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cybozu.io/entry/2016/01/06/080000&#34;&gt;http://blog.cybozu.io/entry/2016/01/06/080000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;いつでもつければ良いというものではないので注意しましょう。
弊社では、このオプションはサービスの安定運用のためには無用と判断し、
現在このオプションは利用していません。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意する点ではありますが、この結論では「JPEG size hinting は危険なので使わない方が良い」と誤解する人が出そうなので勝手に補足します。&lt;/p&gt;

&lt;h1 id=&#34;define-jpeg-size-とは:8297ce3a5ed4594f91a307954f292784&#34;&gt;-define jpeg:size とは？&lt;/h1&gt;

&lt;h2 id=&#34;jpeg-のデータの持ち方:8297ce3a5ed4594f91a307954f292784&#34;&gt;JPEG のデータの持ち方&lt;/h2&gt;

&lt;p&gt;JPEG は画像の周波数成分のデータを保持していて、JPEG の Decode では波を合成する事でビットマップ画像に戻します。尚、8x8 単位で画像をグリッド分割してこの処理をします。&lt;/p&gt;

&lt;p&gt;(参考イメージ)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/dct8x8-600.png&#34; /&gt; &lt;/center&gt;
引用) &lt;a href=&#34;https://www.cl.cam.ac.uk/teaching/1011/R08/jpeg/acs10-jpeg.pdf&#34;&gt;https://www.cl.cam.ac.uk/teaching/1011/R08/jpeg/acs10-jpeg.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;scaling-指定で-decode:8297ce3a5ed4594f91a307954f292784&#34;&gt;scaling 指定で Decode&lt;/h2&gt;

&lt;p&gt;元のサイズの画像データに変換する場合と比べて、手間を増やさず &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;, &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;, &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt; サイズの画像データに変換できます。高周波成分を見なくて済む上に変換後のサイズが小さい事から、むしろより少ない手間でさえあります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/dct8x8-4-1-600.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;(ImageMagick から利用する libjpeg で 2,4,8 のように 2^n に限っているのは、波の合成(iDCT)の高速化で FFT を使う都合か。もしくは波のループの端が合わないか。)&lt;/p&gt;

&lt;h2 id=&#34;やっている事:8297ce3a5ed4594f91a307954f292784&#34;&gt;やっている事&lt;/h2&gt;

&lt;p&gt;リサイズ後の大きさに近くなるよう scale factor を指定して JPEG を Decode し。そこからリサイズする事で、メモリやCPUを節約します。&lt;/p&gt;

&lt;h1 id=&#34;jpeg-size-hinting-の動作イメージ:8297ce3a5ed4594f91a307954f292784&#34;&gt;JPEG size hinting の動作イメージ&lt;/h1&gt;

&lt;p&gt;詳しくはこちらを参照して下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本当は速いImageMagick: サムネイル画像生成を10倍速くする方法

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mirakui.com/entry/20110123/1295795409&#34;&gt;http://blog.mirakui.com/entry/20110123/1295795409&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;小さくリサイズする場合:8297ce3a5ed4594f91a307954f292784&#34;&gt;小さくリサイズする場合&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通にリサイズ (-define jpeg:size 無し)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize1.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;小さいサイズでデコードしてリサイズ (-define jpeg:size 有り)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize2.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;処理は減るしメモリも少ないし、パフォーマンス的には良い事づくめ。&lt;/p&gt;

&lt;h2 id=&#34;大きくリサイズする場合-予想:8297ce3a5ed4594f91a307954f292784&#34;&gt;大きくリサイズする場合 (予想)&lt;/h2&gt;

&lt;p&gt;問題にしているケースです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通にリサイズ (-define jpeg:size 無し)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize3.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大きなサイズでデコードしてリサイズ (-define jpeg:size 有り)
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize4.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という動作が予想できます。1.5倍のメモリを使うという話も 2, 4, 8 倍で丁度良いサイズになる事はあまりないので、そこそこ話が合います。&lt;/p&gt;

&lt;h3 id=&#34;実際の動き:8297ce3a5ed4594f91a307954f292784&#34;&gt;実際の動き&lt;/h3&gt;

&lt;p&gt;jpeg_info の output_width, output_height を表示させて確認したところ、拡大する時には最大でも2倍指定で Decode するようです。どんなに元画像とのサイズの差をつけても 4, 8 倍にはなりませんでした。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/08/resize5.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fprintf で表示させる&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;      &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AAA: jpeg_info:image_width,height:%d,%d output_width,height:%d,%d scale_num:%d scale_denom:%d&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.image_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.image_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.output_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.output_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_num,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_denom);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_calc_output_dimensions(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ZZZ: jpeg_info:image_width,height:%d,%d output_width,height:%d,%d scale_num:%d scale_denom:%d&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.image_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.image_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.output_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.output_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_num,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_denom);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;縮小では &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt; まで scaling decode が効く&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ convert -define jpeg:size=8x8 -resize 8x8 8000x8000.jpg 8x8.jpg
AAA: jpeg_info:image_width,height:8000,8000 output_width,height:8000,8000 scale_num:1 scale_denom:1000
ZZZ: jpeg_info:image_width,height:8000,8000 output_width,height:1000,1000 scale_num:1 scale_denom:1000
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;拡大では 2倍までしか効かない&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ convert -define jpeg:size=8000x8000 -resize 8000x8000 8x8.jpg 8000x8000.jpg
AAA: jpeg_info:image_width,height:8,8 output_width,height:8,8 scale_num:1 scale_denom:0
ZZZ: jpeg_info:image_width,height:8,8 output_width,height:16,16 scale_num:1 scale_denom:0
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;結論:8297ce3a5ed4594f91a307954f292784&#34;&gt;結論&lt;/h1&gt;

&lt;p&gt;拡大時もそんなに極端にメモリは食わないはずですが、例のブログでは 1.5 倍使うという報告もありますし、2倍か3倍以上小さくリサイズする時だけ -define jpeg:size をつけるよう気をつければ良いと思います。ただしリサイズアルゴリズムとは処理が異なるので、画質的に大丈夫か確認した方が良いでしょう。&lt;/p&gt;

&lt;h1 id=&#34;scaling-の該当コード:8297ce3a5ed4594f91a307954f292784&#34;&gt;scaling の該当コード&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gt.awm.jp/ImageMagick-6.9.3-0/S/1372.html#L1105&#34;&gt;http://gt.awm.jp/ImageMagick-6.9.3-0/S/1372.html#L1105&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ReadJPEGImage (coders/jpeg.c)
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_num&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1U&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info.scale_denom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_factor;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_calc_output_dimensions(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;jpeg_info);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(scale_num/scale_denom) 倍で変換するので、縮小しか対応していないように見えますが。libjpeg の中でよしなに処理してくれるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gt.awm.jp/jpeg-8/S/85.html#L52&#34;&gt;http://gt.awm.jp/jpeg-8/S/85.html#L52&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;jpeg_core_output_dimensions
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;/* Compute actual output image dimensions and DCT scaling choices. */&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_num&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_denom)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;/* Provide 1/block_size scaling */&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_width&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(JDIMENSION)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jdiv_round_up((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_width,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_height&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(JDIMENSION)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jdiv_round_up((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_height,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;min_DCT_h_scaled_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;min_DCT_v_scaled_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_num&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_denom&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;/* Provide 2/block_size scaling */&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_width&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(JDIMENSION)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jdiv_round_up((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_width&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2L&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_height&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(JDIMENSION)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;jdiv_round_up((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_height&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2L&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;min_DCT_h_scaled_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;min_DCT_v_scaled_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_num&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;block_size&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cinfo&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scale_denom&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この 2/block_size scaling の条件にマッチしたのかなと予想してます。&lt;/p&gt;

&lt;h1 id=&#34;参考-url:8297ce3a5ed4594f91a307954f292784&#34;&gt;参考 URL&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Libjpeg&#34;&gt;https://en.wikipedia.org/wiki/Libjpeg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JPEG tutorial

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cl.cam.ac.uk/teaching/1011/R08/jpeg/acs10-jpeg.pdf&#34;&gt;https://www.cl.cam.ac.uk/teaching/1011/R08/jpeg/acs10-jpeg.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;本当は速いImageMagick: サムネイル画像生成を10倍速くする方法

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mirakui.com/entry/20110123/1295795409&#34;&gt;http://blog.mirakui.com/entry/20110123/1295795409&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JPEGヒント(scale denom)とは

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kkoudev.github.io/blog/2014/06/15/imlib2/&#34;&gt;http://kkoudev.github.io/blog/2014/06/15/imlib2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JPEG ライブラリを試す

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mibai.tec.u-ryukyu.ac.jp/~oshiro/Doc/misc/Jpeg-lib/&#34;&gt;http://mibai.tec.u-ryukyu.ac.jp/~oshiro/Doc/misc/Jpeg-lib/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New djpeg -scale N/8 with all N=1&amp;hellip;16 feature

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jpegclub.org/djpeg/&#34;&gt;http://jpegclub.org/djpeg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>グレー形式JPEGをPNGに変換すると暗くなる件</title>
      <link>https://blog.awm.jp/2016/01/06/gray/</link>
      <pubDate>Wed, 06 Jan 2016 16:27:11 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/06/gray/</guid>
      <description>

&lt;h1 id=&#34;グレー形式jpegをpngに変換すると暗くなる件:4b97ec97268e2c8df1249bdff4ee48d9&#34;&gt;グレー形式JPEGをPNGに変換すると暗くなる件&lt;/h1&gt;

&lt;p&gt;画像サムネール界隈で話題のエントリ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;もうサムネイルで泣かないための ImageMagick ノウハウ集

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cybozu.io/entry/2016/01/06/080000&#34;&gt;http://blog.cybozu.io/entry/2016/01/06/080000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-limit memory でのリソース制限や jpeghint が拡大の時はまずいという問題の指摘等、素晴らしいエントリですが、少し気になる事が。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;グレイスケール画像を考慮しよう

白黒画像を PNG に変換すると、元画像より暗くなる場合があります。
これは減色アルゴリズムによる挙動と思われます。
JPEG はフルカラー画像を扱えますが、通常の PNG だと 256 色しか扱えないのです。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;減色処理でここまで暗くなるのは違和感ありますし、出力で PNG8 がデフォというのも妙なので調べた所、少し前にあった ImageMagick のバグだったので話を整理しておきます。&lt;/p&gt;

&lt;h1 id=&#34;いつ頃のバグ:4b97ec97268e2c8df1249bdff4ee48d9&#34;&gt;いつ頃のバグ&lt;/h1&gt;

&lt;p&gt;6.8.0-0 〜 6.8.0-7 の間のバグです。
6.8.0 で RGB互換の色空間処理を整理していた時のデグレードだと思われます。&lt;/p&gt;

&lt;p&gt;6.8.0-8 で修正済みです。&lt;/p&gt;

&lt;h1 id=&#34;不具合修正のコード差分:4b97ec97268e2c8df1249bdff4ee48d9&#34;&gt;不具合修正のコード差分&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ diff -rwb  ImageMagick-6.8.0-[78]/coders/png.c
8305,8306c8305,8306
&amp;lt;          if ((IssRGBCompatibleColorspace(image-&amp;gt;colorspace) == MagickFalse) &amp;amp;&amp;amp;
&amp;lt;              (IssRGBColorspace(image-&amp;gt;colorspace) == MagickFalse))
---
&amp;gt;          if ((IssRGBCompatibleColorspace(image-&amp;gt;colorspace) == MagickFalse) ||
&amp;gt;              (IssRGBColorspace(image-&amp;gt;colorspace) != MagickFalse))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あ、はい。って感じです。&lt;/p&gt;

&lt;h1 id=&#34;png8:4b97ec97268e2c8df1249bdff4ee48d9&#34;&gt;PNG8&lt;/h1&gt;

&lt;p&gt;もう一点、グレー形式JPEG を PNG に変換するとパレット形式(PNG)になるとの事ですが実はバージョンに依ります。気まぐれで本当にすみません。&lt;/p&gt;

&lt;p&gt;直近だとこんな対応。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;バージョン&lt;/th&gt;
&lt;th&gt;形式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;6.9.1-10&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.9.1-2&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.9.1-3&lt;/td&gt;
&lt;td&gt;GRB (PNG24)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.9.1-4&lt;/td&gt;
&lt;td&gt;GRB (PNG24)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.9.1-5&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.9.1-6&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.9.1-7&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.9.1-8&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.9.1-9&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;では、不具合のあった 6.8.x の頃はどうだったかというと。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;バージョン&lt;/th&gt;
&lt;th&gt;形式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;6.8.0-0&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-1&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-2&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-3&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-4&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-5&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-6&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-7&lt;/td&gt;
&lt;td&gt;GRAY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-8&lt;/td&gt;
&lt;td&gt;PALETTE (PNG8)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-9&lt;/td&gt;
&lt;td&gt;PALETTE (PNG8)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6.8.0-10&lt;/td&gt;
&lt;td&gt;PALETTE (PNG8)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;あれ。。不具合のあった 6.8.0-0 〜 6.8.0-7 は GRAY 形式。&lt;/p&gt;

&lt;p&gt;多分ですけど。グレー画像が暗くなる時に使った ImageMagick と、パレット形式だと確認した時のバージョンが違うのではないかなーと思ってます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ImageMagick でサムネール画像生成</title>
      <link>https://blog.awm.jp/2016/01/05/thumbnail/</link>
      <pubDate>Tue, 05 Jan 2016 22:59:30 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/05/thumbnail/</guid>
      <description>

&lt;h1 id=&#34;imagemagick-でサムネール画像生成:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;ImageMagick でサムネール画像生成&lt;/h1&gt;

&lt;p&gt;初めて ImageMagick でサムネール画像を作成する人向けの簡単な紹介です。&lt;/p&gt;

&lt;p&gt;ImageMagick の convert コマンドでリサイズするのに色んなオプションがあって、自分は -resize を使う事が多いですが、今回は余計なメタデータを削除してくれる -thumbnail を使ってみます。&lt;/p&gt;

&lt;p&gt;オリジナル画像はこちらをを使います。
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/05/saitama.jpg&#34; alt=&#34;saitama&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;とりあえず小さくする:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;とりあえず小さくする&lt;/h1&gt;

&lt;p&gt;手始めに適当なサイズ 100x100 を指定してサムネールを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert  saitama.jpg -thumbnail 100x100 saitama_100x100.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/05/saitama_100x100.jpg&#34; alt=&#34;100x100&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;良い感じに変換してくれますが、100x100 を指定したのに 100x76 画像が生成される事に戸惑うでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ identify saitama_100x100.jpg
saitama_100x100.jpg JPEG 100x76 100x76+0+0 8-bit sRGB 3.57KB 0.000u 0:00.000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;単純に 100x100 を指定すると、アスペクト比(縦と横の比率)が変わらないよう調整される為です。&lt;/p&gt;

&lt;h1 id=&#34;リサイズ後のサイズを-100x100-にする:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;リサイズ後のサイズを 100x100 にする&lt;/h1&gt;

&lt;p&gt;アスペクト比を無視して、確実に 100x100 にしたい場合は 100x100! のように後ろに ! をつけます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert  saitama.jpg -thumbnail 100x100! saitama_100x100f.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/05/saitama_100x100f.jpg&#34; alt=&#34;100x100!&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;しかしこれは、恐らく望む結果ではないはずです。&lt;/p&gt;

&lt;h1 id=&#34;アスペクト比を変えずに-100x100-にする:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;アスペクト比を変えずに 100x100 にする&lt;/h1&gt;

&lt;p&gt;そんな矛盾した要求を。。。と一瞬怯みますが、２つ方法を思いつきます。&lt;/p&gt;

&lt;h2 id=&#34;削ってしまう:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;削ってしまう&lt;/h2&gt;

&lt;p&gt;先程の 100x100 指定では縦と横のうち大きい辺を 100 にして、アスペクト比が変わらないように小さな辺を算出しました。&lt;/p&gt;

&lt;p&gt;その逆で、小さい方の辺を 100 にして、アスペクト比固定で 100 を超える大きな辺を作り、その画像の左右または上下を削って 100 に切り詰めるという戦略が取れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert saitama.jpg -thumbnail 100x100^ -gravity center \
	-extent 100x100 saitama_100x100crop.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/05/saitama_100x100crop.jpg&#34; alt=&#34;100x100crop&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;余白をつける:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;余白をつける&lt;/h2&gt;

&lt;p&gt;左右の子達が見切れて可哀想。削っちゃ嫌だ！という要望に応えて削らない方法もあります。余白をつけて適当な色で埋めれば可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert saitama.jpg -thumbnail 100x100 -gravity center \
	-extent 100x100 saitama_100x100extent.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/05/saitama_100x100extent.jpg&#34; alt=&#34;100x100extent&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;余白の色が白で見えにくいので、-background で黒を指定してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert saitama.jpg -thumbnail 100x100 -background black \
	-gravity center -extent 100x100 saitama_100x100black.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/05/saitama_100x100black.jpg&#34; alt=&#34;100x100black&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;丸いアイコン風画像の作り方:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;丸いアイコン風画像の作り方&lt;/h1&gt;

&lt;p&gt;最後に、サムネールとは少し異なりますが丸いアイコン風画像の作り方も紹介します。&lt;/p&gt;

&lt;p&gt;尚、円の外側は透明にしたいので、今回は png を生成します。&lt;/p&gt;

&lt;p&gt;まずは、convert の -draw オプションで丸のクリップ用画像を作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert -size 100x100 xc:none -fill white -draw &amp;quot;circle 50,50,50,0&amp;quot; \
	circle_mask.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/05/circle_mask.png&#34; alt=&#34;circle_mask&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;-compose CopyOpacity を使いクリップ画像を指定する事でクリップが出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert saitama.jpg -thumbnail 100x100 -background white -extent 100x100 \
	circle_mask.png -compose CopyOpacity -composite saitama_icon.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/05/saitama_icon.png&#34; alt=&#34;icon&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;一行にまとめる:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;一行にまとめる&lt;/h2&gt;

&lt;p&gt;カッコを使って入れ子に出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert saitama.jpg -thumbnail 100x100 -background white -extent 100x100 \
  \( -size 100x100 xc:none -fill white -draw &amp;quot;circle 50,50,50,0&amp;quot; \) \
  -compose CopyOpacity -composite saitama_icon.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画像は同じ結果なので省略します。&lt;/p&gt;

&lt;h1 id=&#34;最後に:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;リサイズする時にぼやけたり、色味が物足りなかったり、追加でフィルタをかけたかったりといった時のケアも大事で、ImageMagick なら対応出来ますが、それはまた今度説明します。&lt;/p&gt;

&lt;h1 id=&#34;参考-url:32035ec8aa7ac7a754d0e4d44852406c&#34;&gt;参考 URL&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/Usage/masking/&#34;&gt;http://www.imagemagick.org/Usage/masking/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/script/command-line-processing.php#geometry&#34;&gt;http://www.imagemagick.org/script/command-line-processing.php#geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Imagemagick - Ways of cropping an image to a circle (or other shape).

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://daemonsandagents.tumblr.com/post/108369306151/imagemagick-ways-of-cropping-an-image-to-a&#34;&gt;http://daemonsandagents.tumblr.com/post/108369306151/imagemagick-ways-of-cropping-an-image-to-a&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ImageMagickで画像をリサイズする時のメモ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://o.inchiki.jp/obbr/125&#34;&gt;http://o.inchiki.jp/obbr/125&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PNM と ImageMagick で画像ファイルを手作り生成</title>
      <link>https://blog.awm.jp/2016/01/04/pnm/</link>
      <pubDate>Mon, 04 Jan 2016 19:38:39 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/04/pnm/</guid>
      <description>

&lt;h1 id=&#34;pnm-と-imagemagick-で画像ファイルを手作り生成:c3c49ecad8577b50a243cb7525433ac2&#34;&gt;PNM と ImageMagick で画像ファイルを手作り生成&lt;/h1&gt;

&lt;p&gt;何らかの画像実験で都合の良い画像ファイルが欲しい時にテキストエディタで作れると便利で、PNM (Portable aNyMap) フォーマットを利用するとそんな事が簡単に出来ます。&lt;/p&gt;

&lt;h1 id=&#34;pnm-とは:c3c49ecad8577b50a243cb7525433ac2&#34;&gt;PNM とは&lt;/h1&gt;

&lt;p&gt;古くからある画像フォーマット群で ASCII テキストでもバイナリでも表現出来るのが大きな特徴です、尚、圧縮はいたしません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wikiedia: &lt;a href=&#34;https://ja.wikipedia.org/wiki/PNM_(%E7%94%BB%E5%83%8F%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)&#34;&gt;PNM (画像フォーマット)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PNM は 以下の３つのフォーマットをまとめた呼び方です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PBM (portable bitmap)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://netpbm.sourceforge.net/doc/pbm.html&#34;&gt;http://netpbm.sourceforge.net/doc/pbm.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PGM (portable graymap)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://netpbm.sourceforge.net/doc/pgm.html&#34;&gt;http://netpbm.sourceforge.net/doc/pgm.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PPM (portable pixmap)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://netpbm.sourceforge.net/doc/ppm.html&#34;&gt;http://netpbm.sourceforge.net/doc/ppm.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;拡張フォーマット:c3c49ecad8577b50a243cb7525433ac2&#34;&gt;拡張フォーマット&lt;/h2&gt;

&lt;p&gt;PNM ファミリーではない為に今回は解説しませんが、以下の拡張フォーマットがあります。PAM は透明度が表現できます。PFM は float(浮動小数点)表現です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PAM (portable arbitrary map)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://netpbm.sourceforge.net/doc/pam.html&#34;&gt;http://netpbm.sourceforge.net/doc/pam.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PFM (portable float map)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://netpbm.sourceforge.net/doc/pfm.html&#34;&gt;http://netpbm.sourceforge.net/doc/pfm.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;フォーマット概要:c3c49ecad8577b50a243cb7525433ac2&#34;&gt;フォーマット概要&lt;/h1&gt;

&lt;p&gt;ファイル先頭の文字列に応じて、以下のフォーマットに分かれます。(尚、PAM形式は P7 で、PFM形式は PF, Pf です)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ファイル先頭&lt;/th&gt;
&lt;th&gt;フォーマット&lt;/th&gt;
&lt;th&gt;データ表現&lt;/th&gt;
&lt;th&gt;画像表現&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;PBM&lt;/td&gt;
&lt;td&gt;ASCII&lt;/td&gt;
&lt;td&gt;白黒画像 &lt;img src=&#34;https://blog.awm.jp/2016/01/04/wb.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;PGM&lt;/td&gt;
&lt;td&gt;ASCII&lt;/td&gt;
&lt;td&gt;グレー画像 &lt;img src=&#34;https://blog.awm.jp/2016/01/04/gray.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;P3&lt;/td&gt;
&lt;td&gt;PPM&lt;/td&gt;
&lt;td&gt;ASCII&lt;/td&gt;
&lt;td&gt;カラー画像 &lt;img src=&#34;https://blog.awm.jp/2016/01/04/color.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;P4&lt;/td&gt;
&lt;td&gt;PBM&lt;/td&gt;
&lt;td&gt;Binary&lt;/td&gt;
&lt;td&gt;白黒画像 &lt;img src=&#34;https://blog.awm.jp/2016/01/04/wb.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;P5&lt;/td&gt;
&lt;td&gt;PGM&lt;/td&gt;
&lt;td&gt;Binary&lt;/td&gt;
&lt;td&gt;グレー画像 &lt;img src=&#34;https://blog.awm.jp/2016/01/04/gray.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;P6&lt;/td&gt;
&lt;td&gt;PPM&lt;/td&gt;
&lt;td&gt;Binary&lt;/td&gt;
&lt;td&gt;カラー画像 &lt;img src=&#34;https://blog.awm.jp/2016/01/04/color.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;データ表現が ASCII の場合は以下のフォーマットをとります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;フォーマット種別 # P1〜P6のいずれか。
横サイズ 縦サイズ
最大値             # P1 の時は実質1固定なので省略
画像データの並び
.....
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;pbm-portable-bitmap-format:c3c49ecad8577b50a243cb7525433ac2&#34;&gt;PBM (portable bitmap format)&lt;/h1&gt;

&lt;p&gt;画像の白黒を 0,1 で表現します。(0:白、1:黒である事に注意)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;batsu.pbm&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;P1
7 7
P1
7 7
1 0 0 0 0 0 1
0 1 0 0 0 1 0
0 0 1 0 1 0 0
0 0 0 1 0 0 0
0 0 1 0 1 0 0
0 1 0 0 0 1 0
1 0 0 0 0 0 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ImageMagick の convert で変換します。ついでに8倍に拡大したものも。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert batsu.pbm batsu.png
$ convert -resize 800% -filter point batsu.png batsu_8.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/04/batsu.png&#34; title=&#34;batsu&#34; &gt; &lt;/center&gt;
&lt;center&gt; 8倍に ↓ 拡大 &lt;/center&gt;
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/04/batsu_8.png&#34; title=&#34;batsu_8&#34; &gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;pgm-portable-graymap-format:c3c49ecad8577b50a243cb7525433ac2&#34;&gt;PGM (portable graymap format)&lt;/h1&gt;

&lt;p&gt;白と黒の間で濃淡をつけられます。いわゆるグレー画像です。4段階で作ってみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;batsu_gray.pgm&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;P2
7 7
4
4 0 0 0 0 0 4
0 3 0 0 0 3 0
0 0 2 0 2 0 0
0 0 0 1 0 0 0
0 0 2 0 2 0 0
0 3 0 0 0 3 0
4 0 0 0 0 0 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;convert で変換 &amp;amp; 8倍画像&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert batsu_gray.pgm batsu_gray.png
$ convert -resize 800% -filter point batsu_gray.png batsu_gray_8.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/04/batsu_gray.png&#34; title=&#34;batsu_gray&#34; &gt; &lt;/center&gt;
&lt;center&gt; 8倍に ↓ 拡大 &lt;/center&gt;
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/04/batsu_gray_8.png&#34; title=&#34;batsu_gray_8&#34; &gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;ppm-portable-pixmap-format:c3c49ecad8577b50a243cb7525433ac2&#34;&gt;PPM (portable pixmap format)&lt;/h1&gt;

&lt;p&gt;RGB でカラーを表現できます。以下のも4段階です。ちなみに、256 段階を指定すると皆さんお馴染みの RGB 表現になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;batsu_rgb.ppm&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;P3
7 7
4
4 0 0  0 0 0  0 0 0  0 0 0  0 0 0  0 0 0  0 0 4
0 0 0  3 0 0  0 0 0  0 0 0  0 0 0  0 0 3  0 0 0
0 0 0  0 0 0  2 0 0  0 0 0  0 0 3  0 0 0  0 0 0
0 0 0  0 0 0  0 0 0  1 1 1  0 0 0  0 0 0  0 0 0
0 0 0  0 0 0  0 2 0  0 0 0  2 2 0  0 0 0  0 0 0
0 0 0  0 3 0  0 0 0  0 0 0  0 0 0  3 3 0  0 0 0
0 4 0  0 0 0  0 0 0  0 0 0  0 0 0  0 0 0  4 4 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;convert で変換&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert batsu_rgb.ppm batsu_rgb.png
$ convert -resize 800% -filter point batsu_rgb.png batsu_rgb_8.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/04/batsu_rgb.png&#34; title=&#34;batsu_rgb&#34; &gt; &lt;/center&gt;
&lt;center&gt; 8倍に ↓ 拡大 &lt;/center&gt;
&lt;center&gt; &lt;img src=&#34;https://blog.awm.jp/2016/01/04/batsu_rgb_8.png&#34; title=&#34;batsu_rgb_8&#34; &gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;さいごに:c3c49ecad8577b50a243cb7525433ac2&#34;&gt;さいごに&lt;/h1&gt;

&lt;p&gt;エディタで任意のビットマップ画像を作りたい時にご活用下さい。たまに便利です。&lt;/p&gt;

&lt;h1 id=&#34;参考-url:c3c49ecad8577b50a243cb7525433ac2&#34;&gt;参考 URL&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Wikipedia: &lt;a href=&#34;https://ja.wikipedia.org/wiki/PNM_(%E7%94%BB%E5%83%8F%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)&#34;&gt;PNM (画像フォーマット)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;碧色工房 〜 PNM ( PPM / PGM / PBM ) ファイルフォーマット

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mm2d.net/main/prog/c/image_io-01.html&#34;&gt;http://www.mm2d.net/main/prog/c/image_io-01.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ImageMagick/ImageMagick/blob/master/coders/pnm.c&#34;&gt;https://github.com/ImageMagick/ImageMagick/blob/master/coders/pnm.c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>