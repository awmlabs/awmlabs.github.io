<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rgb444 on awm-Tech</title>
    <link>https://blog.awm.jp/tags/rgb444/</link>
    <description>Recent content in Rgb444 on awm-Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; awm.jp</copyright>
    <lastBuildDate>Fri, 22 Jul 2016 09:10:28 +0900</lastBuildDate>
    <atom:link href="https://blog.awm.jp/tags/rgb444/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RGBA4444 変換で劣化しない画像を ImageMagick で作る</title>
      <link>https://blog.awm.jp/2016/07/22/rgba4444/</link>
      <pubDate>Fri, 22 Jul 2016 09:10:28 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/07/22/rgba4444/</guid>
      <description>

&lt;h1 id=&#34;rgba4444-変換で劣化しない画像を-imagemagick-で作る&#34;&gt;RGBA4444 変換で劣化しない画像を ImageMagick で作る&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;RGB444 変換で劣化しない画像を ImageMagick で作る

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/07/21/rgb444/&#34;&gt;http://blog.awm.jp/2016/07/21/rgb444/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前回の記事では RGBA4444 のディザに失敗しました。ImageMagick は透明度を含むんだ時のディザ処理が苦手のようです。&lt;/p&gt;

&lt;p&gt;以下のサイトで紹介されている、色のチャネル(RGBA)毎に個別にディザをかける方法だとうまくいきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[unity][cg_tools] RGBA4444に変換できるツール

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blawat2015.no-ip.com/~mieki256/diary/201402154.html&#34;&gt;http://blawat2015.no-ip.com/~mieki256/diary/201402154.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;変換方法-ブログを参考に-rgba4444&#34;&gt;変換方法 (ブログを参考に) RGBA4444&lt;/h2&gt;

&lt;h3 id=&#34;テスト画像&#34;&gt;テスト画像&lt;/h3&gt;

&lt;pre&gt;
$ convert -size 300x900 gradient:&#39;#FFF-#0FF&#39; -rotate 90 \
    -matte -channel a -fx &#34;u*j/h&#34; \
    -alpha set -virtual-pixel Transparent +distort Polar 149 +repage \
    -rotate 90 -set colorspace HSB -colorspace RGB \
    gradient_hue_polar-transparent.png
&lt;img src=&#34;../gradient_hue_polar-transparent.png&#34; /&gt;
&lt;/pre&gt;

&lt;h3 id=&#34;パレット画像の準備&#34;&gt;パレット画像の準備&lt;/h3&gt;

&lt;pre&gt;
$ convert -size 16x16 gradient:black-white gray16palette.png
&lt;img src=&#34;../gray16palette.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;参照した記事では 0xfff を 0xf0f0f0 と 0xffffff のどちらで表わそうか迷ってますが、最大値の 0xfff は 0xffffff でしか表現出来ないので、後者を採用してます。&lt;/p&gt;

&lt;p&gt;尚、PNG は仕様で後者である事が示されています &amp;gt; &lt;a href=&#34;https://www.w3.org/TR/PNG/#12Sample-depth-scaling&#34;&gt;https://www.w3.org/TR/PNG/#12Sample-depth-scaling&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;実行コマンド&#34;&gt;実行コマンド&lt;/h3&gt;

&lt;pre&gt;
$ convert gradient_hue_polar-transparent.png -channel RGBA -separate \
    \( -dither FloydSteinberg -remap gray16palette.png \) \
    -channel RGBA -combine rgba4444.png
&lt;img src=&#34;../rgba4444.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;尚、ディザ変換をせずに Unity 等に RGBA4444 指定で渡した場合は、以下のようになるはずです。&lt;/p&gt;

&lt;pre&gt;
$ convert gradient_hue_polar-transparent.png -depth 4 depth4.png
&lt;img src=&#34;../depth4.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;これよりは予め自分でディザをかけた方が良いはずです。&lt;/p&gt;

&lt;h2 id=&#34;テスト２-rgb444&#34;&gt;テスト２ (RGB444)&lt;/h2&gt;

&lt;p&gt;RGB 画像でも同じ方法で変換できます。&lt;/p&gt;

&lt;pre&gt;
$ convert -size 300x900 gradient:&#39;#FFF-#0FF&#39; -rotate 90 \
    -alpha set -virtual-pixel Transparent +distort Polar 149 +repage \
    -rotate 90 -set colorspace HSB -colorspace RGB \
    gradient_hue_polar.png
&lt;img src=&#34;../gradient_hue_polar.png&#34; /&gt;
$ convert gradient_hue_polar.png -channel RGBA -separate \
    \( -dither FloydSteinberg -remap gray16palette.png \) \
    -channel RGBA -combine rgb444.png
&lt;img src=&#34;../rgb444.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;透明度がない画像は -channel RGB の方が良いかもしれません。もしくは前回説明した方法( &lt;a href=&#34;http://blog.awm.jp/2016/07/21/rgb444/&#34;&gt;http://blog.awm.jp/2016/07/21/rgb444/&lt;/a&gt; )でも良いでしょう。&lt;/p&gt;

&lt;h2 id=&#34;追試&#34;&gt;追試&lt;/h2&gt;

&lt;p&gt;(ご参考までに。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RGBA4444 の追加実験

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.awm.jp/2016/07/22/rgb444a4/&#34;&gt;https://blog.awm.jp/2016/07/22/rgb444a4/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考-url&#34;&gt;参考 URL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Unityやるには必須！RGBA画像減色の基礎をまじめに書いてみた

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://design.kayac.com/topics/2014/02/unity-RGBA4444.php&#34;&gt;http://design.kayac.com/topics/2014/02/unity-RGBA4444.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unityで、もっとキレイな16bitカラーテクスチャを使おう！

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webtech.co.jp/blog/game-develop/unity/2562/&#34;&gt;http://www.webtech.co.jp/blog/game-develop/unity/2562/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dither using Pre-Defined Color Maps

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/Usage/quantize/#remap&#34;&gt;http://www.imagemagick.org/Usage/quantize/#remap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Gradients in other Colorspaces

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/Usage/canvas/#gradient_colorspace&#34;&gt;http://www.imagemagick.org/Usage/canvas/#gradient_colorspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PNG Specification 12.5 Sample depth scaling

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/PNG/#12Sample-depth-scaling&#34;&gt;https://www.w3.org/TR/PNG/#12Sample-depth-scaling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RGB444 変換で劣化しない画像を ImageMagick で作る</title>
      <link>https://blog.awm.jp/2016/07/21/rgb444/</link>
      <pubDate>Thu, 21 Jul 2016 21:28:11 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/07/21/rgb444/</guid>
      <description>

&lt;h1 id=&#34;rgb444-変換で劣化しない画像を-imagemagick-で作る&#34;&gt;RGB444 変換で劣化しない画像を ImageMagick で作る&lt;/h1&gt;

&lt;p&gt;詳しい話は以下のサイトに任せるとして、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unityやるには必須！RGBA画像減色の基礎をまじめに書いてみた

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://design.kayac.com/topics/2014/02/unity-RGBA4444.php&#34;&gt;http://design.kayac.com/topics/2014/02/unity-RGBA4444.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;PNGquantやImageMagickを使う
これらは画像変換の専用ソフトです。

注意して欲しいのはこれらのソフトにはPNG用の減色設定もあるので、
間違えてしまうとさっきのまでの話のように劣化してしまいます。

設定にご注意を。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このうち、ImageMagick での具体的なやり方です。&lt;/p&gt;

&lt;h2 id=&#34;追記-2017-07-22&#34;&gt;(追記) 2017/07/22&lt;/h2&gt;

&lt;p&gt;RGBA4444 は以下の方で説明します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RGBA4444 変換で劣化しない画像を ImageMagick で作る

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.awm.jp/2016/07/22/rgba4444/&#34;&gt;http://blog.awm.jp/2016/07/22/rgba4444/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;imagemagick-の減色処理&#34;&gt;ImageMagick の減色処理&lt;/h2&gt;

&lt;p&gt;ImageMagick の減色の方法は何種類か存在します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a.) 色数を指定して減色&lt;/li&gt;
&lt;li&gt;(b.) ビット深度を変更して減色&lt;/li&gt;
&lt;li&gt;(c.) 残す色を指定して減色&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通常は、ImageMagick の減色といえば (a.) の方式です。
アルゴリズムの詳細は以下のブログをご参考下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ImageMagick 改造入門 (その弐) 減色処理前編

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://labs.gree.jp/blog/2012/09/4824/&#34;&gt;http://labs.gree.jp/blog/2012/09/4824/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unity に RGBA4444 指定で PNG 画像を渡した場合は (b.) 相当の処理が動くようです。
&lt;pre&gt;
$ convert -size 300x900 gradient:&amp;lsquo;#FFF-#0FF&amp;rsquo; -rotate 90 &lt;br /&gt;
    -alpha set -virtual-pixel Transparent +distort Polar 149 +repage &lt;br /&gt;
    -rotate 90 -set colorspace HSB -colorspace RGB &lt;br /&gt;
    gradient_hue_polar.png
&lt;img src=&#34;../gradient_hue_polar.png&#34; /&gt;
$ convert gradient_hue_polar.png -depth 4 depth4.png
&lt;img src=&#34;../depth4.png&#34; /&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;これだと画質劣化が目立つので、(b.) の処理が動いても色が変わらないよう、あらかじめ (c.) の方法で減色をする。というのが今回の手法です。&lt;/p&gt;

&lt;h2 id=&#34;変換方法-成功例-rgb444&#34;&gt;変換方法 (成功例) RGB444&lt;/h2&gt;

&lt;h3 id=&#34;テスト画像&#34;&gt;テスト画像&lt;/h3&gt;

&lt;p&gt;先ほど作成した画像 gradient_hue_polar.png を利用します。
&lt;img src=&#34;../gradient_hue_polar.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;変換の準備&#34;&gt;変換の準備&lt;/h3&gt;

&lt;p&gt;ディザで残したい色を持つパレット画像を作成します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RGB444 パレット作成
&lt;pre&gt;
$ convert -size 16x16 gradient:black-red black-red.png
&lt;img src=&#34;../black-red.png&#34; /&gt;
$ convert -size 16x16 gradient:black-green1 -rotate 270 black-green.png
&lt;img src=&#34;../black-green.png&#34; /&gt;
$ composite -compose plus black-red.png black-green.png black-red-green.png
&lt;img src=&#34;../black-red-green.png&#34; /&gt;
$ convert -size 256x16 tile:black-red-green.png black-red-green-tiled.png
&lt;img src=&#34;../black-red-green-tiled.png&#34; /&gt;
$ convert -size 16x16 gradient:black-blue -scale 100%x1600% -rotate 270 black-blue.png
&lt;img src=&#34;../black-blue.png&#34; /&gt;
$ composite black-red-green-tiled.png -compose plus black-blue.png black-red-green-blue.png
&lt;img src=&#34;../black-red-green-blue.png&#34; /&gt;
&lt;/pre&gt;
&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;実行コマンド&#34;&gt;実行コマンド&lt;/h3&gt;

&lt;p&gt;-remap で画像ファイルを渡すと、その画像に含まれる色に限定してディザ処理をします。&lt;/p&gt;

&lt;pre&gt;
$ convert gradient_hue_polar.png \
    -dither Riemersma -remap black-red-green-blue.png \
    rgb444.png
&lt;img src=&#34;../rgb444.png&#34; /&gt;
&lt;/pre&gt;

&lt;p&gt;RGB444 だと色数が減るのでどのみち画質の劣化は避けられません。先ほどの変換をかけずに渡した場合よりマシという話です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../depth4.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;透明度を含む実験-失敗例-rgba4444&#34;&gt;透明度を含む実験 (失敗例) RGBA4444&lt;/h2&gt;

&lt;p&gt;失敗例です。透明度を含む場合は減色が綺麗に出来ませんでした。&lt;/p&gt;

&lt;h3 id=&#34;テスト画像-1&#34;&gt;テスト画像&lt;/h3&gt;

&lt;pre&gt;
$ convert -size 300x900 gradient:&#39;#FFF-#0FF&#39; -rotate 90 \
    -matte -channel a -fx &#34;u*j/h&#34; \
    -alpha set -virtual-pixel Transparent +distort Polar 149 +repage \
    -rotate 90 -set colorspace HSB -colorspace RGB \
    gradient_hue_polar-transparent.png
&lt;img src=&#34;../gradient_hue_polar-transparent.png&#34; /&gt;
&lt;/pre&gt;

&lt;h3 id=&#34;変換の準備-1&#34;&gt;変換の準備&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RGBA4444 パレット作成
&lt;pre&gt;
$ convert -size 256x256 tile:black-red-green-blue.png &lt;br /&gt;
-matte -channel a -fx &amp;ldquo;u*floor(j/16)/h*17.1&amp;rdquo; &lt;br /&gt;
black-red-green-blue-transparent.png
&lt;img src=&#34;../black-red-green-blue-transparent.png&#34; /&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;実行コマンド-1&#34;&gt;実行コマンド&lt;/h3&gt;

&lt;pre&gt;
$ convert gradient_hue_polar-transparent.png \
    -dither Riemersma -remap black-red-green-blue-transparent.png \
    rgba4444.png
&lt;img src=&#34;../rgba4444.png&#34; /&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;課題&#34;&gt;課題&lt;/h2&gt;

&lt;p&gt;Unity でゲームを作る時のキャラ画像は輪郭の周りを透明にしたいでしょうから、RGBA4444 に対応しないと残念ながら実用的では無さそうです。
ImageMagick は透明度つき減色が苦手ですが、ここまで酷いのは何か理由がありそうなので、もう少し調べてみます。&lt;/p&gt;

&lt;h2 id=&#34;参考-url&#34;&gt;参考 URL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webtech.co.jp/blog/game-develop/unity/2562/&#34;&gt;http://www.webtech.co.jp/blog/game-develop/unity/2562/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/Usage/canvas/#gradient_colorspace&#34;&gt;http://www.imagemagick.org/Usage/canvas/#gradient_colorspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;注釈&#34;&gt;注釈&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;compose と tile を組み合わせて、&amp;rdquo;composite -size 256x16 -compose plus  black-blue.png tile:black-red-green.png output.png&amp;rdquo; を実行したらゴミが入りました。&lt;img src=&#34;../compose_and_tile.png&#34; /&gt; 多分バグです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>