<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Thumber on awm-Tech</title>
    <link>https://blog.awm.jp/tags/go-thumber/index.xml</link>
    <description>Recent content in Go Thumber on awm-Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; awm.jp</copyright>
    <atom:link href="https://blog.awm.jp/tags/go-thumber/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>yoya-thumber と go-thumber</title>
      <link>https://blog.awm.jp/2017/01/01/yoya-thumber/</link>
      <pubDate>Sun, 01 Jan 2017 23:11:14 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2017/01/01/yoya-thumber/</guid>
      <description>

&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;go-thumber は Pivix さんの公開している画像リサイズプロキシです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pixiv/go-thumber&#34;&gt;https://github.com/pixiv/go-thumber&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;yoya-thumber は SmartNews さんの公開している画像リサイズプロキシです。
Pixiv さんの go-thumber の画像処理を ImageMagick に繋げ直し、文字入れや画像合成の機能を追加しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/smartnews/yoya-thumber&#34;&gt;https://github.com/smartnews/yoya-thumber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.smartnews.com/blog/2016/12/19/yoya-thumber/&#34;&gt;http://developer.smartnews.com/blog/2016/12/19/yoya-thumber/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;go-thumber&#34;&gt;go-thumber&lt;/h1&gt;

&lt;p&gt;go-thumber を構成するディレクトリです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:pixiv/go-thumber.git
$ cd go-thumber
$ ls
LICENSE		jpeg		swscale		thumberd
README.md	mkthumb		test-image	thumbnail
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;jpeg： libjpeg を使って JPEG 画像の処理&lt;/li&gt;
&lt;li&gt;mkthumb: テスト用コマンドラインツール&lt;/li&gt;
&lt;li&gt;swscale: ffmpeg の libswscale を使って画像リサイズ&lt;/li&gt;
&lt;li&gt;thumberd: net/http でサーバ機能を実装 (処理の起点)&lt;/li&gt;
&lt;li&gt;thumbnail: パラメータに応じた画像リサイズ処理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち jpeg と swscale は Go言語の cgo 機能を用いて libjpeg, libswscale の C言語 API にアクセスします。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../go-thumber.png&#34; /&gt;  &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;運用を JPEG で統一出来れば go-thumber で良いのですが、PNG や GIF も扱いたいですし、文字入れや画像の重ね合わせもしたいといった要望に応じて、go-thumber を素直に拡張すると、libpng や giflib を繋げて、かつ ffmpeg の libfilter(drawtext) も使えるようにする、大工事が想定されます。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../go-thumber-kai.png&#34; /&gt;  &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;見るからに大変そうです。また go-thumber は jpeg に特化して作られているので png や gif に合わせて抽象化するのも手間がかかります。&lt;/p&gt;

&lt;h1 id=&#34;yoya-thumber&#34;&gt;yoya-thumber&lt;/h1&gt;

&lt;p&gt;GoImagick を介して画像処理の殆どをImageMagick に丸投げしたのが yoya-thumber です。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../yoya-thumber.png&#34; /&gt;  &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;まとめると、Go言語の net/http を使った go-thumber のサーバ機能をほぼそのまま、画像処理だけ GoImagick に差し替えて ImageMagick を使うという魔改造が yoya-thumber です。&lt;/p&gt;

&lt;h1 id=&#34;あとがき&#34;&gt;あとがき&lt;/h1&gt;

&lt;p&gt;続くかもしれません。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>