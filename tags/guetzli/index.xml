<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guetzli on awm-Tech</title>
    <link>https://blog.awm.jp/tags/guetzli/index.xml</link>
    <description>Recent content in Guetzli on awm-Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; awm.jp</copyright>
    <atom:link href="https://blog.awm.jp/tags/guetzli/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Guetzli - Perceptual JPEG encoder</title>
      <link>https://blog.awm.jp/2017/03/17/guetzli/</link>
      <pubDate>Fri, 17 Mar 2017 17:34:14 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2017/03/17/guetzli/</guid>
      <description>

&lt;h1 id=&#34;公式サイト&#34;&gt;公式サイト&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/guetzli&#34;&gt;https://github.com/google/guetzli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Announcing Guetzli: A New Open Source JPEG Encoder

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html&#34;&gt;https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Guetzli は知覚的(Perceptual)に人間が見ても分からないだろうギリギリまで JPEG 画像を劣化させるチキンレース技術です。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;人間が見ても。という評価には Butteraugli を用います。 画像処理の論文では MSE, PNSR, SSIM をよく見かけますが結構これらは雑な評価で、Butteraugli は人間の視覚特性(例えば輝度と色味は別指標、色味も反対色説の色差軸)を元に計算します。
&lt;center&gt;
&lt;img src=&#34;../opponent-color.jpg&#34; /&gt; &lt;br /&gt;
&amp;copy; &lt;a href=&#34;http://ieeexplore.ieee.org/ieee_pilot/articles/06/ttg2009061291/article.html&#34;&gt;http://ieeexplore.ieee.org/ieee_pilot/articles/06/ttg2009061291/article.html&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JPEG quality を色々変えて画像サイズと画質のトレードオフを探る事はよくありますが、それの全自動版みたいな感じです。更に DQT (周波数成分毎の量子化パラメータ) を細かくいじります。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;良い結果に当たるよう何度も繰り返し JPEG 生成する方式なので、とにかく時間がかかります。libjpeg や mozjpeg の代わりという訳にはいきません。アクセスが特別多い重要な画像に対してサイズを少しでも減らしたい。zopflipng のような使い方が良さそうです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;制限事項&#34;&gt;制限事項&lt;/h1&gt;

&lt;p&gt;ソースを読んで気づいた制限事項です。(README に記述して欲しいなぁ。)&lt;/p&gt;

&lt;h2 id=&#34;quality-84&#34;&gt;quality &amp;gt;= 84&lt;/h2&gt;

&lt;p&gt;quality は 84 以上しか指定できません。それ以下だと目に見えるレベルの劣化するそうです。 (ちなみにデフォルトは 95)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;guetzli/processor.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessJpegData(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg_in,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;comparator,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GuetzliOutput&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessStats&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stats)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(params.butteraugli_target&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2.0f&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Guetzli should be called with quality &amp;gt;= 84, otherwise the&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;output will have noticeable artifacts. If you want to&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proceed anyway, please edit the source code.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;false;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cmyk-未対応&#34;&gt;CMYK 未対応&lt;/h2&gt;

&lt;p&gt;YCbCr JPEG のみ対応です。CMYK や CYYK は未対応。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参考) &lt;a href=&#34;https://blog.awm.jp/2016/02/06/ycbcr/&#34;&gt;https://blog.awm.jp/2016/02/06/ycbcr/&lt;/a&gt; YCbCr について&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;guetzli/processor.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessJpegData(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg_in,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;comparator,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GuetzliOutput&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessStats&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stats)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(jpg_in.components.size()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;HasYCbCrColorSpace(jpg_in))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Only YUV color space input jpeg is supported&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;false;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;yuv-444-420-only&#34;&gt;YUV 444,420 only&lt;/h2&gt;

&lt;p&gt;YUV444, 420 のみ対応。422,411,440 は NG。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参考) &lt;a href=&#34;https://blog.awm.jp/2016/02/10/yuv/&#34;&gt;https://blog.awm.jp/2016/02/10/yuv/&lt;/a&gt; YUV の種類&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;guetzli/processor.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessJpegData(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg_in,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;Comparator&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;comparator,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GuetzliOutput&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out,&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessStats&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stats)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(jpg_in.Is444())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_is_420&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;false;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(jpg_in.Is420())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_is_420&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unsupported sampling factors:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うーん。YUV422 の JPEG は世に溢れてるはずだけど、大丈夫なのでしょうか。420 なんかよりずっと多そうだけど。デジカメで普通の画質設定だと 422 になりそうですし。(自分は高画質しか興味ないので、よく分からない)&lt;/p&gt;

&lt;h2 id=&#34;噂話-icc-プロファイル&#34;&gt;噂話 (ICC プロファイル)&lt;/h2&gt;

&lt;p&gt;あと、ICC プロファイルを引き継がないという噂がありますが、自分が試した限りではちゃんと引き継ぎます。ソースコードを見ても APPn を 丸々コピーする処理があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;guetzli/jpeg_data_reader.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// Saves the APP marker segment as a string to *jpg.&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ProcessAPP&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pos,&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;VERIFY_LEN(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ReadUint16(data,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pos);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;VERIFY_INPUT(marker_len,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;65535&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MARKER_LEN);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;VERIFY_LEN(marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// Save the marker type together with the app data.&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;app_str(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
      &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;data[&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;marker_len&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;app_data.push_back(app_str);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ReadJpeg(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JpegReadMode&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mode,&lt;/span&gt;
              &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
 &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe6&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe7&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe8&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xe9&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xea&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xeb&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xed&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xee&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xef&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(mode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEG_READ_TABLES)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ProcessAPP(data,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pos,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;guetzli/jpeg_data_writer.cc
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;EncodeMetadata&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGData&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strip_metadata,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGOutput&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(strip_metadata)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;＜略＞&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg.app_data.size();&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGWrite(out,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(data));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;JPEGWrite(out,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;jpg.app_data[i]);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どなたか Exif や ICC プロファイルを引き継がない JPEG ファイルをお持ちでしたら頂けないでしょうか。(修正コミットしてコントリビュータに紛れ込みたい！)&lt;/p&gt;

&lt;h1 id=&#34;インストール&#34;&gt;インストール&lt;/h1&gt;

&lt;p&gt;macOS だと brew install guetzli で入りますが、一応 git レポジトリを使う方法のメモです。&lt;/p&gt;

&lt;p&gt;libpng(libpng-dev) と gflags (libgflags-dev) のパッケージを入れて make するだけです。macOS Sierra と Linux Ubuntu16 で動作しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% git clone git@github.com:google/guetzli.git
% cd guetzli
% make
==== Building guetzli (release) ====
Creating bin/Release
Creating obj/Release
＜略＞
butteraugli.cc
Linking guetzli
ld: warning: option -s is obsolete and being ignored
% ls -l bin/Release/guetzli
-rwxr-xr-x  1 yoya  staff  280856  3 17 17:34 bin/Release/guetzli
% 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;実験&#34;&gt;実験&lt;/h1&gt;

&lt;p&gt;様々なサイズの2Dイラスト画像1406枚で Guetzli を動かして計測しました。
何枚かは制限事項に引っかかるようで、実際に処理できたのは 1360枚です。&lt;/p&gt;

&lt;h2 id=&#34;実行&#34;&gt;実行&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;% ls illust | wc
   1406    1406   26445
% mkdir tmp
% cd illust
% (for i in *.jpg ; do o=&amp;quot;../tmp/$i&amp;quot; ; identify $i ; time guetzli $i $o ; identify $o ; done &amp;gt;&amp;amp; ../log.txt )
% ls -l ../tmp | wc
   1360   12233   86837
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ログデータ(の一部)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;3b689cd9.jpg JPEG 500x375 500x375+0+0 8-bit sRGB 59.4KB 0.000u 0:00.000

real	0m7.194s
user	0m6.976s
sys	0m0.212s
../tmp/3b689cd9.jpg JPEG 500x375 500x375+0+0 8-bit sRGB 56KB 0.000u 0:00.000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;集計スクリプト&#34;&gt;集計スクリプト&lt;/h2&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filesizeUnit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($filesize,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$unit)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// to KB&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;KB&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;MB&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($unit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;GB&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ERROR: $filesize, $unit\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(file($argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(preg_match(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^([^\/]+.jpg) JPEG (\d+)x(\d+) \S+ \S+ \S+ ([0-9\.]+)(.B)/&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;, $line, $matches)) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        list($all, $file, $width, $height, $filesize, $unit) = $matches;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        $nPixel = $width * $height;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        $size = (int) sqrt($nPixel);&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    $filesize = filesizeUnit($filesize, $unit);&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;} else if (preg_match(&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/^&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;user\s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;\d&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;\d\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;, $line, $matches)) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        list($all, $minutes, $seconds) = $matches;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        $t = 60 * $minutes + $seconds;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        if ($t === 0.01) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            // echo &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ERROR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$size&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$t\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        } else {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;            //  echo &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$size,$t\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    } else if (preg_match(&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/^&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;tmp\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;jpg&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;JPEG&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;\d&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;\d&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;\S&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;\S&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;\S&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;, $line, $matches)) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        list($all, $file, $width, $height, $filesize2, $unit) = $matches;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        $filesize2 = filesizeUnit($filesize2, $unit);&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        echo &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$filesize,$filesize2\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;          if ($filesize &amp;lt; $filesize2) {&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;               exit(1);&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;        }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    }&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;集計結果のグラフ&#34;&gt;集計結果のグラフ&lt;/h2&gt;

&lt;h3 id=&#34;処理時間&#34;&gt;処理時間&lt;/h3&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../time-graph-small.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;横がsqrt(width*height) 。正方形と仮定した場合の一辺の長さ相当&lt;/li&gt;
&lt;li&gt;縦が user 時間の秒数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一辺2000px で100秒弱〜200秒が目安になりそうです。&lt;/p&gt;

&lt;p&gt;ちなみにそこそこ高性能なゲームPCで実験してます。&lt;/p&gt;

&lt;h3 id=&#34;ファイルサイズ削減&#34;&gt;ファイルサイズ削減&lt;/h3&gt;

&lt;p&gt;横軸が元サイズ、縦軸が圧縮後のサイズです。どちらも KB 単位。&lt;/p&gt;

&lt;p&gt;期待以上の異常なレベルでの削減率です。半分以下になることさえあります。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../filesize-graph-small.png&#34; /&gt; &lt;/center&gt;
(参考のため、サイズが変わらない時の場所にピンクの線を引いておきます)&lt;/p&gt;

&lt;p&gt;削減率の多い画像を目視で確認しても、ぱっと見で違いは分かりませんでした。凄い。。&lt;/p&gt;

&lt;h1 id=&#34;最後に&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;イラスト画像は線(周波数高)とグラデーション(周波数低)が命だと考えると周波数の中域は荒くて良さそうで、視覚特性以外でも削れる情報があって実な効果が大きいのかもしれません。&lt;/p&gt;

&lt;p&gt;Guetzli で処理するとデータの劣化はするので、例えば画像を引き伸ばした時や画像にフィルタをかけた時に、違いが目に見える可能性があります。チキンレースで崖の位置が変われば当然落ちますし。画質評価で設定するその崖の位置は、モニタのDPI、視距離、測色標準観察者の種類といった想定する視聴環境のモデル次第です。&lt;/p&gt;

&lt;p&gt;MozJPEG と比較してたりはするけど、土俵が違うのであんまりまとめても意味なさそうかな。。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>