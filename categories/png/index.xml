<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Png on awm-Tech</title>
    <link>https://blog.awm.jp/categories/png/index.xml</link>
    <description>Recent content in Png on awm-Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; awm.jp</copyright>
    <atom:link href="https://blog.awm.jp/categories/png/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>任意のファイルから PNG を抜き出す</title>
      <link>https://blog.awm.jp/2016/11/18/png/</link>
      <pubDate>Fri, 18 Nov 2016 17:02:28 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/11/18/png/</guid>
      <description>

&lt;h1 id=&#34;ツールを作ったきっかけ&#34;&gt;ツールを作ったきっかけ&lt;/h1&gt;

&lt;p&gt;カラー絵文字用フォントには色んな方式がありまして、その中でも Apple のカラー絵文字と、 Google のNotoColorEmoji のフォントは、ファイルの中に絵文字のPNG画像データが埋め込まれています。&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure-ttf.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;この PNG 画像を抽出するのが目的です。&lt;/p&gt;

&lt;h1 id=&#34;カラー絵文字&#34;&gt;カラー絵文字&lt;/h1&gt;

&lt;p&gt;カラー絵文字フォントには以下の方式があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a) SVG 画像を入れる&lt;/li&gt;
&lt;li&gt;b) フォントにPNG画像を入れる&lt;/li&gt;
&lt;li&gt;c) 色数分の文字データをもってレイヤー合成で表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はこのうち b) 方式のフォントファイルから絵文字の画像を抜きだします。&lt;/p&gt;

&lt;p&gt;参考)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple Color Emoji spec

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6sbix.html&#34;&gt;https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6sbix.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Google Noto Color Emoji spec

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rawgit.com/behdad/color-emoji/master/specification/v1.html&#34;&gt;https://rawgit.com/behdad/color-emoji/master/specification/v1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本来であれば上記仕様書に従って分解するべきですが、面倒なので PNG の先頭シグネチャを目印に抜き出す(フォントに限定しない)汎用的なツールを作りました。
絵文字以外の画像も取れるかもしれませんが、ご愛嬌という事で。。&lt;/p&gt;

&lt;h1 id=&#34;png-の構造&#34;&gt;PNG の構造&lt;/h1&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../figure-png.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;処理概要&#34;&gt;処理概要&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;1) フォントファイルの先頭から PNG のシグネチャを探す。&lt;/li&gt;
&lt;li&gt;2) 見つけたら、その後ろのチャンクを順番に見る。

&lt;ul&gt;
&lt;li&gt;len + name + payload + crc の構造&lt;/li&gt;
&lt;li&gt;len は UInt32(4byte) BigEndiana&lt;/li&gt;
&lt;li&gt;name は4文字(4byte)。IHDR チャンクで始まり IEND チャンクで終わる&lt;/li&gt;
&lt;li&gt;チャンクの最後 4byte に crc 値がある事に注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3) IEND のチャンクにたどり着いたら、そこまでを一つの PNGファイルとして出力する。&lt;/li&gt;
&lt;li&gt;4) 1 に戻る&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ツール-take1&#34;&gt;ツール take1&lt;/h1&gt;

&lt;p&gt;すみません、PHP で。。。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/misc/blob/96452d7ddbe797685728a5825df2cf3ca863c80c/php/pngextract.php&#34;&gt;https://github.com/yoya/misc/blob/96452d7ddbe797685728a5825df2cf3ca863c80c/php/pngextract.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PNG の先頭シグネチャは以下の8バイトです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$pngSignature = &amp;quot;\x89\x50\x4E\x47\x0D\x0A\x1A\x0A&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このシグネチャを探して、チャンクを IEND まで辿る処理は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$startOffset = strpos($data, $pngSignature, $offset);
$offset = $startOffset + strlen($pngSignature);
$iendFound = false;
while (($offset + 8) &amp;lt; $dataLen) {
    $len = readUI32($data, $offset);
    $sig = substr($data, $offset + 4 , 4);
    $offset += 4 + 4 + $len + 4; // len + name + &amp;lt;payload&amp;gt; + crc
    if ($sig === &amp;quot;IEND&amp;quot;) {
        $iendFound = true;
        break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;実行例&#34;&gt;実行例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(Google) NotoSans Color Emoji&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php pngextract.php  -f NotoColorEmoji.ttf -p notoemoji
notoemoji000000.png
notoemoji000001.png
notoemoji000002.png
＜略＞
notoemoji002384.png
notoemoji002385.png
notoemoji002386.png
OK
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../notoemoji-ss.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apple Color Emoji&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php pngextract.php -f /System/Library/Fonts/Apple\ Color\ Emoji.ttf -p appleemoji
appleemoji000000.png
appleemoji000001.png
appleemoji000002.png
＜略＞
appleemoji009538.png
appleemoji009539.png
appleemoji009540.png
OK
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../appleemoji-ss.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Apple の方が PNG ファイルの数(5974 &amp;gt; 2387)が多いけど、画像サイズが Google の方が大きい(136x128 &amp;gt; 20x20)という違いがありますね。&lt;/p&gt;

&lt;h1 id=&#34;ツール-take2-ストリーム方式&#34;&gt;ツール take2 (ストリーム方式)&lt;/h1&gt;

&lt;p&gt;上記のプログラムでは file_get_contents でファイルの全データをメモリに載せているので、ファイルが数GB になると動かない可能性があります。&lt;/p&gt;

&lt;p&gt;ファイルストリームで処理する版に改良しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yoya/misc/blob/14686cfdb14e3859605710488a2ddd6a63a965de/php/pngextract.php&#34;&gt;https://github.com/yoya/misc/blob/14686cfdb14e3859605710488a2ddd6a63a965de/php/pngextract.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$fp = fopen($file, &amp;quot;rb&amp;quot;);
for ($i = 0 ; searchText($fp, $pngSignature); $i++) {
     $outputFilename = sprintf(&amp;quot;%s%06d.png&amp;quot;, $prefix, $i);
    echo &amp;quot;$outputFilename\n&amp;quot;;
    $fp_out = fopen($outputFilename, &amp;quot;wb&amp;quot;);
    fwrite($fp_out, $pngSignature);
    $iendFound = false;
    while (($len_name = fread($fp, 8)) !== false) {
        fwrite($fp_out, $len_name);
        $len = readUI32(substr($len_name, 0, 4));
        $name = substr($len_name, 4, 4);
        $payload_crc = fread($fp, $len + 4);
        if ($payload_crc === false) {
            break;
        }
        fwrite($fp_out, $payload_crc);
        if ($name === &amp;quot;IEND&amp;quot;) {
            $iendFound = true;
            break;
        }
    }
＜略＞
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要するに、入力したデータをなるべく即出力する事で、メモリを省エネ出来ます。&lt;/p&gt;

&lt;p&gt;なお、strpos が使えなくなるので、ベタな方法で代価してます。(標準関数で欲しい。。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function searchText($fp, $needle) {
    $len = strlen($needle);
    $buff = fread($fp, $len);
    if ($buff === false)  {
        return false;
    }
    while (($buff !== $needle)) {
        if (feof($fp)) {
            return false;
        }
        $c = fread($fp, 1);
        if ($c === false) {
            return false;
        }
        $buff = substr($buff, 1) . $c;
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字列検索はアルゴリズム的に頑張る余地があるのですが、今後の課題にしておきますね。&lt;/p&gt;

&lt;h1 id=&#34;最後に&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;以上。
フォントファイルに限らず、PNG データが生のまま埋め込まれているバイナリであれば、どんな形式であれ PNG データを吸い出せるので便利です。ご活用下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ImageMagick で PNG の形式を変換</title>
      <link>https://blog.awm.jp/2016/01/26/png/</link>
      <pubDate>Tue, 26 Jan 2016 14:55:42 +0900</pubDate>
      
      <guid>https://blog.awm.jp/2016/01/26/png/</guid>
      <description>

&lt;h1 id=&#34;imagemagick-で-png-の形式を変換&#34;&gt;ImageMagick で PNG の形式を変換&lt;/h1&gt;

&lt;p&gt;PNG は同じように見える画像でも、バイナリ的に色んな形式で表現できます。ImageMagick でそれらの形式に変換する方法を並べてみます。&lt;/p&gt;

&lt;h1 id=&#34;カラータイプ&#34;&gt;カラータイプ&lt;/h1&gt;

&lt;p&gt;PNG は以下の5種類のカラータイプがあります。仕様書からコピペします。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Color  Type&lt;/th&gt;
&lt;th&gt;Allowed Bit Depths&lt;/th&gt;
&lt;th&gt;Interpretation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1,2,4,8,16&lt;/td&gt;
&lt;td&gt;Each pixel is a grayscale sample.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8,16&lt;/td&gt;
&lt;td&gt;Each pixel is an R,G,B triple.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1,2,4,8&lt;/td&gt;
&lt;td&gt;Each pixel is a palette index; a PLTE chunk must appear.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8,16&lt;/td&gt;
&lt;td&gt;Each pixel is a grayscale sample, followed by an alpha sample.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8,16&lt;/td&gt;
&lt;td&gt;Each pixel is an R,G,B triple, followed by an alpha sample.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;日本語に訳しつつ、いくつか情報を追記してみます。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;カラー型&lt;/th&gt;
&lt;th&gt;ビット&lt;br /&gt;深度&lt;/th&gt;
&lt;th&gt;PLTE&lt;/th&gt;
&lt;th&gt;tRNS&lt;/th&gt;
&lt;th&gt;ピクセル値の解釈&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1,2,4,8,16&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;../png-pixel-type0.png&#34; /&gt; グレースケール&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8,16&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;../png-pixel-type2.png&#34; /&gt; R,G,B (PNG24)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1,2,4,8&lt;/td&gt;
&lt;td&gt;必須○&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;../png-pixel-type3.png&#34; /&gt; インデックスカラー。(PNG8)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8,16&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;../png-pixel-type4.png&#34; /&gt; グレースケールの後ろにアルファ値。つまり YA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;8,16&lt;/td&gt;
&lt;td&gt;○&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;../png-pixel-type6.png&#34; /&gt; R,G,B の後ろにアルファ値。つまり RGBA　(PNG32)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;type-0-グレースケール&#34;&gt;Type:0 グレースケール&lt;/h2&gt;

&lt;p&gt;黒:0〜白:2^(bit数)の範囲の値を並べるだけの形式です。
bit数は 1,2,4,8,16 から選択できます。
&lt;center&gt; &lt;img src=&#34;../png-type0.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa.png -type Grayscale Opaopa-type0.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-type0.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;尚、tRNS チャンクをつける事で透明ピクセルも表現できます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;type-2-rgb-png24&#34;&gt;Type:2 RGB (PNG24)&lt;/h2&gt;

&lt;p&gt;ピクセルの R,G,B をそのまま展開します。
&lt;center&gt; &lt;img src=&#34;../png-type2.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa.png png24:Opaopa-png24.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-png24.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;PNG32 から PNG24 に変換しても透明度は消えますが、tRNS 付きの PNG8 からは tRNS を引き継げます。但し半透明は表現できず透明か不透明かのどちらかに割り当てられます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa-png8-trns.png png24:Opaopa-png24-trns.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-png24-trns.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tRNS チャンクをつける事で透明ピクセルも表現できます。但し、どの色を透明にするかを指定する方式なので、透明か不透明のどちらかで半透明は表現できません。大人しく Type 6 の RGBA 形式を使いましょう。&lt;/li&gt;
&lt;li&gt;PLTE チャンクをつける事で擬似カラー端末で表示する時のパレットを指定できます。今時レアですが。(sPLT とおなじ？)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;type-3-パレット-png8&#34;&gt;Type:3 パレット (PNG8)&lt;/h2&gt;

&lt;p&gt;色のパレットを持ち、そこへのインデックス値を並べて画像を表現します。
&lt;center&gt; &lt;img src=&#34;../png-type3.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa.png  png8:Opaopa-png8.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-png8.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;tRNS チャンクをつける事で透明度も表現できます。
&lt;center&gt; &lt;img src=&#34;../png-type3-tRNS.png&#34; /&gt; &lt;/center&gt;
&lt;center&gt; &lt;img src=&#34;../Opaopa-png8-trns.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;type-4-透明度つきグレースケール&#34;&gt;Type:4 透明度つきグレースケール&lt;/h2&gt;

&lt;p&gt;グレースケールの値と透明度のセットで表現します。
&lt;center&gt; &lt;img src=&#34;../png-type4.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa.png -type GrayscaleMatte  Opaopa-type4.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-type4.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;type-6-rgba-png32&#34;&gt;Type:6 RGBA (PNG32)&lt;/h2&gt;

&lt;p&gt;ピクセルの R,G,B,A を展開します。
&lt;center&gt; &lt;img src=&#34;../png-type6.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa.png  png32:Opaopa-png32.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-png32.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;インターレース&#34;&gt;インターレース&lt;/h1&gt;

&lt;p&gt;PNG のインターレースは独特で、Adam7 アルゴリズムを使います。&lt;/p&gt;

&lt;h2 id=&#34;インターレース方式-adam7&#34;&gt;インターレース方式 Adam7&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa.png -interlace PNG Opaopa-adam7.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-adam7.png&#34; /&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;ピクセルの並ぶ順番&#34;&gt;ピクセルの並ぶ順番&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;8x8 のブロックで左上のを１つ&lt;/li&gt;
&lt;li&gt;4x4 のブロックで左上を１つ&lt;/li&gt;
&lt;li&gt;2x2 のブロックで左上を１つ&lt;/li&gt;
&lt;li&gt;残り全部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という順でピクセルを保存します。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ピクセル&lt;/th&gt;
&lt;th&gt;実際の表示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;../Opaopa-dot1-adam7-1.png&#34; /&gt; &lt;img src=&#34;../Opaopa-dot8-adam7-1.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;../Opaopa-dot1-adam7-1-cmpl.png&#34; /&gt; &lt;img src=&#34;../Opaopa-dot8-adam7-1-cmpl.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;../Opaopa-dot1-adam7-2.png&#34; /&gt; &lt;img src=&#34;../Opaopa-dot8-adam7-2.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;../Opaopa-dot1-adam7-2-cmpl.png&#34; /&gt; &lt;img src=&#34;../Opaopa-dot8-adam7-2-cmpl.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;../Opaopa-dot1-adam7-3.png&#34; /&gt; &lt;img src=&#34;../Opaopa-dot8-adam7-3.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;../Opaopa-dot1-adam7-3-cmpl.png&#34; /&gt; &lt;img src=&#34;../Opaopa-dot8-adam7-3-cmpl.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;../Opaopa-dot1.png&#34; /&gt; &lt;img src=&#34;../Opaopa-dot8.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ちなみに上記画像は ImageMagick で以下のように生成できます。(-fx オプション便利！)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;インターレースのフェーズ別画像&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa-dot1.png -filter Point -fx &amp;quot;!(i%8)*!(j%8)*u&amp;quot; Opaopa-dot1-adam7-1.png
$ convert Opaopa-dot1.png -filter Point -fx &amp;quot;!(i%4)*!(j%4)*u&amp;quot; Opaopa-dot1-adam7-2.png
$ convert Opaopa-dot1.png -filter Point -fx &amp;quot;!(i%2)*!(j%2)*u&amp;quot; Opaopa-dot1-adam7-3.png
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;フェーズ別画像ピクセル補完あり&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert  Opaopa-dot1.png -filter Point -fx &amp;quot;p{i-i%8,j-j%8}&amp;quot; Opaopa-dot1-adam7-1-cmpl.png
$ convert  Opaopa-dot1.png -filter Point -fx &amp;quot;p{i-i%4,j-j%4}&amp;quot; Opaopa-dot1-adam7-2-cmpl.png
$ convert  Opaopa-dot1.png -filter Point -fx &amp;quot;p{i-i%2,j-j%2}&amp;quot; Opaopa-dot1-adam7-3-cmpl.png
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ドット絵風の拡大画像&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa-dot1-adam7-1.png -filter Point -resize 800% -fx &amp;quot;(i%8&amp;gt;0)*(j%8&amp;gt;0)*u&amp;quot; Opaopa-dot8-adam7-1.png
＜略＞
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;メタデータ&#34;&gt;メタデータ&lt;/h1&gt;

&lt;h2 id=&#34;gama-ガンマ補正&#34;&gt;gAMA (ガンマ補正)&lt;/h2&gt;

&lt;p&gt;単純にガンマ値を指定します。BigEndian の4byteで表現していて、ガンマ値を100000倍した値を格納します。逆にいうと、バイナリを整数として読み出し、1/100000 した値がガンマ値です。&lt;/p&gt;

&lt;h2 id=&#34;chrm-基本色度&#34;&gt;cHRM (基本色度)&lt;/h2&gt;

&lt;p&gt;基本色度やホワイトバランスを指定します。
尚、sRGB 又は iCPP チャンクがある場合、cHRM チャンクは無効です。&lt;/p&gt;

&lt;h2 id=&#34;icpp-icc-プロファイル&#34;&gt;iCPP (ICC プロファイル)&lt;/h2&gt;

&lt;p&gt;ICC プロファイルを埋め込めます。 (JPEG と同じ要領です)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa.png -profile sRGB.icc Opaopa-sRGB.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-sRGB.png&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa.png -profile GBR.icc Opaopa-GBR.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-GBR.png&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa-sRGB.png -profile GBR.icc Opaopa-sRGB-GBR.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-sRGB-GBR.png&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert Opaopa-sRGB-GBR.png -strip Opaopa-sRGB-GBR-strip.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&#34;../Opaopa-sRGB-GBR-strip.png&#34;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;p&gt;JPEG の時と同じのようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;元画像ファイルに ICC プロファイルがない場合

&lt;ul&gt;
&lt;li&gt;=&amp;gt; 単に ICC プロファイルを付けるだけ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ICC プロファイルがあった場合 =&amp;gt; 見た目の色が変わらないよう画像データのRGBを書き換えつつ ICCプロファイルを上書きする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bkgd-背景色&#34;&gt;bKGD (背景色)&lt;/h2&gt;

&lt;p&gt;背景色を指定します。画像が貼られた時に埋まらなかったピクセルを埋める色です。&lt;/p&gt;

&lt;h1 id=&#34;メタデータ-おまけ&#34;&gt;メタデータ (おまけ)&lt;/h1&gt;

&lt;h2 id=&#34;phys&#34;&gt;pHYs&lt;/h2&gt;

&lt;p&gt;DPI ならぬ DPM (インチでなくメートル単位) で物理的な解像度を指定します。印刷に影響するかもしれません。単位がインチでなくメートルなので少し計算が面倒です。&lt;/p&gt;

&lt;h2 id=&#34;sbit&#34;&gt;sBIT&lt;/h2&gt;

&lt;p&gt;元画像データの Bit深度を記録します。
恐らく、任意のビット深度を表現できる画像データ(例えば BMP とか)から PNG に変換した後で、また元のビット深度に戻したいといった場合に使えそうです。ビット深度を下げるような変換をした場合はつけないよう勧めています。意味がないので。&lt;/p&gt;

&lt;h1 id=&#34;参考-url&#34;&gt;参考 URL&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PNG (Portable Network Graphics) Specification, Version 1.2

&lt;ul&gt;
&lt;li&gt;(PDF版) &lt;a href=&#34;http://www.libpng.org/pub/png/spec/1.2/png-1.2.pdf&#34;&gt;http://www.libpng.org/pub/png/spec/1.2/png-1.2.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(HTML版) &lt;a href=&#34;http://www.libpng.org/pub/png/spec/1.2/PNG-Contents.html&#34;&gt;http://www.libpng.org/pub/png/spec/1.2/PNG-Contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PNGについて

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage2.nifty.com/sophia0/png.html&#34;&gt;http://homepage2.nifty.com/sophia0/png.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Fx Special Effects Image Operator

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/script/fx.php&#34;&gt;http://www.imagemagick.org/script/fx.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>